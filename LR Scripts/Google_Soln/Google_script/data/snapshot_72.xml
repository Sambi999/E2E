<?xml version="1.0" encoding="utf-8"?>
<HTTPSnapshot xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" id="72">
  <HTTPTask id="1496" hostname="in-media.apjonlinecdn.com" path="/static/version1707169154/frontend/HPOLS/stellar/en_US/knockoutjs/knockout.min.js" url="https://in-media.apjonlinecdn.com/static/version1707169154/frontend/HPOLS/stellar/en_US/knockoutjs/knockout.min.js" ip="18.67.161.33" port="443" connectionId="55" origin="Primary" frame="1" startDateTime="2024-02-07T15:17:25.116+05:30" startTime="94063609" endTime="94063625">
    <HTTPRequest method="GET">
      <HTTPHeaders>
        <HTTPHeaderEntity name="Host" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>aW4tbWVkaWEuYXBqb25saW5lY2RuLmNvbQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Connection" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="sec-ch-ua" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Ik5vdCBBKEJyYW5kIjt2PSI5OSIsICJHb29nbGUgQ2hyb21lIjt2PSIxMjEiLCAiQ2hyb21pdW0iO3Y9IjEyMSI=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="sec-ch-ua-mobile" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>PzA=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="User-Agent" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEyMS4wLjAuMCBTYWZhcmkvNTM3LjM2</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="sec-ch-ua-platform" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>IldpbmRvd3Mi</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Ki8q</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Sec-Fetch-Site" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Y3Jvc3Mtc2l0ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Sec-Fetch-Mode" index="8">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>bm8tY29ycw==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Sec-Fetch-Dest" index="9">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>c2NyaXB0</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Referer" index="10">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>aHR0cHM6Ly93d3cuaHAuY29tLw==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Encoding" index="11">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcCwgZGVmbGF0ZSwgYnI=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Language" index="12">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ZW4tR0IsZW47cT0wLjk=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>R0VUIC9zdGF0aWMvdmVyc2lvbjE3MDcxNjkxNTQvZnJvbnRlbmQvSFBPTFMvc3RlbGxhci9lbl9VUy9rbm9ja291dGpzL2tub2Nrb3V0Lm1pbi5qcyBIVFRQLzEuMQ0KSG9zdDogaW4tbWVkaWEuYXBqb25saW5lY2RuLmNvbQ0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0Kc2VjLWNoLXVhOiAiTm90IEEoQnJhbmQiO3Y9Ijk5IiwgIkdvb2dsZSBDaHJvbWUiO3Y9IjEyMSIsICJDaHJvbWl1bSI7dj0iMTIxIg0Kc2VjLWNoLXVhLW1vYmlsZTogPzANClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8xMjEuMC4wLjAgU2FmYXJpLzUzNy4zNg0Kc2VjLWNoLXVhLXBsYXRmb3JtOiAiV2luZG93cyINCkFjY2VwdDogKi8qDQpTZWMtRmV0Y2gtU2l0ZTogY3Jvc3Mtc2l0ZQ0KU2VjLUZldGNoLU1vZGU6IG5vLWNvcnMNClNlYy1GZXRjaC1EZXN0OiBzY3JpcHQNClJlZmVyZXI6IGh0dHBzOi8vd3d3LmhwLmNvbS8NCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdC1MYW5ndWFnZTogZW4tR0IsZW47cT0wLjkNCg0K</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
      </HTTPHeaders>
    </HTTPRequest>
    <HTTPResponse>
      <contentLenght>0</contentLenght>
      <HTTPHeaders>
        <HTTPHeaderEntity name="Content-Type" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Transfer-Encoding" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Y2h1bmtlZA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Connection" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Date" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>TW9uLCAwNSBGZWIgMjAyNCAyMjowNjowMyBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Last-Modified" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>TW9uLCAwNSBGZWIgMjAyNCAyMTo0MjoxNCBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="ETag" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Vy8iMWY0MzcyMDcyMjY5MmIwYzM3N2VjMzhmYTY2NmM2NzUi</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="x-amz-server-side-encryption" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>QUVTMjU2</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Cache-Control" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>bWF4LWFnZT0zMTUzNjAwMA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Server" index="8">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>QW1hem9uUzM=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Encoding" index="9">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Vary" index="10">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="X-Cache" index="11">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>SGl0IGZyb20gY2xvdWRmcm9udA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Via" index="12">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MS4xIDgyYjIxNTljYTAwOWIzZWIyNjRkMjFiMGE3ZDdhODIyLmNsb3VkZnJvbnQubmV0IChDbG91ZEZyb250KQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="X-Amz-Cf-Pop" index="13">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>TUFBNTEtUDE=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="X-Amz-Cf-Id" index="14">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>c2ZxUHFMTk5IRS1ubHBIeTg4Smt5ZXlFYmVlM1R2QzE4TkQ2RFZFUW4zVVdrNkhpaGR4WW9nPT0=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Age" index="15">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MTI5MTIx</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQNClRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkDQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQpEYXRlOiBNb24sIDA1IEZlYiAyMDI0IDIyOjA2OjAzIEdNVA0KTGFzdC1Nb2RpZmllZDogTW9uLCAwNSBGZWIgMjAyNCAyMTo0MjoxNCBHTVQNCkVUYWc6IFcvIjFmNDM3MjA3MjI2OTJiMGMzNzdlYzM4ZmE2NjZjNjc1Ig0KeC1hbXotc2VydmVyLXNpZGUtZW5jcnlwdGlvbjogQUVTMjU2DQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTMxNTM2MDAwDQpTZXJ2ZXI6IEFtYXpvblMzDQpDb250ZW50LUVuY29kaW5nOiBnemlwDQpWYXJ5OiBBY2NlcHQtRW5jb2RpbmcNClgtQ2FjaGU6IEhpdCBmcm9tIGNsb3VkZnJvbnQNClZpYTogMS4xIDgyYjIxNTljYTAwOWIzZWIyNjRkMjFiMGE3ZDdhODIyLmNsb3VkZnJvbnQubmV0IChDbG91ZEZyb250KQ0KWC1BbXotQ2YtUG9wOiBNQUE1MS1QMQ0KWC1BbXotQ2YtSWQ6IHNmcVBxTE5OSEUtbmxwSHk4OEpreWV5RWJlZTNUdkMxOE5ENkRWRVFuM1VXazZIaWhkeFlvZz09DQpBZ2U6IDEyOTEyMQ0KDQo=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
      </HTTPHeaders>
      <HTTPBody>
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>LyohCiAqIEtub2Nrb3V0IEphdmFTY3JpcHQgbGlicmFyeSB2My41LjEKICogKGMpIFRoZSBLbm9ja291dC5qcyB0ZWFtIC0gaHR0cDovL2tub2Nrb3V0anMuY29tLwogKiBMaWNlbnNlOiBNSVQgKGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwKQogKi8KKGZ1bmN0aW9uKCl7dmFyIERFQlVHPXRydWU7KGZ1bmN0aW9uKHVuZGVmaW5lZCl7dmFyIHdpbmRvdz10aGlzfHwoMCxldmFsKSgndGhpcycpLGRvY3VtZW50PXdpbmRvd1snZG9jdW1lbnQnXSxuYXZpZ2F0b3I9d2luZG93WyduYXZpZ2F0b3InXSxqUXVlcnlJbnN0YW5jZT13aW5kb3dbImpRdWVyeSJdLEpTT049d2luZG93WyJKU09OIl07aWYoIWpRdWVyeUluc3RhbmNlJiZ0eXBlb2YgalF1ZXJ5IT09InVuZGVmaW5lZCIpe2pRdWVyeUluc3RhbmNlPWpRdWVyeTt9CihmdW5jdGlvbihmYWN0b3J5KXtpZih0eXBlb2YgZGVmaW5lPT09J2Z1bmN0aW9uJyYmZGVmaW5lWydhbWQnXSl7ZGVmaW5lKFsnZXhwb3J0cycsJ3JlcXVpcmUnXSxmYWN0b3J5KTt9ZWxzZSBpZih0eXBlb2YgZXhwb3J0cz09PSdvYmplY3QnJiZ0eXBlb2YgbW9kdWxlPT09J29iamVjdCcpe2ZhY3RvcnkobW9kdWxlWydleHBvcnRzJ118fGV4cG9ydHMpO31lbHNle2ZhY3Rvcnkod2luZG93WydrbyddPXt9KTt9fShmdW5jdGlvbihrb0V4cG9ydHMsYW1kUmVxdWlyZSl7dmFyIGtvPXR5cGVvZiBrb0V4cG9ydHMhPT0ndW5kZWZpbmVkJz9rb0V4cG9ydHM6e307a28uZXhwb3J0U3ltYm9sPWZ1bmN0aW9uKGtvUGF0aCxvYmplY3Qpe3ZhciB0b2tlbnM9a29QYXRoLnNwbGl0KCIuIik7dmFyIHRhcmdldD1rbztmb3IodmFyIGk9MDtpPHRva2Vucy5sZW5ndGgtMTtpKyspCnRhcmdldD10YXJnZXRbdG9rZW5zW2ldXTt0YXJnZXRbdG9rZW5zW3Rva2Vucy5sZW5ndGgtMV1dPW9iamVjdDt9O2tvLmV4cG9ydFByb3BlcnR5PWZ1bmN0aW9uKG93bmVyLHB1YmxpY05hbWUsb2JqZWN0KXtvd25lcltwdWJsaWNOYW1lXT1vYmplY3Q7fTtrby52ZXJzaW9uPSIzLjUuMSI7a28uZXhwb3J0U3ltYm9sKCd2ZXJzaW9uJyxrby52ZXJzaW9uKTtrby5vcHRpb25zPXsnZGVmZXJVcGRhdGVzJzpmYWxzZSwndXNlT25seU5hdGl2ZUV2ZW50cyc6ZmFsc2UsJ2ZvcmVhY2hIaWRlc0Rlc3Ryb3llZCc6ZmFsc2V9O2tvLnV0aWxzPShmdW5jdGlvbigpe3ZhciBoYXNPd25Qcm9wZXJ0eT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O2Z1bmN0aW9uIG9iamVjdEZvckVhY2gob2JqLGFjdGlvbil7Zm9yKHZhciBwcm9wIGluIG9iail7aWYoaGFzT3duUHJvcGVydHkuY2FsbChvYmoscHJvcCkpe2FjdGlvbihwcm9wLG9ialtwcm9wXSk7fX19CmZ1bmN0aW9uIGV4dGVuZCh0YXJnZXQsc291cmNlKXtpZihzb3VyY2Upe2Zvcih2YXIgcHJvcCBpbiBzb3VyY2Upe2lmKGhhc093blByb3BlcnR5LmNhbGwoc291cmNlLHByb3ApKXt0YXJnZXRbcHJvcF09c291cmNlW3Byb3BdO319fQpyZXR1cm4gdGFyZ2V0O30KZnVuY3Rpb24gc2V0UHJvdG90eXBlT2Yob2JqLHByb3RvKXtvYmouX19wcm90b19fPXByb3RvO3JldHVybiBvYmo7fQp2YXIgY2FuU2V0UHJvdG90eXBlPSh7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkpO3ZhciBjYW5Vc2VTeW1ib2xzPSFERUJVRyYmdHlwZW9mIFN5bWJvbD09PSdmdW5jdGlvbic7dmFyIGtub3duRXZlbnRzPXt9LGtub3duRXZlbnRUeXBlc0J5RXZlbnROYW1lPXt9O3ZhciBrZXlFdmVudFR5cGVOYW1lPShuYXZpZ2F0b3ImJi9GaXJlZm94XC8yL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSk/J0tleWJvYXJkRXZlbnQnOidVSUV2ZW50cyc7a25vd25FdmVudHNba2V5RXZlbnRUeXBlTmFtZV09WydrZXl1cCcsJ2tleWRvd24nLCdrZXlwcmVzcyddO2tub3duRXZlbnRzWydNb3VzZUV2ZW50cyddPVsnY2xpY2snLCdkYmxjbGljaycsJ21vdXNlZG93bicsJ21vdXNldXAnLCdtb3VzZW1vdmUnLCdtb3VzZW92ZXInLCdtb3VzZW91dCcsJ21vdXNlZW50ZXInLCdtb3VzZWxlYXZlJ107b2JqZWN0Rm9yRWFjaChrbm93bkV2ZW50cyxmdW5jdGlvbihldmVudFR5cGUsa25vd25FdmVudHNGb3JUeXBlKXtpZihrbm93bkV2ZW50c0ZvclR5cGUubGVuZ3RoKXtmb3IodmFyIGk9MCxqPWtub3duRXZlbnRzRm9yVHlwZS5sZW5ndGg7aTxqO2krKykKa25vd25FdmVudFR5cGVzQnlFdmVudE5hbWVba25vd25FdmVudHNGb3JUeXBlW2ldXT1ldmVudFR5cGU7fX0pO3ZhciBldmVudHNUaGF0TXVzdEJlUmVnaXN0ZXJlZFVzaW5nQXR0YWNoRXZlbnQ9eydwcm9wZXJ0eWNoYW5nZSc6dHJ1ZX07dmFyIGllVmVyc2lvbj1kb2N1bWVudCYmKGZ1bmN0aW9uKCl7dmFyIHZlcnNpb249MyxkaXY9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksaUVsZW1zPWRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaScpO3doaWxlKGRpdi5pbm5lckhUTUw9JzwhLS1baWYgZ3QgSUUgJysoKyt2ZXJzaW9uKSsnXT48aT48L2k+PCFbZW5kaWZdLS0+JyxpRWxlbXNbMF0pe30KcmV0dXJuIHZlcnNpb24+ND92ZXJzaW9uOnVuZGVmaW5lZDt9KCkpO3ZhciBpc0llNj1pZVZlcnNpb249PT02LGlzSWU3PWllVmVyc2lvbj09PTc7ZnVuY3Rpb24gaXNDbGlja09uQ2hlY2thYmxlRWxlbWVudChlbGVtZW50LGV2ZW50VHlwZSl7aWYoKGtvLnV0aWxzLnRhZ05hbWVMb3dlcihlbGVtZW50KSE9PSJpbnB1dCIpfHwhZWxlbWVudC50eXBlKXJldHVybiBmYWxzZTtpZihldmVudFR5cGUudG9Mb3dlckNhc2UoKSE9ImNsaWNrIilyZXR1cm4gZmFsc2U7dmFyIGlucHV0VHlwZT1lbGVtZW50LnR5cGU7cmV0dXJuKGlucHV0VHlwZT09ImNoZWNrYm94Iil8fChpbnB1dFR5cGU9PSJyYWRpbyIpO30KdmFyIGNzc0NsYXNzTmFtZVJlZ2V4PS9cUysvZzt2YXIgalF1ZXJ5RXZlbnRBdHRhY2hOYW1lO2Z1bmN0aW9uIHRvZ2dsZURvbU5vZGVDc3NDbGFzcyhub2RlLGNsYXNzTmFtZXMsc2hvdWxkSGF2ZUNsYXNzKXt2YXIgYWRkT3JSZW1vdmVGbjtpZihjbGFzc05hbWVzKXtpZih0eXBlb2Ygbm9kZS5jbGFzc0xpc3Q9PT0nb2JqZWN0Jyl7YWRkT3JSZW1vdmVGbj1ub2RlLmNsYXNzTGlzdFtzaG91bGRIYXZlQ2xhc3M/J2FkZCc6J3JlbW92ZSddO2tvLnV0aWxzLmFycmF5Rm9yRWFjaChjbGFzc05hbWVzLm1hdGNoKGNzc0NsYXNzTmFtZVJlZ2V4KSxmdW5jdGlvbihjbGFzc05hbWUpe2FkZE9yUmVtb3ZlRm4uY2FsbChub2RlLmNsYXNzTGlzdCxjbGFzc05hbWUpO30pO31lbHNlIGlmKHR5cGVvZiBub2RlLmNsYXNzTmFtZVsnYmFzZVZhbCddPT09J3N0cmluZycpe3RvZ2dsZU9iamVjdENsYXNzUHJvcGVydHlTdHJpbmcobm9kZS5jbGFzc05hbWUsJ2Jhc2VWYWwnLGNsYXNzTmFtZXMsc2hvdWxkSGF2ZUNsYXNzKTt9ZWxzZXt0b2dnbGVPYmplY3RDbGFzc1Byb3BlcnR5U3RyaW5nKG5vZGUsJ2NsYXNzTmFtZScsY2xhc3NOYW1lcyxzaG91bGRIYXZlQ2xhc3MpO319fQpmdW5jdGlvbiB0b2dnbGVPYmplY3RDbGFzc1Byb3BlcnR5U3RyaW5nKG9iaixwcm9wLGNsYXNzTmFtZXMsc2hvdWxkSGF2ZUNsYXNzKXt2YXIgY3VycmVudENsYXNzTmFtZXM9b2JqW3Byb3BdLm1hdGNoKGNzc0NsYXNzTmFtZVJlZ2V4KXx8W107a28udXRpbHMuYXJyYXlGb3JFYWNoKGNsYXNzTmFtZXMubWF0Y2goY3NzQ2xhc3NOYW1lUmVnZXgpLGZ1bmN0aW9uKGNsYXNzTmFtZSl7a28udXRpbHMuYWRkT3JSZW1vdmVJdGVtKGN1cnJlbnRDbGFzc05hbWVzLGNsYXNzTmFtZSxzaG91bGRIYXZlQ2xhc3MpO30pO29ialtwcm9wXT1jdXJyZW50Q2xhc3NOYW1lcy5qb2luKCIgIik7fQpyZXR1cm57ZmllbGRzSW5jbHVkZWRXaXRoSnNvblBvc3Q6WydhdXRoZW50aWNpdHlfdG9rZW4nLC9eX19SZXF1ZXN0VmVyaWZpY2F0aW9uVG9rZW4oXy4qKT8kL10sYXJyYXlGb3JFYWNoOmZ1bmN0aW9uKGFycmF5LGFjdGlvbixhY3Rpb25Pd25lcil7Zm9yKHZhciBpPTAsaj1hcnJheS5sZW5ndGg7aTxqO2krKyl7YWN0aW9uLmNhbGwoYWN0aW9uT3duZXIsYXJyYXlbaV0saSxhcnJheSk7fX0sYXJyYXlJbmRleE9mOnR5cGVvZiBBcnJheS5wcm90b3R5cGUuaW5kZXhPZj09ImZ1bmN0aW9uIj9mdW5jdGlvbihhcnJheSxpdGVtKXtyZXR1cm4gQXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChhcnJheSxpdGVtKTt9OmZ1bmN0aW9uKGFycmF5LGl0ZW0pe2Zvcih2YXIgaT0wLGo9YXJyYXkubGVuZ3RoO2k8ajtpKyspe2lmKGFycmF5W2ldPT09aXRlbSkKcmV0dXJuIGk7fQpyZXR1cm4tMTt9LGFycmF5Rmlyc3Q6ZnVuY3Rpb24oYXJyYXkscHJlZGljYXRlLHByZWRpY2F0ZU93bmVyKXtmb3IodmFyIGk9MCxqPWFycmF5Lmxlbmd0aDtpPGo7aSsrKXtpZihwcmVkaWNhdGUuY2FsbChwcmVkaWNhdGVPd25lcixhcnJheVtpXSxpLGFycmF5KSkKcmV0dXJuIGFycmF5W2ldO30KcmV0dXJuIHVuZGVmaW5lZDt9LGFycmF5UmVtb3ZlSXRlbTpmdW5jdGlvbihhcnJheSxpdGVtVG9SZW1vdmUpe3ZhciBpbmRleD1rby51dGlscy5hcnJheUluZGV4T2YoYXJyYXksaXRlbVRvUmVtb3ZlKTtpZihpbmRleD4wKXthcnJheS5zcGxpY2UoaW5kZXgsMSk7fQplbHNlIGlmKGluZGV4PT09MCl7YXJyYXkuc2hpZnQoKTt9fSxhcnJheUdldERpc3RpbmN0VmFsdWVzOmZ1bmN0aW9uKGFycmF5KXt2YXIgcmVzdWx0PVtdO2lmKGFycmF5KXtrby51dGlscy5hcnJheUZvckVhY2goYXJyYXksZnVuY3Rpb24oaXRlbSl7aWYoa28udXRpbHMuYXJyYXlJbmRleE9mKHJlc3VsdCxpdGVtKTwwKQpyZXN1bHQucHVzaChpdGVtKTt9KTt9CnJldHVybiByZXN1bHQ7fSxhcnJheU1hcDpmdW5jdGlvbihhcnJheSxtYXBwaW5nLG1hcHBpbmdPd25lcil7dmFyIHJlc3VsdD1bXTtpZihhcnJheSl7Zm9yKHZhciBpPTAsaj1hcnJheS5sZW5ndGg7aTxqO2krKykKcmVzdWx0LnB1c2gobWFwcGluZy5jYWxsKG1hcHBpbmdPd25lcixhcnJheVtpXSxpKSk7fQpyZXR1cm4gcmVzdWx0O30sYXJyYXlGaWx0ZXI6ZnVuY3Rpb24oYXJyYXkscHJlZGljYXRlLHByZWRpY2F0ZU93bmVyKXt2YXIgcmVzdWx0PVtdO2lmKGFycmF5KXtmb3IodmFyIGk9MCxqPWFycmF5Lmxlbmd0aDtpPGo7aSsrKQppZihwcmVkaWNhdGUuY2FsbChwcmVkaWNhdGVPd25lcixhcnJheVtpXSxpKSkKcmVzdWx0LnB1c2goYXJyYXlbaV0pO30KcmV0dXJuIHJlc3VsdDt9LGFycmF5UHVzaEFsbDpmdW5jdGlvbihhcnJheSx2YWx1ZXNUb1B1c2gpe2lmKHZhbHVlc1RvUHVzaCBpbnN0YW5jZW9mIEFycmF5KQphcnJheS5wdXNoLmFwcGx5KGFycmF5LHZhbHVlc1RvUHVzaCk7ZWxzZQpmb3IodmFyIGk9MCxqPXZhbHVlc1RvUHVzaC5sZW5ndGg7aTxqO2krKykKYXJyYXkucHVzaCh2YWx1ZXNUb1B1c2hbaV0pO3JldHVybiBhcnJheTt9LGFkZE9yUmVtb3ZlSXRlbTpmdW5jdGlvbihhcnJheSx2YWx1ZSxpbmNsdWRlZCl7dmFyIGV4aXN0aW5nRW50cnlJbmRleD1rby51dGlscy5hcnJheUluZGV4T2Yoa28udXRpbHMucGVla09ic2VydmFibGUoYXJyYXkpLHZhbHVlKTtpZihleGlzdGluZ0VudHJ5SW5kZXg8MCl7aWYoaW5jbHVkZWQpCmFycmF5LnB1c2godmFsdWUpO31lbHNle2lmKCFpbmNsdWRlZCkKYXJyYXkuc3BsaWNlKGV4aXN0aW5nRW50cnlJbmRleCwxKTt9fSxjYW5TZXRQcm90b3R5cGU6Y2FuU2V0UHJvdG90eXBlLGV4dGVuZDpleHRlbmQsc2V0UHJvdG90eXBlT2Y6c2V0UHJvdG90eXBlT2Ysc2V0UHJvdG90eXBlT2ZPckV4dGVuZDpjYW5TZXRQcm90b3R5cGU/c2V0UHJvdG90eXBlT2Y6ZXh0ZW5kLG9iamVjdEZvckVhY2g6b2JqZWN0Rm9yRWFjaCxvYmplY3RNYXA6ZnVuY3Rpb24oc291cmNlLG1hcHBpbmcsbWFwcGluZ093bmVyKXtpZighc291cmNlKQpyZXR1cm4gc291cmNlO3ZhciB0YXJnZXQ9e307Zm9yKHZhciBwcm9wIGluIHNvdXJjZSl7aWYoaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UscHJvcCkpe3RhcmdldFtwcm9wXT1tYXBwaW5nLmNhbGwobWFwcGluZ093bmVyLHNvdXJjZVtwcm9wXSxwcm9wLHNvdXJjZSk7fX0KcmV0dXJuIHRhcmdldDt9LGVtcHR5RG9tTm9kZTpmdW5jdGlvbihkb21Ob2RlKXt3aGlsZShkb21Ob2RlLmZpcnN0Q2hpbGQpe2tvLnJlbW92ZU5vZGUoZG9tTm9kZS5maXJzdENoaWxkKTt9fSxtb3ZlQ2xlYW5lZE5vZGVzVG9Db250YWluZXJFbGVtZW50OmZ1bmN0aW9uKG5vZGVzKXt2YXIgbm9kZXNBcnJheT1rby51dGlscy5tYWtlQXJyYXkobm9kZXMpO3ZhciB0ZW1wbGF0ZURvY3VtZW50PShub2Rlc0FycmF5WzBdJiZub2Rlc0FycmF5WzBdLm93bmVyRG9jdW1lbnQpfHxkb2N1bWVudDt2YXIgY29udGFpbmVyPXRlbXBsYXRlRG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7Zm9yKHZhciBpPTAsaj1ub2Rlc0FycmF5Lmxlbmd0aDtpPGo7aSsrKXtjb250YWluZXIuYXBwZW5kQ2hpbGQoa28uY2xlYW5Ob2RlKG5vZGVzQXJyYXlbaV0pKTt9CnJldHVybiBjb250YWluZXI7fSxjbG9uZU5vZGVzOmZ1bmN0aW9uKG5vZGVzQXJyYXksc2hvdWxkQ2xlYW5Ob2Rlcyl7Zm9yKHZhciBpPTAsaj1ub2Rlc0FycmF5Lmxlbmd0aCxuZXdOb2Rlc0FycmF5PVtdO2k8ajtpKyspe3ZhciBjbG9uZWROb2RlPW5vZGVzQXJyYXlbaV0uY2xvbmVOb2RlKHRydWUpO25ld05vZGVzQXJyYXkucHVzaChzaG91bGRDbGVhbk5vZGVzP2tvLmNsZWFuTm9kZShjbG9uZWROb2RlKTpjbG9uZWROb2RlKTt9CnJldHVybiBuZXdOb2Rlc0FycmF5O30sc2V0RG9tTm9kZUNoaWxkcmVuOmZ1bmN0aW9uKGRvbU5vZGUsY2hpbGROb2Rlcyl7a28udXRpbHMuZW1wdHlEb21Ob2RlKGRvbU5vZGUpO2lmKGNoaWxkTm9kZXMpe2Zvcih2YXIgaT0wLGo9Y2hpbGROb2Rlcy5sZW5ndGg7aTxqO2krKykKZG9tTm9kZS5hcHBlbmRDaGlsZChjaGlsZE5vZGVzW2ldKTt9fSxyZXBsYWNlRG9tTm9kZXM6ZnVuY3Rpb24obm9kZVRvUmVwbGFjZU9yTm9kZUFycmF5LG5ld05vZGVzQXJyYXkpe3ZhciBub2Rlc1RvUmVwbGFjZUFycmF5PW5vZGVUb1JlcGxhY2VPck5vZGVBcnJheS5ub2RlVHlwZT9bbm9kZVRvUmVwbGFjZU9yTm9kZUFycmF5XTpub2RlVG9SZXBsYWNlT3JOb2RlQXJyYXk7aWYobm9kZXNUb1JlcGxhY2VBcnJheS5sZW5ndGg+MCl7dmFyIGluc2VydGlvblBvaW50PW5vZGVzVG9SZXBsYWNlQXJyYXlbMF07dmFyIHBhcmVudD1pbnNlcnRpb25Qb2ludC5wYXJlbnROb2RlO2Zvcih2YXIgaT0wLGo9bmV3Tm9kZXNBcnJheS5sZW5ndGg7aTxqO2krKykKcGFyZW50Lmluc2VydEJlZm9yZShuZXdOb2Rlc0FycmF5W2ldLGluc2VydGlvblBvaW50KTtmb3IodmFyIGk9MCxqPW5vZGVzVG9SZXBsYWNlQXJyYXkubGVuZ3RoO2k8ajtpKyspe2tvLnJlbW92ZU5vZGUobm9kZXNUb1JlcGxhY2VBcnJheVtpXSk7fX19LGZpeFVwQ29udGludW91c05vZGVBcnJheTpmdW5jdGlvbihjb250aW51b3VzTm9kZUFycmF5LHBhcmVudE5vZGUpe2lmKGNvbnRpbnVvdXNOb2RlQXJyYXkubGVuZ3RoKXtwYXJlbnROb2RlPShwYXJlbnROb2RlLm5vZGVUeXBlPT09OCYmcGFyZW50Tm9kZS5wYXJlbnROb2RlKXx8cGFyZW50Tm9kZTt3aGlsZShjb250aW51b3VzTm9kZUFycmF5Lmxlbmd0aCYmY29udGludW91c05vZGVBcnJheVswXS5wYXJlbnROb2RlIT09cGFyZW50Tm9kZSkKY29udGludW91c05vZGVBcnJheS5zcGxpY2UoMCwxKTt3aGlsZShjb250aW51b3VzTm9kZUFycmF5Lmxlbmd0aD4xJiZjb250aW51b3VzTm9kZUFycmF5W2NvbnRpbnVvdXNOb2RlQXJyYXkubGVuZ3RoLTFdLnBhcmVudE5vZGUhPT1wYXJlbnROb2RlKQpjb250aW51b3VzTm9kZUFycmF5Lmxlbmd0aC0tO2lmKGNvbnRpbnVvdXNOb2RlQXJyYXkubGVuZ3RoPjEpe3ZhciBjdXJyZW50PWNvbnRpbnVvdXNOb2RlQXJyYXlbMF0sbGFzdD1jb250aW51b3VzTm9kZUFycmF5W2NvbnRpbnVvdXNOb2RlQXJyYXkubGVuZ3RoLTFdO2NvbnRpbnVvdXNOb2RlQXJyYXkubGVuZ3RoPTA7d2hpbGUoY3VycmVudCE9PWxhc3Qpe2NvbnRpbnVvdXNOb2RlQXJyYXkucHVzaChjdXJyZW50KTtjdXJyZW50PWN1cnJlbnQubmV4dFNpYmxpbmc7fQpjb250aW51b3VzTm9kZUFycmF5LnB1c2gobGFzdCk7fX0KcmV0dXJuIGNvbnRpbnVvdXNOb2RlQXJyYXk7fSxzZXRPcHRpb25Ob2RlU2VsZWN0aW9uU3RhdGU6ZnVuY3Rpb24ob3B0aW9uTm9kZSxpc1NlbGVjdGVkKXtpZihpZVZlcnNpb248NykKb3B0aW9uTm9kZS5zZXRBdHRyaWJ1dGUoInNlbGVjdGVkIixpc1NlbGVjdGVkKTtlbHNlCm9wdGlvbk5vZGUuc2VsZWN0ZWQ9aXNTZWxlY3RlZDt9LHN0cmluZ1RyaW06ZnVuY3Rpb24oc3RyaW5nKXtyZXR1cm4gc3RyaW5nPT09bnVsbHx8c3RyaW5nPT09dW5kZWZpbmVkPycnOnN0cmluZy50cmltP3N0cmluZy50cmltKCk6c3RyaW5nLnRvU3RyaW5nKCkucmVwbGFjZSgvXltcc1x4YTBdK3xbXHNceGEwXSskL2csJycpO30sc3RyaW5nU3RhcnRzV2l0aDpmdW5jdGlvbihzdHJpbmcsc3RhcnRzV2l0aCl7c3RyaW5nPXN0cmluZ3x8IiI7aWYoc3RhcnRzV2l0aC5sZW5ndGg+c3RyaW5nLmxlbmd0aCkKcmV0dXJuIGZhbHNlO3JldHVybiBzdHJpbmcuc3Vic3RyaW5nKDAsc3RhcnRzV2l0aC5sZW5ndGgpPT09c3RhcnRzV2l0aDt9LGRvbU5vZGVJc0NvbnRhaW5lZEJ5OmZ1bmN0aW9uKG5vZGUsY29udGFpbmVkQnlOb2RlKXtpZihub2RlPT09Y29udGFpbmVkQnlOb2RlKQpyZXR1cm4gdHJ1ZTtpZihub2RlLm5vZGVUeXBlPT09MTEpCnJldHVybiBmYWxzZTtpZihjb250YWluZWRCeU5vZGUuY29udGFpbnMpCnJldHVybiBjb250YWluZWRCeU5vZGUuY29udGFpbnMobm9kZS5ub2RlVHlwZSE9PTE/bm9kZS5wYXJlbnROb2RlOm5vZGUpO2lmKGNvbnRhaW5lZEJ5Tm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbikKcmV0dXJuKGNvbnRhaW5lZEJ5Tm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihub2RlKSYxNik9PTE2O3doaWxlKG5vZGUmJm5vZGUhPWNvbnRhaW5lZEJ5Tm9kZSl7bm9kZT1ub2RlLnBhcmVudE5vZGU7fQpyZXR1cm4hIW5vZGU7fSxkb21Ob2RlSXNBdHRhY2hlZFRvRG9jdW1lbnQ6ZnVuY3Rpb24obm9kZSl7cmV0dXJuIGtvLnV0aWxzLmRvbU5vZGVJc0NvbnRhaW5lZEJ5KG5vZGUsbm9kZS5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCk7fSxhbnlEb21Ob2RlSXNBdHRhY2hlZFRvRG9jdW1lbnQ6ZnVuY3Rpb24obm9kZXMpe3JldHVybiEha28udXRpbHMuYXJyYXlGaXJzdChub2Rlcyxrby51dGlscy5kb21Ob2RlSXNBdHRhY2hlZFRvRG9jdW1lbnQpO30sdGFnTmFtZUxvd2VyOmZ1bmN0aW9uKGVsZW1lbnQpe3JldHVybiBlbGVtZW50JiZlbGVtZW50LnRhZ05hbWUmJmVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpO30sY2F0Y2hGdW5jdGlvbkVycm9yczpmdW5jdGlvbihkZWxlZ2F0ZSl7cmV0dXJuIGtvWydvbkVycm9yJ10/ZnVuY3Rpb24oKXt0cnl7cmV0dXJuIGRlbGVnYXRlLmFwcGx5KHRoaXMsYXJndW1lbnRzKTt9Y2F0Y2goZSl7a29bJ29uRXJyb3InXSYma29bJ29uRXJyb3InXShlKTt0aHJvdyBlO319OmRlbGVnYXRlO30sc2V0VGltZW91dDpmdW5jdGlvbihoYW5kbGVyLHRpbWVvdXQpe3JldHVybiBzZXRUaW1lb3V0KGtvLnV0aWxzLmNhdGNoRnVuY3Rpb25FcnJvcnMoaGFuZGxlciksdGltZW91dCk7fSxkZWZlckVycm9yOmZ1bmN0aW9uKGVycm9yKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7a29bJ29uRXJyb3InXSYma29bJ29uRXJyb3InXShlcnJvcik7dGhyb3cgZXJyb3I7fSwwKTt9LHJlZ2lzdGVyRXZlbnRIYW5kbGVyOmZ1bmN0aW9uKGVsZW1lbnQsZXZlbnRUeXBlLGhhbmRsZXIpe3ZhciB3cmFwcGVkSGFuZGxlcj1rby51dGlscy5jYXRjaEZ1bmN0aW9uRXJyb3JzKGhhbmRsZXIpO3ZhciBtdXN0VXNlQXR0YWNoRXZlbnQ9ZXZlbnRzVGhhdE11c3RCZVJlZ2lzdGVyZWRVc2luZ0F0dGFjaEV2ZW50W2V2ZW50VHlwZV07aWYoIWtvLm9wdGlvbnNbJ3VzZU9ubHlOYXRpdmVFdmVudHMnXSYmIW11c3RVc2VBdHRhY2hFdmVudCYmalF1ZXJ5SW5zdGFuY2Upe2lmKCFqUXVlcnlFdmVudEF0dGFjaE5hbWUpe2pRdWVyeUV2ZW50QXR0YWNoTmFtZT0odHlwZW9mIGpRdWVyeUluc3RhbmNlKGVsZW1lbnQpWydvbiddPT0nZnVuY3Rpb24nKT8nb24nOidiaW5kJzt9CmpRdWVyeUluc3RhbmNlKGVsZW1lbnQpW2pRdWVyeUV2ZW50QXR0YWNoTmFtZV0oZXZlbnRUeXBlLHdyYXBwZWRIYW5kbGVyKTt9ZWxzZSBpZighbXVzdFVzZUF0dGFjaEV2ZW50JiZ0eXBlb2YgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyPT0iZnVuY3Rpb24iKQplbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLHdyYXBwZWRIYW5kbGVyLGZhbHNlKTtlbHNlIGlmKHR5cGVvZiBlbGVtZW50LmF0dGFjaEV2ZW50IT0idW5kZWZpbmVkIil7dmFyIGF0dGFjaEV2ZW50SGFuZGxlcj1mdW5jdGlvbihldmVudCl7d3JhcHBlZEhhbmRsZXIuY2FsbChlbGVtZW50LGV2ZW50KTt9LGF0dGFjaEV2ZW50TmFtZT0ib24iK2V2ZW50VHlwZTtlbGVtZW50LmF0dGFjaEV2ZW50KGF0dGFjaEV2ZW50TmFtZSxhdHRhY2hFdmVudEhhbmRsZXIpO2tvLnV0aWxzLmRvbU5vZGVEaXNwb3NhbC5hZGREaXNwb3NlQ2FsbGJhY2soZWxlbWVudCxmdW5jdGlvbigpe2VsZW1lbnQuZGV0YWNoRXZlbnQoYXR0YWNoRXZlbnROYW1lLGF0dGFjaEV2ZW50SGFuZGxlcik7fSk7fWVsc2UKdGhyb3cgbmV3IEVycm9yKCJCcm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBhZGRFdmVudExpc3RlbmVyIG9yIGF0dGFjaEV2ZW50Iik7fSx0cmlnZ2VyRXZlbnQ6ZnVuY3Rpb24oZWxlbWVudCxldmVudFR5cGUpe2lmKCEoZWxlbWVudCYmZWxlbWVudC5ub2RlVHlwZSkpCnRocm93IG5ldyBFcnJvcigiZWxlbWVudCBtdXN0IGJlIGEgRE9NIG5vZGUgd2hlbiBjYWxsaW5nIHRyaWdnZXJFdmVudCIpO3ZhciB1c2VDbGlja1dvcmthcm91bmQ9aXNDbGlja09uQ2hlY2thYmxlRWxlbWVudChlbGVtZW50LGV2ZW50VHlwZSk7aWYoIWtvLm9wdGlvbnNbJ3VzZU9ubHlOYXRpdmVFdmVudHMnXSYmalF1ZXJ5SW5zdGFuY2UmJiF1c2VDbGlja1dvcmthcm91bmQpe2pRdWVyeUluc3RhbmNlKGVsZW1lbnQpWyd0cmlnZ2VyJ10oZXZlbnRUeXBlKTt9ZWxzZSBpZih0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRXZlbnQ9PSJmdW5jdGlvbiIpe2lmKHR5cGVvZiBlbGVtZW50LmRpc3BhdGNoRXZlbnQ9PSJmdW5jdGlvbiIpe3ZhciBldmVudENhdGVnb3J5PWtub3duRXZlbnRUeXBlc0J5RXZlbnROYW1lW2V2ZW50VHlwZV18fCJIVE1MRXZlbnRzIjt2YXIgZXZlbnQ9ZG9jdW1lbnQuY3JlYXRlRXZlbnQoZXZlbnRDYXRlZ29yeSk7ZXZlbnQuaW5pdEV2ZW50KGV2ZW50VHlwZSx0cnVlLHRydWUsd2luZG93LDAsMCwwLDAsMCxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSwwLGVsZW1lbnQpO2VsZW1lbnQuZGlzcGF0Y2hFdmVudChldmVudCk7fQplbHNlCnRocm93IG5ldyBFcnJvcigiVGhlIHN1cHBsaWVkIGVsZW1lbnQgZG9lc24ndCBzdXBwb3J0IGRpc3BhdGNoRXZlbnQiKTt9ZWxzZSBpZih1c2VDbGlja1dvcmthcm91bmQmJmVsZW1lbnQuY2xpY2spe2VsZW1lbnQuY2xpY2soKTt9ZWxzZSBpZih0eXBlb2YgZWxlbWVudC5maXJlRXZlbnQhPSJ1bmRlZmluZWQiKXtlbGVtZW50LmZpcmVFdmVudCgib24iK2V2ZW50VHlwZSk7fWVsc2V7dGhyb3cgbmV3IEVycm9yKCJCcm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCB0cmlnZ2VyaW5nIGV2ZW50cyIpO319LHVud3JhcE9ic2VydmFibGU6ZnVuY3Rpb24odmFsdWUpe3JldHVybiBrby5pc09ic2VydmFibGUodmFsdWUpP3ZhbHVlKCk6dmFsdWU7fSxwZWVrT2JzZXJ2YWJsZTpmdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGtvLmlzT2JzZXJ2YWJsZSh2YWx1ZSk/dmFsdWUucGVlaygpOnZhbHVlO30sdG9nZ2xlRG9tTm9kZUNzc0NsYXNzOnRvZ2dsZURvbU5vZGVDc3NDbGFzcyxzZXRUZXh0Q29udGVudDpmdW5jdGlvbihlbGVtZW50LHRleHRDb250ZW50KXt2YXIgdmFsdWU9a28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh0ZXh0Q29udGVudCk7aWYoKHZhbHVlPT09bnVsbCl8fCh2YWx1ZT09PXVuZGVmaW5lZCkpCnZhbHVlPSIiO3ZhciBpbm5lclRleHROb2RlPWtvLnZpcnR1YWxFbGVtZW50cy5maXJzdENoaWxkKGVsZW1lbnQpO2lmKCFpbm5lclRleHROb2RlfHxpbm5lclRleHROb2RlLm5vZGVUeXBlIT0zfHxrby52aXJ0dWFsRWxlbWVudHMubmV4dFNpYmxpbmcoaW5uZXJUZXh0Tm9kZSkpe2tvLnZpcnR1YWxFbGVtZW50cy5zZXREb21Ob2RlQ2hpbGRyZW4oZWxlbWVudCxbZWxlbWVudC5vd25lckRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHZhbHVlKV0pO31lbHNle2lubmVyVGV4dE5vZGUuZGF0YT12YWx1ZTt9CmtvLnV0aWxzLmZvcmNlUmVmcmVzaChlbGVtZW50KTt9LHNldEVsZW1lbnROYW1lOmZ1bmN0aW9uKGVsZW1lbnQsbmFtZSl7ZWxlbWVudC5uYW1lPW5hbWU7aWYoaWVWZXJzaW9uPD03KXt0cnl7dmFyIGVzY2FwZWROYW1lPWVsZW1lbnQubmFtZS5yZXBsYWNlKC9bJjw+JyJdL2csZnVuY3Rpb24ocil7cmV0dXJuIiYjIityLmNoYXJDb2RlQXQoMCkrIjsiO30pO2VsZW1lbnQubWVyZ2VBdHRyaWJ1dGVzKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIjxpbnB1dCBuYW1lPSciK2VzY2FwZWROYW1lKyInLz4iKSxmYWxzZSk7fQpjYXRjaChlKXt9fX0sZm9yY2VSZWZyZXNoOmZ1bmN0aW9uKG5vZGUpe2lmKGllVmVyc2lvbj49OSl7dmFyIGVsZW09bm9kZS5ub2RlVHlwZT09MT9ub2RlOm5vZGUucGFyZW50Tm9kZTtpZihlbGVtLnN0eWxlKQplbGVtLnN0eWxlLnpvb209ZWxlbS5zdHlsZS56b29tO319LGVuc3VyZVNlbGVjdEVsZW1lbnRJc1JlbmRlcmVkQ29ycmVjdGx5OmZ1bmN0aW9uKHNlbGVjdEVsZW1lbnQpe2lmKGllVmVyc2lvbil7dmFyIG9yaWdpbmFsV2lkdGg9c2VsZWN0RWxlbWVudC5zdHlsZS53aWR0aDtzZWxlY3RFbGVtZW50LnN0eWxlLndpZHRoPTA7c2VsZWN0RWxlbWVudC5zdHlsZS53aWR0aD1vcmlnaW5hbFdpZHRoO319LHJhbmdlOmZ1bmN0aW9uKG1pbixtYXgpe21pbj1rby51dGlscy51bndyYXBPYnNlcnZhYmxlKG1pbik7bWF4PWtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUobWF4KTt2YXIgcmVzdWx0PVtdO2Zvcih2YXIgaT1taW47aTw9bWF4O2krKykKcmVzdWx0LnB1c2goaSk7cmV0dXJuIHJlc3VsdDt9LG1ha2VBcnJheTpmdW5jdGlvbihhcnJheUxpa2VPYmplY3Qpe3ZhciByZXN1bHQ9W107Zm9yKHZhciBpPTAsaj1hcnJheUxpa2VPYmplY3QubGVuZ3RoO2k8ajtpKyspe3Jlc3VsdC5wdXNoKGFycmF5TGlrZU9iamVjdFtpXSk7fTtyZXR1cm4gcmVzdWx0O30sY3JlYXRlU3ltYm9sT3JTdHJpbmc6ZnVuY3Rpb24oaWRlbnRpZmllcil7cmV0dXJuIGNhblVzZVN5bWJvbHM/U3ltYm9sKGlkZW50aWZpZXIpOmlkZW50aWZpZXI7fSxpc0llNjppc0llNixpc0llNzppc0llNyxpZVZlcnNpb246aWVWZXJzaW9uLGdldEZvcm1GaWVsZHM6ZnVuY3Rpb24oZm9ybSxmaWVsZE5hbWUpe3ZhciBmaWVsZHM9a28udXRpbHMubWFrZUFycmF5KGZvcm0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoImlucHV0IikpLmNvbmNhdChrby51dGlscy5tYWtlQXJyYXkoZm9ybS5nZXRFbGVtZW50c0J5VGFnTmFtZSgidGV4dGFyZWEiKSkpO3ZhciBpc01hdGNoaW5nRmllbGQ9KHR5cGVvZiBmaWVsZE5hbWU9PSdzdHJpbmcnKT9mdW5jdGlvbihmaWVsZCl7cmV0dXJuIGZpZWxkLm5hbWU9PT1maWVsZE5hbWV9OmZ1bmN0aW9uKGZpZWxkKXtyZXR1cm4gZmllbGROYW1lLnRlc3QoZmllbGQubmFtZSl9O3ZhciBtYXRjaGVzPVtdO2Zvcih2YXIgaT1maWVsZHMubGVuZ3RoLTE7aT49MDtpLS0pe2lmKGlzTWF0Y2hpbmdGaWVsZChmaWVsZHNbaV0pKQptYXRjaGVzLnB1c2goZmllbGRzW2ldKTt9O3JldHVybiBtYXRjaGVzO30scGFyc2VKc29uOmZ1bmN0aW9uKGpzb25TdHJpbmcpe2lmKHR5cGVvZiBqc29uU3RyaW5nPT0ic3RyaW5nIil7anNvblN0cmluZz1rby51dGlscy5zdHJpbmdUcmltKGpzb25TdHJpbmcpO2lmKGpzb25TdHJpbmcpe2lmKEpTT04mJkpTT04ucGFyc2UpCnJldHVybiBKU09OLnBhcnNlKGpzb25TdHJpbmcpO3JldHVybihuZXcgRnVuY3Rpb24oInJldHVybiAiK2pzb25TdHJpbmcpKSgpO319CnJldHVybiBudWxsO30sc3RyaW5naWZ5SnNvbjpmdW5jdGlvbihkYXRhLHJlcGxhY2VyLHNwYWNlKXtpZighSlNPTnx8IUpTT04uc3RyaW5naWZ5KQp0aHJvdyBuZXcgRXJyb3IoIkNhbm5vdCBmaW5kIEpTT04uc3RyaW5naWZ5KCkuIFNvbWUgYnJvd3NlcnMgKGUuZy4sIElFIDwgOCkgZG9uJ3Qgc3VwcG9ydCBpdCBuYXRpdmVseSwgYnV0IHlvdSBjYW4gb3ZlcmNvbWUgdGhpcyBieSBhZGRpbmcgYSBzY3JpcHQgcmVmZXJlbmNlIHRvIGpzb24yLmpzLCBkb3dubG9hZGFibGUgZnJvbSBodHRwOi8vd3d3Lmpzb24ub3JnL2pzb24yLmpzIik7cmV0dXJuIEpTT04uc3RyaW5naWZ5KGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUoZGF0YSkscmVwbGFjZXIsc3BhY2UpO30scG9zdEpzb246ZnVuY3Rpb24odXJsT3JGb3JtLGRhdGEsb3B0aW9ucyl7b3B0aW9ucz1vcHRpb25zfHx7fTt2YXIgcGFyYW1zPW9wdGlvbnNbJ3BhcmFtcyddfHx7fTt2YXIgaW5jbHVkZUZpZWxkcz1vcHRpb25zWydpbmNsdWRlRmllbGRzJ118fHRoaXMuZmllbGRzSW5jbHVkZWRXaXRoSnNvblBvc3Q7dmFyIHVybD11cmxPckZvcm07aWYoKHR5cGVvZiB1cmxPckZvcm09PSdvYmplY3QnKSYmKGtvLnV0aWxzLnRhZ05hbWVMb3dlcih1cmxPckZvcm0pPT09ImZvcm0iKSl7dmFyIG9yaWdpbmFsRm9ybT11cmxPckZvcm07dXJsPW9yaWdpbmFsRm9ybS5hY3Rpb247Zm9yKHZhciBpPWluY2x1ZGVGaWVsZHMubGVuZ3RoLTE7aT49MDtpLS0pe3ZhciBmaWVsZHM9a28udXRpbHMuZ2V0Rm9ybUZpZWxkcyhvcmlnaW5hbEZvcm0saW5jbHVkZUZpZWxkc1tpXSk7Zm9yKHZhciBqPWZpZWxkcy5sZW5ndGgtMTtqPj0wO2otLSkKcGFyYW1zW2ZpZWxkc1tqXS5uYW1lXT1maWVsZHNbal0udmFsdWU7fX0KZGF0YT1rby51dGlscy51bndyYXBPYnNlcnZhYmxlKGRhdGEpO3ZhciBmb3JtPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImZvcm0iKTtmb3JtLnN0eWxlLmRpc3BsYXk9Im5vbmUiO2Zvcm0uYWN0aW9uPXVybDtmb3JtLm1ldGhvZD0icG9zdCI7Zm9yKHZhciBrZXkgaW4gZGF0YSl7dmFyIGlucHV0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImlucHV0Iik7aW5wdXQudHlwZT0iaGlkZGVuIjtpbnB1dC5uYW1lPWtleTtpbnB1dC52YWx1ZT1rby51dGlscy5zdHJpbmdpZnlKc29uKGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUoZGF0YVtrZXldKSk7Zm9ybS5hcHBlbmRDaGlsZChpbnB1dCk7fQpvYmplY3RGb3JFYWNoKHBhcmFtcyxmdW5jdGlvbihrZXksdmFsdWUpe3ZhciBpbnB1dD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJpbnB1dCIpO2lucHV0LnR5cGU9ImhpZGRlbiI7aW5wdXQubmFtZT1rZXk7aW5wdXQudmFsdWU9dmFsdWU7Zm9ybS5hcHBlbmRDaGlsZChpbnB1dCk7fSk7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmb3JtKTtvcHRpb25zWydzdWJtaXR0ZXInXT9vcHRpb25zWydzdWJtaXR0ZXInXShmb3JtKTpmb3JtLnN1Ym1pdCgpO3NldFRpbWVvdXQoZnVuY3Rpb24oKXtmb3JtLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZm9ybSk7fSwwKTt9fX0oKSk7a28uZXhwb3J0U3ltYm9sKCd1dGlscycsa28udXRpbHMpO2tvLmV4cG9ydFN5bWJvbCgndXRpbHMuYXJyYXlGb3JFYWNoJyxrby51dGlscy5hcnJheUZvckVhY2gpO2tvLmV4cG9ydFN5bWJvbCgndXRpbHMuYXJyYXlGaXJzdCcsa28udXRpbHMuYXJyYXlGaXJzdCk7a28uZXhwb3J0U3ltYm9sKCd1dGlscy5hcnJheUZpbHRlcicsa28udXRpbHMuYXJyYXlGaWx0ZXIpO2tvLmV4cG9ydFN5bWJvbCgndXRpbHMuYXJyYXlHZXREaXN0aW5jdFZhbHVlcycsa28udXRpbHMuYXJyYXlHZXREaXN0aW5jdFZhbHVlcyk7a28uZXhwb3J0U3ltYm9sKCd1dGlscy5hcnJheUluZGV4T2YnLGtvLnV0aWxzLmFycmF5SW5kZXhPZik7a28uZXhwb3J0U3ltYm9sKCd1dGlscy5hcnJheU1hcCcsa28udXRpbHMuYXJyYXlNYXApO2tvLmV4cG9ydFN5bWJvbCgndXRpbHMuYXJyYXlQdXNoQWxsJyxrby51dGlscy5hcnJheVB1c2hBbGwpO2tvLmV4cG9ydFN5bWJvbCgndXRpbHMuYXJyYXlSZW1vdmVJdGVtJyxrby51dGlscy5hcnJheVJlbW92ZUl0ZW0pO2tvLmV4cG9ydFN5bWJvbCgndXRpbHMuY2xvbmVOb2Rlcycsa28udXRpbHMuY2xvbmVOb2Rlcyk7a28uZXhwb3J0U3ltYm9sKCd1dGlscy5jcmVhdGVTeW1ib2xPclN0cmluZycsa28udXRpbHMuY3JlYXRlU3ltYm9sT3JTdHJpbmcpO2tvLmV4cG9ydFN5bWJvbCgndXRpbHMuZXh0ZW5kJyxrby51dGlscy5leHRlbmQpO2tvLmV4cG9ydFN5bWJvbCgndXRpbHMuZmllbGRzSW5jbHVkZWRXaXRoSnNvblBvc3QnLGtvLnV0aWxzLmZpZWxkc0luY2x1ZGVkV2l0aEpzb25Qb3N0KTtrby5leHBvcnRTeW1ib2woJ3V0aWxzLmdldEZvcm1GaWVsZHMnLGtvLnV0aWxzLmdldEZvcm1GaWVsZHMpO2tvLmV4cG9ydFN5bWJvbCgndXRpbHMub2JqZWN0TWFwJyxrby51dGlscy5vYmplY3RNYXApO2tvLmV4cG9ydFN5bWJvbCgndXRpbHMucGVla09ic2VydmFibGUnLGtvLnV0aWxzLnBlZWtPYnNlcnZhYmxlKTtrby5leHBvcnRTeW1ib2woJ3V0aWxzLnBvc3RKc29uJyxrby51dGlscy5wb3N0SnNvbik7a28uZXhwb3J0U3ltYm9sKCd1dGlscy5wYXJzZUpzb24nLGtvLnV0aWxzLnBhcnNlSnNvbik7a28uZXhwb3J0U3ltYm9sKCd1dGlscy5yZWdpc3RlckV2ZW50SGFuZGxlcicsa28udXRpbHMucmVnaXN0ZXJFdmVudEhhbmRsZXIpO2tvLmV4cG9ydFN5bWJvbCgndXRpbHMuc3RyaW5naWZ5SnNvbicsa28udXRpbHMuc3RyaW5naWZ5SnNvbik7a28uZXhwb3J0U3ltYm9sKCd1dGlscy5yYW5nZScsa28udXRpbHMucmFuZ2UpO2tvLmV4cG9ydFN5bWJvbCgndXRpbHMudG9nZ2xlRG9tTm9kZUNzc0NsYXNzJyxrby51dGlscy50b2dnbGVEb21Ob2RlQ3NzQ2xhc3MpO2tvLmV4cG9ydFN5bWJvbCgndXRpbHMudHJpZ2dlckV2ZW50Jyxrby51dGlscy50cmlnZ2VyRXZlbnQpO2tvLmV4cG9ydFN5bWJvbCgndXRpbHMudW53cmFwT2JzZXJ2YWJsZScsa28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSk7a28uZXhwb3J0U3ltYm9sKCd1dGlscy5vYmplY3RGb3JFYWNoJyxrby51dGlscy5vYmplY3RGb3JFYWNoKTtrby5leHBvcnRTeW1ib2woJ3V0aWxzLmFkZE9yUmVtb3ZlSXRlbScsa28udXRpbHMuYWRkT3JSZW1vdmVJdGVtKTtrby5leHBvcnRTeW1ib2woJ3V0aWxzLnNldFRleHRDb250ZW50Jyxrby51dGlscy5zZXRUZXh0Q29udGVudCk7a28uZXhwb3J0U3ltYm9sKCd1bndyYXAnLGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUpO2lmKCFGdW5jdGlvbi5wcm90b3R5cGVbJ2JpbmQnXSl7RnVuY3Rpb24ucHJvdG90eXBlWydiaW5kJ109ZnVuY3Rpb24ob2JqZWN0KXt2YXIgb3JpZ2luYWxGdW5jdGlvbj10aGlzO2lmKGFyZ3VtZW50cy5sZW5ndGg9PT0xKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gb3JpZ2luYWxGdW5jdGlvbi5hcHBseShvYmplY3QsYXJndW1lbnRzKTt9O31lbHNle3ZhciBwYXJ0aWFsQXJncz1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGFyZ3M9cGFydGlhbEFyZ3Muc2xpY2UoMCk7YXJncy5wdXNoLmFwcGx5KGFyZ3MsYXJndW1lbnRzKTtyZXR1cm4gb3JpZ2luYWxGdW5jdGlvbi5hcHBseShvYmplY3QsYXJncyk7fTt9fTt9CmtvLnV0aWxzLmRvbURhdGE9bmV3KGZ1bmN0aW9uKCl7dmFyIHVuaXF1ZUlkPTA7dmFyIGRhdGFTdG9yZUtleUV4cGFuZG9Qcm9wZXJ0eU5hbWU9Il9fa29fXyIrKG5ldyBEYXRlKS5nZXRUaW1lKCk7dmFyIGRhdGFTdG9yZT17fTt2YXIgZ2V0RGF0YUZvck5vZGUsY2xlYXI7aWYoIWtvLnV0aWxzLmllVmVyc2lvbil7Z2V0RGF0YUZvck5vZGU9ZnVuY3Rpb24obm9kZSxjcmVhdGVJZk5vdEZvdW5kKXt2YXIgZGF0YUZvck5vZGU9bm9kZVtkYXRhU3RvcmVLZXlFeHBhbmRvUHJvcGVydHlOYW1lXTtpZighZGF0YUZvck5vZGUmJmNyZWF0ZUlmTm90Rm91bmQpe2RhdGFGb3JOb2RlPW5vZGVbZGF0YVN0b3JlS2V5RXhwYW5kb1Byb3BlcnR5TmFtZV09e307fQpyZXR1cm4gZGF0YUZvck5vZGU7fTtjbGVhcj1mdW5jdGlvbihub2RlKXtpZihub2RlW2RhdGFTdG9yZUtleUV4cGFuZG9Qcm9wZXJ0eU5hbWVdKXtkZWxldGUgbm9kZVtkYXRhU3RvcmVLZXlFeHBhbmRvUHJvcGVydHlOYW1lXTtyZXR1cm4gdHJ1ZTt9CnJldHVybiBmYWxzZTt9O31lbHNle2dldERhdGFGb3JOb2RlPWZ1bmN0aW9uKG5vZGUsY3JlYXRlSWZOb3RGb3VuZCl7dmFyIGRhdGFTdG9yZUtleT1ub2RlW2RhdGFTdG9yZUtleUV4cGFuZG9Qcm9wZXJ0eU5hbWVdO3ZhciBoYXNFeGlzdGluZ0RhdGFTdG9yZT1kYXRhU3RvcmVLZXkmJihkYXRhU3RvcmVLZXkhPT0ibnVsbCIpJiZkYXRhU3RvcmVbZGF0YVN0b3JlS2V5XTtpZighaGFzRXhpc3RpbmdEYXRhU3RvcmUpe2lmKCFjcmVhdGVJZk5vdEZvdW5kKQpyZXR1cm4gdW5kZWZpbmVkO2RhdGFTdG9yZUtleT1ub2RlW2RhdGFTdG9yZUtleUV4cGFuZG9Qcm9wZXJ0eU5hbWVdPSJrbyIrdW5pcXVlSWQrKztkYXRhU3RvcmVbZGF0YVN0b3JlS2V5XT17fTt9CnJldHVybiBkYXRhU3RvcmVbZGF0YVN0b3JlS2V5XTt9O2NsZWFyPWZ1bmN0aW9uKG5vZGUpe3ZhciBkYXRhU3RvcmVLZXk9bm9kZVtkYXRhU3RvcmVLZXlFeHBhbmRvUHJvcGVydHlOYW1lXTtpZihkYXRhU3RvcmVLZXkpe2RlbGV0ZSBkYXRhU3RvcmVbZGF0YVN0b3JlS2V5XTtub2RlW2RhdGFTdG9yZUtleUV4cGFuZG9Qcm9wZXJ0eU5hbWVdPW51bGw7cmV0dXJuIHRydWU7fQpyZXR1cm4gZmFsc2U7fTt9CnJldHVybntnZXQ6ZnVuY3Rpb24obm9kZSxrZXkpe3ZhciBkYXRhRm9yTm9kZT1nZXREYXRhRm9yTm9kZShub2RlLGZhbHNlKTtyZXR1cm4gZGF0YUZvck5vZGUmJmRhdGFGb3JOb2RlW2tleV07fSxzZXQ6ZnVuY3Rpb24obm9kZSxrZXksdmFsdWUpe3ZhciBkYXRhRm9yTm9kZT1nZXREYXRhRm9yTm9kZShub2RlLHZhbHVlIT09dW5kZWZpbmVkKTtkYXRhRm9yTm9kZSYmKGRhdGFGb3JOb2RlW2tleV09dmFsdWUpO30sZ2V0T3JTZXQ6ZnVuY3Rpb24obm9kZSxrZXksdmFsdWUpe3ZhciBkYXRhRm9yTm9kZT1nZXREYXRhRm9yTm9kZShub2RlLHRydWUpO3JldHVybiBkYXRhRm9yTm9kZVtrZXldfHwoZGF0YUZvck5vZGVba2V5XT12YWx1ZSk7fSxjbGVhcjpjbGVhcixuZXh0S2V5OmZ1bmN0aW9uKCl7cmV0dXJuKHVuaXF1ZUlkKyspK2RhdGFTdG9yZUtleUV4cGFuZG9Qcm9wZXJ0eU5hbWU7fX07fSkoKTtrby5leHBvcnRTeW1ib2woJ3V0aWxzLmRvbURhdGEnLGtvLnV0aWxzLmRvbURhdGEpO2tvLmV4cG9ydFN5bWJvbCgndXRpbHMuZG9tRGF0YS5jbGVhcicsa28udXRpbHMuZG9tRGF0YS5jbGVhcik7a28udXRpbHMuZG9tTm9kZURpc3Bvc2FsPW5ldyhmdW5jdGlvbigpe3ZhciBkb21EYXRhS2V5PWtvLnV0aWxzLmRvbURhdGEubmV4dEtleSgpO3ZhciBjbGVhbmFibGVOb2RlVHlwZXM9ezE6dHJ1ZSw4OnRydWUsOTp0cnVlfTt2YXIgY2xlYW5hYmxlTm9kZVR5cGVzV2l0aERlc2NlbmRhbnRzPXsxOnRydWUsOTp0cnVlfTtmdW5jdGlvbiBnZXREaXNwb3NlQ2FsbGJhY2tzQ29sbGVjdGlvbihub2RlLGNyZWF0ZUlmTm90Rm91bmQpe3ZhciBhbGxEaXNwb3NlQ2FsbGJhY2tzPWtvLnV0aWxzLmRvbURhdGEuZ2V0KG5vZGUsZG9tRGF0YUtleSk7aWYoKGFsbERpc3Bvc2VDYWxsYmFja3M9PT11bmRlZmluZWQpJiZjcmVhdGVJZk5vdEZvdW5kKXthbGxEaXNwb3NlQ2FsbGJhY2tzPVtdO2tvLnV0aWxzLmRvbURhdGEuc2V0KG5vZGUsZG9tRGF0YUtleSxhbGxEaXNwb3NlQ2FsbGJhY2tzKTt9CnJldHVybiBhbGxEaXNwb3NlQ2FsbGJhY2tzO30KZnVuY3Rpb24gZGVzdHJveUNhbGxiYWNrc0NvbGxlY3Rpb24obm9kZSl7a28udXRpbHMuZG9tRGF0YS5zZXQobm9kZSxkb21EYXRhS2V5LHVuZGVmaW5lZCk7fQpmdW5jdGlvbiBjbGVhblNpbmdsZU5vZGUobm9kZSl7dmFyIGNhbGxiYWNrcz1nZXREaXNwb3NlQ2FsbGJhY2tzQ29sbGVjdGlvbihub2RlLGZhbHNlKTtpZihjYWxsYmFja3Mpe2NhbGxiYWNrcz1jYWxsYmFja3Muc2xpY2UoMCk7Zm9yKHZhciBpPTA7aTxjYWxsYmFja3MubGVuZ3RoO2krKykKY2FsbGJhY2tzW2ldKG5vZGUpO30Ka28udXRpbHMuZG9tRGF0YS5jbGVhcihub2RlKTtrby51dGlscy5kb21Ob2RlRGlzcG9zYWxbImNsZWFuRXh0ZXJuYWxEYXRhIl0obm9kZSk7aWYoY2xlYW5hYmxlTm9kZVR5cGVzV2l0aERlc2NlbmRhbnRzW25vZGUubm9kZVR5cGVdKXtjbGVhbk5vZGVzSW5MaXN0KG5vZGUuY2hpbGROb2Rlcyx0cnVlKTt9fQpmdW5jdGlvbiBjbGVhbk5vZGVzSW5MaXN0KG5vZGVMaXN0LG9ubHlDb21tZW50cyl7dmFyIGNsZWFuZWROb2Rlcz1bXSxsYXN0Q2xlYW5lZE5vZGU7Zm9yKHZhciBpPTA7aTxub2RlTGlzdC5sZW5ndGg7aSsrKXtpZighb25seUNvbW1lbnRzfHxub2RlTGlzdFtpXS5ub2RlVHlwZT09PTgpe2NsZWFuU2luZ2xlTm9kZShjbGVhbmVkTm9kZXNbY2xlYW5lZE5vZGVzLmxlbmd0aF09bGFzdENsZWFuZWROb2RlPW5vZGVMaXN0W2ldKTtpZihub2RlTGlzdFtpXSE9PWxhc3RDbGVhbmVkTm9kZSl7d2hpbGUoaS0tJiZrby51dGlscy5hcnJheUluZGV4T2YoY2xlYW5lZE5vZGVzLG5vZGVMaXN0W2ldKT09LTEpe319fX19CnJldHVybnthZGREaXNwb3NlQ2FsbGJhY2s6ZnVuY3Rpb24obm9kZSxjYWxsYmFjayl7aWYodHlwZW9mIGNhbGxiYWNrIT0iZnVuY3Rpb24iKQp0aHJvdyBuZXcgRXJyb3IoIkNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbiIpO2dldERpc3Bvc2VDYWxsYmFja3NDb2xsZWN0aW9uKG5vZGUsdHJ1ZSkucHVzaChjYWxsYmFjayk7fSxyZW1vdmVEaXNwb3NlQ2FsbGJhY2s6ZnVuY3Rpb24obm9kZSxjYWxsYmFjayl7dmFyIGNhbGxiYWNrc0NvbGxlY3Rpb249Z2V0RGlzcG9zZUNhbGxiYWNrc0NvbGxlY3Rpb24obm9kZSxmYWxzZSk7aWYoY2FsbGJhY2tzQ29sbGVjdGlvbil7a28udXRpbHMuYXJyYXlSZW1vdmVJdGVtKGNhbGxiYWNrc0NvbGxlY3Rpb24sY2FsbGJhY2spO2lmKGNhbGxiYWNrc0NvbGxlY3Rpb24ubGVuZ3RoPT0wKQpkZXN0cm95Q2FsbGJhY2tzQ29sbGVjdGlvbihub2RlKTt9fSxjbGVhbk5vZGU6ZnVuY3Rpb24obm9kZSl7a28uZGVwZW5kZW5jeURldGVjdGlvbi5pZ25vcmUoZnVuY3Rpb24oKXtpZihjbGVhbmFibGVOb2RlVHlwZXNbbm9kZS5ub2RlVHlwZV0pe2NsZWFuU2luZ2xlTm9kZShub2RlKTtpZihjbGVhbmFibGVOb2RlVHlwZXNXaXRoRGVzY2VuZGFudHNbbm9kZS5ub2RlVHlwZV0pe2NsZWFuTm9kZXNJbkxpc3Qobm9kZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgiKiIpKTt9fX0pO3JldHVybiBub2RlO30scmVtb3ZlTm9kZTpmdW5jdGlvbihub2RlKXtrby5jbGVhbk5vZGUobm9kZSk7aWYobm9kZS5wYXJlbnROb2RlKQpub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7fSwiY2xlYW5FeHRlcm5hbERhdGEiOmZ1bmN0aW9uKG5vZGUpe2lmKGpRdWVyeUluc3RhbmNlJiYodHlwZW9mIGpRdWVyeUluc3RhbmNlWydjbGVhbkRhdGEnXT09ImZ1bmN0aW9uIikpCmpRdWVyeUluc3RhbmNlWydjbGVhbkRhdGEnXShbbm9kZV0pO319O30pKCk7a28uY2xlYW5Ob2RlPWtvLnV0aWxzLmRvbU5vZGVEaXNwb3NhbC5jbGVhbk5vZGU7a28ucmVtb3ZlTm9kZT1rby51dGlscy5kb21Ob2RlRGlzcG9zYWwucmVtb3ZlTm9kZTtrby5leHBvcnRTeW1ib2woJ2NsZWFuTm9kZScsa28uY2xlYW5Ob2RlKTtrby5leHBvcnRTeW1ib2woJ3JlbW92ZU5vZGUnLGtvLnJlbW92ZU5vZGUpO2tvLmV4cG9ydFN5bWJvbCgndXRpbHMuZG9tTm9kZURpc3Bvc2FsJyxrby51dGlscy5kb21Ob2RlRGlzcG9zYWwpO2tvLmV4cG9ydFN5bWJvbCgndXRpbHMuZG9tTm9kZURpc3Bvc2FsLmFkZERpc3Bvc2VDYWxsYmFjaycsa28udXRpbHMuZG9tTm9kZURpc3Bvc2FsLmFkZERpc3Bvc2VDYWxsYmFjayk7a28uZXhwb3J0U3ltYm9sKCd1dGlscy5kb21Ob2RlRGlzcG9zYWwucmVtb3ZlRGlzcG9zZUNhbGxiYWNrJyxrby51dGlscy5kb21Ob2RlRGlzcG9zYWwucmVtb3ZlRGlzcG9zZUNhbGxiYWNrKTsoZnVuY3Rpb24oKXt2YXIgbm9uZT1bMCwiIiwiIl0sdGFibGU9WzEsIjx0YWJsZT4iLCI8L3RhYmxlPiJdLHRib2R5PVsyLCI8dGFibGU+PHRib2R5PiIsIjwvdGJvZHk+PC90YWJsZT4iXSx0cj1bMywiPHRhYmxlPjx0Ym9keT48dHI+IiwiPC90cj48L3Rib2R5PjwvdGFibGU+Il0sc2VsZWN0PVsxLCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+IiwiPC9zZWxlY3Q+Il0sbG9va3VwPXsndGhlYWQnOnRhYmxlLCd0Ym9keSc6dGFibGUsJ3Rmb290Jzp0YWJsZSwndHInOnRib2R5LCd0ZCc6dHIsJ3RoJzp0ciwnb3B0aW9uJzpzZWxlY3QsJ29wdGdyb3VwJzpzZWxlY3R9LG1heVJlcXVpcmVDcmVhdGVFbGVtZW50SGFjaz1rby51dGlscy5pZVZlcnNpb248PTg7ZnVuY3Rpb24gZ2V0V3JhcCh0YWdzKXt2YXIgbT10YWdzLm1hdGNoKC9eKD86PCEtLS4qPy0tPlxzKj8pKj88KFthLXpdKylbXHM+XS8pO3JldHVybihtJiZsb29rdXBbbVsxXV0pfHxub25lO30KZnVuY3Rpb24gc2ltcGxlSHRtbFBhcnNlKGh0bWwsZG9jdW1lbnRDb250ZXh0KXtkb2N1bWVudENvbnRleHR8fChkb2N1bWVudENvbnRleHQ9ZG9jdW1lbnQpO3ZhciB3aW5kb3dDb250ZXh0PWRvY3VtZW50Q29udGV4dFsncGFyZW50V2luZG93J118fGRvY3VtZW50Q29udGV4dFsnZGVmYXVsdFZpZXcnXXx8d2luZG93O3ZhciB0YWdzPWtvLnV0aWxzLnN0cmluZ1RyaW0oaHRtbCkudG9Mb3dlckNhc2UoKSxkaXY9ZG9jdW1lbnRDb250ZXh0LmNyZWF0ZUVsZW1lbnQoImRpdiIpLHdyYXA9Z2V0V3JhcCh0YWdzKSxkZXB0aD13cmFwWzBdO3ZhciBtYXJrdXA9Imlnbm9yZWQ8ZGl2PiIrd3JhcFsxXStodG1sK3dyYXBbMl0rIjwvZGl2PiI7aWYodHlwZW9mIHdpbmRvd0NvbnRleHRbJ2lubmVyU2hpdiddPT0iZnVuY3Rpb24iKXtkaXYuYXBwZW5kQ2hpbGQod2luZG93Q29udGV4dFsnaW5uZXJTaGl2J10obWFya3VwKSk7fWVsc2V7aWYobWF5UmVxdWlyZUNyZWF0ZUVsZW1lbnRIYWNrKXtkb2N1bWVudENvbnRleHQuYm9keS5hcHBlbmRDaGlsZChkaXYpO30KZGl2LmlubmVySFRNTD1tYXJrdXA7aWYobWF5UmVxdWlyZUNyZWF0ZUVsZW1lbnRIYWNrKXtkaXYucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChkaXYpO319CndoaWxlKGRlcHRoLS0pCmRpdj1kaXYubGFzdENoaWxkO3JldHVybiBrby51dGlscy5tYWtlQXJyYXkoZGl2Lmxhc3RDaGlsZC5jaGlsZE5vZGVzKTt9CmZ1bmN0aW9uIGpRdWVyeUh0bWxQYXJzZShodG1sLGRvY3VtZW50Q29udGV4dCl7aWYoalF1ZXJ5SW5zdGFuY2VbJ3BhcnNlSFRNTCddKXtyZXR1cm4galF1ZXJ5SW5zdGFuY2VbJ3BhcnNlSFRNTCddKGh0bWwsZG9jdW1lbnRDb250ZXh0KXx8W107fWVsc2V7dmFyIGVsZW1zPWpRdWVyeUluc3RhbmNlWydjbGVhbiddKFtodG1sXSxkb2N1bWVudENvbnRleHQpO2lmKGVsZW1zJiZlbGVtc1swXSl7dmFyIGVsZW09ZWxlbXNbMF07d2hpbGUoZWxlbS5wYXJlbnROb2RlJiZlbGVtLnBhcmVudE5vZGUubm9kZVR5cGUhPT0xMSkKZWxlbT1lbGVtLnBhcmVudE5vZGU7aWYoZWxlbS5wYXJlbnROb2RlKQplbGVtLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWxlbSk7fQpyZXR1cm4gZWxlbXM7fX0Ka28udXRpbHMucGFyc2VIdG1sRnJhZ21lbnQ9ZnVuY3Rpb24oaHRtbCxkb2N1bWVudENvbnRleHQpe3JldHVybiBqUXVlcnlJbnN0YW5jZT9qUXVlcnlIdG1sUGFyc2UoaHRtbCxkb2N1bWVudENvbnRleHQpOnNpbXBsZUh0bWxQYXJzZShodG1sLGRvY3VtZW50Q29udGV4dCk7fTtrby51dGlscy5wYXJzZUh0bWxGb3JUZW1wbGF0ZU5vZGVzPWZ1bmN0aW9uKGh0bWwsZG9jdW1lbnRDb250ZXh0KXt2YXIgbm9kZXM9a28udXRpbHMucGFyc2VIdG1sRnJhZ21lbnQoaHRtbCxkb2N1bWVudENvbnRleHQpO3JldHVybihub2Rlcy5sZW5ndGgmJm5vZGVzWzBdLnBhcmVudEVsZW1lbnQpfHxrby51dGlscy5tb3ZlQ2xlYW5lZE5vZGVzVG9Db250YWluZXJFbGVtZW50KG5vZGVzKTt9O2tvLnV0aWxzLnNldEh0bWw9ZnVuY3Rpb24obm9kZSxodG1sKXtrby51dGlscy5lbXB0eURvbU5vZGUobm9kZSk7aHRtbD1rby51dGlscy51bndyYXBPYnNlcnZhYmxlKGh0bWwpO2lmKChodG1sIT09bnVsbCkmJihodG1sIT09dW5kZWZpbmVkKSl7aWYodHlwZW9mIGh0bWwhPSdzdHJpbmcnKQpodG1sPWh0bWwudG9TdHJpbmcoKTtpZihqUXVlcnlJbnN0YW5jZSl7alF1ZXJ5SW5zdGFuY2Uobm9kZSlbJ2h0bWwnXShodG1sKTt9ZWxzZXt2YXIgcGFyc2VkTm9kZXM9a28udXRpbHMucGFyc2VIdG1sRnJhZ21lbnQoaHRtbCxub2RlLm93bmVyRG9jdW1lbnQpO2Zvcih2YXIgaT0wO2k8cGFyc2VkTm9kZXMubGVuZ3RoO2krKykKbm9kZS5hcHBlbmRDaGlsZChwYXJzZWROb2Rlc1tpXSk7fX19O30pKCk7a28uZXhwb3J0U3ltYm9sKCd1dGlscy5wYXJzZUh0bWxGcmFnbWVudCcsa28udXRpbHMucGFyc2VIdG1sRnJhZ21lbnQpO2tvLmV4cG9ydFN5bWJvbCgndXRpbHMuc2V0SHRtbCcsa28udXRpbHMuc2V0SHRtbCk7a28ubWVtb2l6YXRpb249KGZ1bmN0aW9uKCl7dmFyIG1lbW9zPXt9O2Z1bmN0aW9uIHJhbmRvbU1heDhIZXhDaGFycygpe3JldHVybigoKDErTWF0aC5yYW5kb20oKSkqMHgxMDAwMDAwMDApfDApLnRvU3RyaW5nKDE2KS5zdWJzdHJpbmcoMSk7fQpmdW5jdGlvbiBnZW5lcmF0ZVJhbmRvbUlkKCl7cmV0dXJuIHJhbmRvbU1heDhIZXhDaGFycygpK3JhbmRvbU1heDhIZXhDaGFycygpO30KZnVuY3Rpb24gZmluZE1lbW9Ob2Rlcyhyb290Tm9kZSxhcHBlbmRUb0FycmF5KXtpZighcm9vdE5vZGUpCnJldHVybjtpZihyb290Tm9kZS5ub2RlVHlwZT09OCl7dmFyIG1lbW9JZD1rby5tZW1vaXphdGlvbi5wYXJzZU1lbW9UZXh0KHJvb3ROb2RlLm5vZGVWYWx1ZSk7aWYobWVtb0lkIT1udWxsKQphcHBlbmRUb0FycmF5LnB1c2goe2RvbU5vZGU6cm9vdE5vZGUsbWVtb0lkOm1lbW9JZH0pO31lbHNlIGlmKHJvb3ROb2RlLm5vZGVUeXBlPT0xKXtmb3IodmFyIGk9MCxjaGlsZE5vZGVzPXJvb3ROb2RlLmNoaWxkTm9kZXMsaj1jaGlsZE5vZGVzLmxlbmd0aDtpPGo7aSsrKQpmaW5kTWVtb05vZGVzKGNoaWxkTm9kZXNbaV0sYXBwZW5kVG9BcnJheSk7fX0KcmV0dXJue21lbW9pemU6ZnVuY3Rpb24oY2FsbGJhY2spe2lmKHR5cGVvZiBjYWxsYmFjayE9ImZ1bmN0aW9uIikKdGhyb3cgbmV3IEVycm9yKCJZb3UgY2FuIG9ubHkgcGFzcyBhIGZ1bmN0aW9uIHRvIGtvLm1lbW9pemF0aW9uLm1lbW9pemUoKSIpO3ZhciBtZW1vSWQ9Z2VuZXJhdGVSYW5kb21JZCgpO21lbW9zW21lbW9JZF09Y2FsbGJhY2s7cmV0dXJuIjwhLS1ba29fbWVtbzoiK21lbW9JZCsiXS0tPiI7fSx1bm1lbW9pemU6ZnVuY3Rpb24obWVtb0lkLGNhbGxiYWNrUGFyYW1zKXt2YXIgY2FsbGJhY2s9bWVtb3NbbWVtb0lkXTtpZihjYWxsYmFjaz09PXVuZGVmaW5lZCkKdGhyb3cgbmV3IEVycm9yKCJDb3VsZG4ndCBmaW5kIGFueSBtZW1vIHdpdGggSUQgIittZW1vSWQrIi4gUGVyaGFwcyBpdCdzIGFscmVhZHkgYmVlbiB1bm1lbW9pemVkLiIpO3RyeXtjYWxsYmFjay5hcHBseShudWxsLGNhbGxiYWNrUGFyYW1zfHxbXSk7cmV0dXJuIHRydWU7fQpmaW5hbGx5e2RlbGV0ZSBtZW1vc1ttZW1vSWRdO319LHVubWVtb2l6ZURvbU5vZGVBbmREZXNjZW5kYW50czpmdW5jdGlvbihkb21Ob2RlLGV4dHJhQ2FsbGJhY2tQYXJhbXNBcnJheSl7dmFyIG1lbW9zPVtdO2ZpbmRNZW1vTm9kZXMoZG9tTm9kZSxtZW1vcyk7Zm9yKHZhciBpPTAsaj1tZW1vcy5sZW5ndGg7aTxqO2krKyl7dmFyIG5vZGU9bWVtb3NbaV0uZG9tTm9kZTt2YXIgY29tYmluZWRQYXJhbXM9W25vZGVdO2lmKGV4dHJhQ2FsbGJhY2tQYXJhbXNBcnJheSkKa28udXRpbHMuYXJyYXlQdXNoQWxsKGNvbWJpbmVkUGFyYW1zLGV4dHJhQ2FsbGJhY2tQYXJhbXNBcnJheSk7a28ubWVtb2l6YXRpb24udW5tZW1vaXplKG1lbW9zW2ldLm1lbW9JZCxjb21iaW5lZFBhcmFtcyk7bm9kZS5ub2RlVmFsdWU9IiI7aWYobm9kZS5wYXJlbnROb2RlKQpub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7fX0scGFyc2VNZW1vVGV4dDpmdW5jdGlvbihtZW1vVGV4dCl7dmFyIG1hdGNoPW1lbW9UZXh0Lm1hdGNoKC9eXFtrb19tZW1vXDooLio/KVxdJC8pO3JldHVybiBtYXRjaD9tYXRjaFsxXTpudWxsO319O30pKCk7a28uZXhwb3J0U3ltYm9sKCdtZW1vaXphdGlvbicsa28ubWVtb2l6YXRpb24pO2tvLmV4cG9ydFN5bWJvbCgnbWVtb2l6YXRpb24ubWVtb2l6ZScsa28ubWVtb2l6YXRpb24ubWVtb2l6ZSk7a28uZXhwb3J0U3ltYm9sKCdtZW1vaXphdGlvbi51bm1lbW9pemUnLGtvLm1lbW9pemF0aW9uLnVubWVtb2l6ZSk7a28uZXhwb3J0U3ltYm9sKCdtZW1vaXphdGlvbi5wYXJzZU1lbW9UZXh0Jyxrby5tZW1vaXphdGlvbi5wYXJzZU1lbW9UZXh0KTtrby5leHBvcnRTeW1ib2woJ21lbW9pemF0aW9uLnVubWVtb2l6ZURvbU5vZGVBbmREZXNjZW5kYW50cycsa28ubWVtb2l6YXRpb24udW5tZW1vaXplRG9tTm9kZUFuZERlc2NlbmRhbnRzKTtrby50YXNrcz0oZnVuY3Rpb24oKXt2YXIgc2NoZWR1bGVyLHRhc2tRdWV1ZT1bXSx0YXNrUXVldWVMZW5ndGg9MCxuZXh0SGFuZGxlPTEsbmV4dEluZGV4VG9Qcm9jZXNzPTA7aWYod2luZG93WydNdXRhdGlvbk9ic2VydmVyJ10pe3NjaGVkdWxlcj0oZnVuY3Rpb24oY2FsbGJhY2spe3ZhciBkaXY9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7bmV3IE11dGF0aW9uT2JzZXJ2ZXIoY2FsbGJhY2spLm9ic2VydmUoZGl2LHthdHRyaWJ1dGVzOnRydWV9KTtyZXR1cm4gZnVuY3Rpb24oKXtkaXYuY2xhc3NMaXN0LnRvZ2dsZSgiZm9vIik7fTt9KShzY2hlZHVsZWRQcm9jZXNzKTt9ZWxzZSBpZihkb2N1bWVudCYmIm9ucmVhZHlzdGF0ZWNoYW5nZSJpbiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKSl7c2NoZWR1bGVyPWZ1bmN0aW9uKGNhbGxiYWNrKXt2YXIgc2NyaXB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNjcmlwdCIpO3NjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKXtzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlPW51bGw7ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKHNjcmlwdCk7c2NyaXB0PW51bGw7Y2FsbGJhY2soKTt9O2RvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZChzY3JpcHQpO307fWVsc2V7c2NoZWR1bGVyPWZ1bmN0aW9uKGNhbGxiYWNrKXtzZXRUaW1lb3V0KGNhbGxiYWNrLDApO307fQpmdW5jdGlvbiBwcm9jZXNzVGFza3MoKXtpZih0YXNrUXVldWVMZW5ndGgpe3ZhciBtYXJrPXRhc2tRdWV1ZUxlbmd0aCxjb3VudE1hcmtzPTA7Zm9yKHZhciB0YXNrO25leHRJbmRleFRvUHJvY2Vzczx0YXNrUXVldWVMZW5ndGg7KXtpZih0YXNrPXRhc2tRdWV1ZVtuZXh0SW5kZXhUb1Byb2Nlc3MrK10pe2lmKG5leHRJbmRleFRvUHJvY2Vzcz5tYXJrKXtpZigrK2NvdW50TWFya3M+PTUwMDApe25leHRJbmRleFRvUHJvY2Vzcz10YXNrUXVldWVMZW5ndGg7a28udXRpbHMuZGVmZXJFcnJvcihFcnJvcigiJ1RvbyBtdWNoIHJlY3Vyc2lvbicgYWZ0ZXIgcHJvY2Vzc2luZyAiK2NvdW50TWFya3MrIiB0YXNrIGdyb3Vwcy4iKSk7YnJlYWs7fQptYXJrPXRhc2tRdWV1ZUxlbmd0aDt9CnRyeXt0YXNrKCk7fWNhdGNoKGV4KXtrby51dGlscy5kZWZlckVycm9yKGV4KTt9fX19fQpmdW5jdGlvbiBzY2hlZHVsZWRQcm9jZXNzKCl7cHJvY2Vzc1Rhc2tzKCk7bmV4dEluZGV4VG9Qcm9jZXNzPXRhc2tRdWV1ZUxlbmd0aD10YXNrUXVldWUubGVuZ3RoPTA7fQpmdW5jdGlvbiBzY2hlZHVsZVRhc2tQcm9jZXNzaW5nKCl7a28udGFza3NbJ3NjaGVkdWxlciddKHNjaGVkdWxlZFByb2Nlc3MpO30KdmFyIHRhc2tzPXsnc2NoZWR1bGVyJzpzY2hlZHVsZXIsc2NoZWR1bGU6ZnVuY3Rpb24oZnVuYyl7aWYoIXRhc2tRdWV1ZUxlbmd0aCl7c2NoZWR1bGVUYXNrUHJvY2Vzc2luZygpO30KdGFza1F1ZXVlW3Rhc2tRdWV1ZUxlbmd0aCsrXT1mdW5jO3JldHVybiBuZXh0SGFuZGxlKys7fSxjYW5jZWw6ZnVuY3Rpb24oaGFuZGxlKXt2YXIgaW5kZXg9aGFuZGxlLShuZXh0SGFuZGxlLXRhc2tRdWV1ZUxlbmd0aCk7aWYoaW5kZXg+PW5leHRJbmRleFRvUHJvY2VzcyYmaW5kZXg8dGFza1F1ZXVlTGVuZ3RoKXt0YXNrUXVldWVbaW5kZXhdPW51bGw7fX0sJ3Jlc2V0Rm9yVGVzdGluZyc6ZnVuY3Rpb24oKXt2YXIgbGVuZ3RoPXRhc2tRdWV1ZUxlbmd0aC1uZXh0SW5kZXhUb1Byb2Nlc3M7bmV4dEluZGV4VG9Qcm9jZXNzPXRhc2tRdWV1ZUxlbmd0aD10YXNrUXVldWUubGVuZ3RoPTA7cmV0dXJuIGxlbmd0aDt9LHJ1bkVhcmx5OnByb2Nlc3NUYXNrc307cmV0dXJuIHRhc2tzO30pKCk7a28uZXhwb3J0U3ltYm9sKCd0YXNrcycsa28udGFza3MpO2tvLmV4cG9ydFN5bWJvbCgndGFza3Muc2NoZWR1bGUnLGtvLnRhc2tzLnNjaGVkdWxlKTtrby5leHBvcnRTeW1ib2woJ3Rhc2tzLnJ1bkVhcmx5Jyxrby50YXNrcy5ydW5FYXJseSk7a28uZXh0ZW5kZXJzPXsndGhyb3R0bGUnOmZ1bmN0aW9uKHRhcmdldCx0aW1lb3V0KXt0YXJnZXRbJ3Rocm90dGxlRXZhbHVhdGlvbiddPXRpbWVvdXQ7dmFyIHdyaXRlVGltZW91dEluc3RhbmNlPW51bGw7cmV0dXJuIGtvLmRlcGVuZGVudE9ic2VydmFibGUoeydyZWFkJzp0YXJnZXQsJ3dyaXRlJzpmdW5jdGlvbih2YWx1ZSl7Y2xlYXJUaW1lb3V0KHdyaXRlVGltZW91dEluc3RhbmNlKTt3cml0ZVRpbWVvdXRJbnN0YW5jZT1rby51dGlscy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGFyZ2V0KHZhbHVlKTt9LHRpbWVvdXQpO319KTt9LCdyYXRlTGltaXQnOmZ1bmN0aW9uKHRhcmdldCxvcHRpb25zKXt2YXIgdGltZW91dCxtZXRob2QsbGltaXRGdW5jdGlvbjtpZih0eXBlb2Ygb3B0aW9ucz09J251bWJlcicpe3RpbWVvdXQ9b3B0aW9uczt9ZWxzZXt0aW1lb3V0PW9wdGlvbnNbJ3RpbWVvdXQnXTttZXRob2Q9b3B0aW9uc1snbWV0aG9kJ107fQp0YXJnZXQuX2RlZmVyVXBkYXRlcz1mYWxzZTtsaW1pdEZ1bmN0aW9uPXR5cGVvZiBtZXRob2Q9PSdmdW5jdGlvbic/bWV0aG9kOm1ldGhvZD09J25vdGlmeVdoZW5DaGFuZ2VzU3RvcCc/ZGVib3VuY2U6dGhyb3R0bGU7dGFyZ2V0LmxpbWl0KGZ1bmN0aW9uKGNhbGxiYWNrKXtyZXR1cm4gbGltaXRGdW5jdGlvbihjYWxsYmFjayx0aW1lb3V0LG9wdGlvbnMpO30pO30sJ2RlZmVycmVkJzpmdW5jdGlvbih0YXJnZXQsb3B0aW9ucyl7aWYob3B0aW9ucyE9PXRydWUpe3Rocm93IG5ldyBFcnJvcignVGhlIFwnZGVmZXJyZWRcJyBleHRlbmRlciBvbmx5IGFjY2VwdHMgdGhlIHZhbHVlIFwndHJ1ZVwnLCBiZWNhdXNlIGl0IGlzIG5vdCBzdXBwb3J0ZWQgdG8gdHVybiBkZWZlcnJhbCBvZmYgb25jZSBlbmFibGVkLicpfQppZighdGFyZ2V0Ll9kZWZlclVwZGF0ZXMpe3RhcmdldC5fZGVmZXJVcGRhdGVzPXRydWU7dGFyZ2V0LmxpbWl0KGZ1bmN0aW9uKGNhbGxiYWNrKXt2YXIgaGFuZGxlLGlnbm9yZVVwZGF0ZXM9ZmFsc2U7cmV0dXJuIGZ1bmN0aW9uKCl7aWYoIWlnbm9yZVVwZGF0ZXMpe2tvLnRhc2tzLmNhbmNlbChoYW5kbGUpO2hhbmRsZT1rby50YXNrcy5zY2hlZHVsZShjYWxsYmFjayk7dHJ5e2lnbm9yZVVwZGF0ZXM9dHJ1ZTt0YXJnZXRbJ25vdGlmeVN1YnNjcmliZXJzJ10odW5kZWZpbmVkLCdkaXJ0eScpO31maW5hbGx5e2lnbm9yZVVwZGF0ZXM9ZmFsc2U7fX19O30pO319LCdub3RpZnknOmZ1bmN0aW9uKHRhcmdldCxub3RpZnlXaGVuKXt0YXJnZXRbImVxdWFsaXR5Q29tcGFyZXIiXT1ub3RpZnlXaGVuPT0iYWx3YXlzIj9udWxsOnZhbHVlc0FyZVByaW1pdGl2ZUFuZEVxdWFsO319O3ZhciBwcmltaXRpdmVUeXBlcz17J3VuZGVmaW5lZCc6MSwnYm9vbGVhbic6MSwnbnVtYmVyJzoxLCdzdHJpbmcnOjF9O2Z1bmN0aW9uIHZhbHVlc0FyZVByaW1pdGl2ZUFuZEVxdWFsKGEsYil7dmFyIG9sZFZhbHVlSXNQcmltaXRpdmU9KGE9PT1udWxsKXx8KHR5cGVvZihhKWluIHByaW1pdGl2ZVR5cGVzKTtyZXR1cm4gb2xkVmFsdWVJc1ByaW1pdGl2ZT8oYT09PWIpOmZhbHNlO30KZnVuY3Rpb24gdGhyb3R0bGUoY2FsbGJhY2ssdGltZW91dCl7dmFyIHRpbWVvdXRJbnN0YW5jZTtyZXR1cm4gZnVuY3Rpb24oKXtpZighdGltZW91dEluc3RhbmNlKXt0aW1lb3V0SW5zdGFuY2U9a28udXRpbHMuc2V0VGltZW91dChmdW5jdGlvbigpe3RpbWVvdXRJbnN0YW5jZT11bmRlZmluZWQ7Y2FsbGJhY2soKTt9LHRpbWVvdXQpO319O30KZnVuY3Rpb24gZGVib3VuY2UoY2FsbGJhY2ssdGltZW91dCl7dmFyIHRpbWVvdXRJbnN0YW5jZTtyZXR1cm4gZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQodGltZW91dEluc3RhbmNlKTt0aW1lb3V0SW5zdGFuY2U9a28udXRpbHMuc2V0VGltZW91dChjYWxsYmFjayx0aW1lb3V0KTt9O30KZnVuY3Rpb24gYXBwbHlFeHRlbmRlcnMocmVxdWVzdGVkRXh0ZW5kZXJzKXt2YXIgdGFyZ2V0PXRoaXM7aWYocmVxdWVzdGVkRXh0ZW5kZXJzKXtrby51dGlscy5vYmplY3RGb3JFYWNoKHJlcXVlc3RlZEV4dGVuZGVycyxmdW5jdGlvbihrZXksdmFsdWUpe3ZhciBleHRlbmRlckhhbmRsZXI9a28uZXh0ZW5kZXJzW2tleV07aWYodHlwZW9mIGV4dGVuZGVySGFuZGxlcj09J2Z1bmN0aW9uJyl7dGFyZ2V0PWV4dGVuZGVySGFuZGxlcih0YXJnZXQsdmFsdWUpfHx0YXJnZXQ7fX0pO30KcmV0dXJuIHRhcmdldDt9CmtvLmV4cG9ydFN5bWJvbCgnZXh0ZW5kZXJzJyxrby5leHRlbmRlcnMpO2tvLnN1YnNjcmlwdGlvbj1mdW5jdGlvbih0YXJnZXQsY2FsbGJhY2ssZGlzcG9zZUNhbGxiYWNrKXt0aGlzLl90YXJnZXQ9dGFyZ2V0O3RoaXMuX2NhbGxiYWNrPWNhbGxiYWNrO3RoaXMuX2Rpc3Bvc2VDYWxsYmFjaz1kaXNwb3NlQ2FsbGJhY2s7dGhpcy5faXNEaXNwb3NlZD1mYWxzZTt0aGlzLl9ub2RlPW51bGw7dGhpcy5fZG9tTm9kZURpc3Bvc2FsQ2FsbGJhY2s9bnVsbDtrby5leHBvcnRQcm9wZXJ0eSh0aGlzLCdkaXNwb3NlJyx0aGlzLmRpc3Bvc2UpO2tvLmV4cG9ydFByb3BlcnR5KHRoaXMsJ2Rpc3Bvc2VXaGVuTm9kZUlzUmVtb3ZlZCcsdGhpcy5kaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQpO307a28uc3Vic2NyaXB0aW9uLnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7dmFyIHNlbGY9dGhpcztpZighc2VsZi5faXNEaXNwb3NlZCl7aWYoc2VsZi5fZG9tTm9kZURpc3Bvc2FsQ2FsbGJhY2spe2tvLnV0aWxzLmRvbU5vZGVEaXNwb3NhbC5yZW1vdmVEaXNwb3NlQ2FsbGJhY2soc2VsZi5fbm9kZSxzZWxmLl9kb21Ob2RlRGlzcG9zYWxDYWxsYmFjayk7fQpzZWxmLl9pc0Rpc3Bvc2VkPXRydWU7c2VsZi5fZGlzcG9zZUNhbGxiYWNrKCk7c2VsZi5fdGFyZ2V0PXNlbGYuX2NhbGxiYWNrPXNlbGYuX2Rpc3Bvc2VDYWxsYmFjaz1zZWxmLl9ub2RlPXNlbGYuX2RvbU5vZGVEaXNwb3NhbENhbGxiYWNrPW51bGw7fX07a28uc3Vic2NyaXB0aW9uLnByb3RvdHlwZS5kaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQ9ZnVuY3Rpb24obm9kZSl7dGhpcy5fbm9kZT1ub2RlO2tvLnV0aWxzLmRvbU5vZGVEaXNwb3NhbC5hZGREaXNwb3NlQ2FsbGJhY2sobm9kZSx0aGlzLl9kb21Ob2RlRGlzcG9zYWxDYWxsYmFjaz10aGlzLmRpc3Bvc2UuYmluZCh0aGlzKSk7fTtrby5zdWJzY3JpYmFibGU9ZnVuY3Rpb24oKXtrby51dGlscy5zZXRQcm90b3R5cGVPZk9yRXh0ZW5kKHRoaXMsa29fc3Vic2NyaWJhYmxlX2ZuKTtrb19zdWJzY3JpYmFibGVfZm4uaW5pdCh0aGlzKTt9CnZhciBkZWZhdWx0RXZlbnQ9ImNoYW5nZSI7ZnVuY3Rpb24gbGltaXROb3RpZnlTdWJzY3JpYmVycyh2YWx1ZSxldmVudCl7aWYoIWV2ZW50fHxldmVudD09PWRlZmF1bHRFdmVudCl7dGhpcy5fbGltaXRDaGFuZ2UodmFsdWUpO31lbHNlIGlmKGV2ZW50PT09J2JlZm9yZUNoYW5nZScpe3RoaXMuX2xpbWl0QmVmb3JlQ2hhbmdlKHZhbHVlKTt9ZWxzZXt0aGlzLl9vcmlnTm90aWZ5U3Vic2NyaWJlcnModmFsdWUsZXZlbnQpO319CnZhciBrb19zdWJzY3JpYmFibGVfZm49e2luaXQ6ZnVuY3Rpb24oaW5zdGFuY2Upe2luc3RhbmNlLl9zdWJzY3JpcHRpb25zPXsiY2hhbmdlIjpbXX07aW5zdGFuY2UuX3ZlcnNpb25OdW1iZXI9MTt9LHN1YnNjcmliZTpmdW5jdGlvbihjYWxsYmFjayxjYWxsYmFja1RhcmdldCxldmVudCl7dmFyIHNlbGY9dGhpcztldmVudD1ldmVudHx8ZGVmYXVsdEV2ZW50O3ZhciBib3VuZENhbGxiYWNrPWNhbGxiYWNrVGFyZ2V0P2NhbGxiYWNrLmJpbmQoY2FsbGJhY2tUYXJnZXQpOmNhbGxiYWNrO3ZhciBzdWJzY3JpcHRpb249bmV3IGtvLnN1YnNjcmlwdGlvbihzZWxmLGJvdW5kQ2FsbGJhY2ssZnVuY3Rpb24oKXtrby51dGlscy5hcnJheVJlbW92ZUl0ZW0oc2VsZi5fc3Vic2NyaXB0aW9uc1tldmVudF0sc3Vic2NyaXB0aW9uKTtpZihzZWxmLmFmdGVyU3Vic2NyaXB0aW9uUmVtb3ZlKQpzZWxmLmFmdGVyU3Vic2NyaXB0aW9uUmVtb3ZlKGV2ZW50KTt9KTtpZihzZWxmLmJlZm9yZVN1YnNjcmlwdGlvbkFkZCkKc2VsZi5iZWZvcmVTdWJzY3JpcHRpb25BZGQoZXZlbnQpO2lmKCFzZWxmLl9zdWJzY3JpcHRpb25zW2V2ZW50XSkKc2VsZi5fc3Vic2NyaXB0aW9uc1tldmVudF09W107c2VsZi5fc3Vic2NyaXB0aW9uc1tldmVudF0ucHVzaChzdWJzY3JpcHRpb24pO3JldHVybiBzdWJzY3JpcHRpb247fSwibm90aWZ5U3Vic2NyaWJlcnMiOmZ1bmN0aW9uKHZhbHVlVG9Ob3RpZnksZXZlbnQpe2V2ZW50PWV2ZW50fHxkZWZhdWx0RXZlbnQ7aWYoZXZlbnQ9PT1kZWZhdWx0RXZlbnQpe3RoaXMudXBkYXRlVmVyc2lvbigpO30KaWYodGhpcy5oYXNTdWJzY3JpcHRpb25zRm9yRXZlbnQoZXZlbnQpKXt2YXIgc3Vicz1ldmVudD09PWRlZmF1bHRFdmVudCYmdGhpcy5fY2hhbmdlU3Vic2NyaXB0aW9uc3x8dGhpcy5fc3Vic2NyaXB0aW9uc1tldmVudF0uc2xpY2UoMCk7dHJ5e2tvLmRlcGVuZGVuY3lEZXRlY3Rpb24uYmVnaW4oKTtmb3IodmFyIGk9MCxzdWJzY3JpcHRpb247c3Vic2NyaXB0aW9uPXN1YnNbaV07KytpKXtpZighc3Vic2NyaXB0aW9uLl9pc0Rpc3Bvc2VkKQpzdWJzY3JpcHRpb24uX2NhbGxiYWNrKHZhbHVlVG9Ob3RpZnkpO319ZmluYWxseXtrby5kZXBlbmRlbmN5RGV0ZWN0aW9uLmVuZCgpO319fSxnZXRWZXJzaW9uOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3ZlcnNpb25OdW1iZXI7fSxoYXNDaGFuZ2VkOmZ1bmN0aW9uKHZlcnNpb25Ub0NoZWNrKXtyZXR1cm4gdGhpcy5nZXRWZXJzaW9uKCkhPT12ZXJzaW9uVG9DaGVjazt9LHVwZGF0ZVZlcnNpb246ZnVuY3Rpb24oKXsrK3RoaXMuX3ZlcnNpb25OdW1iZXI7fSxsaW1pdDpmdW5jdGlvbihsaW1pdEZ1bmN0aW9uKXt2YXIgc2VsZj10aGlzLHNlbGZJc09ic2VydmFibGU9a28uaXNPYnNlcnZhYmxlKHNlbGYpLGlnbm9yZUJlZm9yZUNoYW5nZSxub3RpZnlOZXh0Q2hhbmdlLHByZXZpb3VzVmFsdWUscGVuZGluZ1ZhbHVlLGRpZFVwZGF0ZSxiZWZvcmVDaGFuZ2U9J2JlZm9yZUNoYW5nZSc7aWYoIXNlbGYuX29yaWdOb3RpZnlTdWJzY3JpYmVycyl7c2VsZi5fb3JpZ05vdGlmeVN1YnNjcmliZXJzPXNlbGZbIm5vdGlmeVN1YnNjcmliZXJzIl07c2VsZlsibm90aWZ5U3Vic2NyaWJlcnMiXT1saW1pdE5vdGlmeVN1YnNjcmliZXJzO30KdmFyIGZpbmlzaD1saW1pdEZ1bmN0aW9uKGZ1bmN0aW9uKCl7c2VsZi5fbm90aWZpY2F0aW9uSXNQZW5kaW5nPWZhbHNlO2lmKHNlbGZJc09ic2VydmFibGUmJnBlbmRpbmdWYWx1ZT09PXNlbGYpe3BlbmRpbmdWYWx1ZT1zZWxmLl9ldmFsSWZDaGFuZ2VkP3NlbGYuX2V2YWxJZkNoYW5nZWQoKTpzZWxmKCk7fQp2YXIgc2hvdWxkTm90aWZ5PW5vdGlmeU5leHRDaGFuZ2V8fChkaWRVcGRhdGUmJnNlbGYuaXNEaWZmZXJlbnQocHJldmlvdXNWYWx1ZSxwZW5kaW5nVmFsdWUpKTtkaWRVcGRhdGU9bm90aWZ5TmV4dENoYW5nZT1pZ25vcmVCZWZvcmVDaGFuZ2U9ZmFsc2U7aWYoc2hvdWxkTm90aWZ5KXtzZWxmLl9vcmlnTm90aWZ5U3Vic2NyaWJlcnMocHJldmlvdXNWYWx1ZT1wZW5kaW5nVmFsdWUpO319KTtzZWxmLl9saW1pdENoYW5nZT1mdW5jdGlvbih2YWx1ZSxpc0RpcnR5KXtpZighaXNEaXJ0eXx8IXNlbGYuX25vdGlmaWNhdGlvbklzUGVuZGluZyl7ZGlkVXBkYXRlPSFpc0RpcnR5O30Kc2VsZi5fY2hhbmdlU3Vic2NyaXB0aW9ucz1zZWxmLl9zdWJzY3JpcHRpb25zW2RlZmF1bHRFdmVudF0uc2xpY2UoMCk7c2VsZi5fbm90aWZpY2F0aW9uSXNQZW5kaW5nPWlnbm9yZUJlZm9yZUNoYW5nZT10cnVlO3BlbmRpbmdWYWx1ZT12YWx1ZTtmaW5pc2goKTt9O3NlbGYuX2xpbWl0QmVmb3JlQ2hhbmdlPWZ1bmN0aW9uKHZhbHVlKXtpZighaWdub3JlQmVmb3JlQ2hhbmdlKXtwcmV2aW91c1ZhbHVlPXZhbHVlO3NlbGYuX29yaWdOb3RpZnlTdWJzY3JpYmVycyh2YWx1ZSxiZWZvcmVDaGFuZ2UpO319O3NlbGYuX3JlY29yZFVwZGF0ZT1mdW5jdGlvbigpe2RpZFVwZGF0ZT10cnVlO307c2VsZi5fbm90aWZ5TmV4dENoYW5nZUlmVmFsdWVJc0RpZmZlcmVudD1mdW5jdGlvbigpe2lmKHNlbGYuaXNEaWZmZXJlbnQocHJldmlvdXNWYWx1ZSxzZWxmLnBlZWsodHJ1ZSkpKXtub3RpZnlOZXh0Q2hhbmdlPXRydWU7fX07fSxoYXNTdWJzY3JpcHRpb25zRm9yRXZlbnQ6ZnVuY3Rpb24oZXZlbnQpe3JldHVybiB0aGlzLl9zdWJzY3JpcHRpb25zW2V2ZW50XSYmdGhpcy5fc3Vic2NyaXB0aW9uc1tldmVudF0ubGVuZ3RoO30sZ2V0U3Vic2NyaXB0aW9uc0NvdW50OmZ1bmN0aW9uKGV2ZW50KXtpZihldmVudCl7cmV0dXJuIHRoaXMuX3N1YnNjcmlwdGlvbnNbZXZlbnRdJiZ0aGlzLl9zdWJzY3JpcHRpb25zW2V2ZW50XS5sZW5ndGh8fDA7fWVsc2V7dmFyIHRvdGFsPTA7a28udXRpbHMub2JqZWN0Rm9yRWFjaCh0aGlzLl9zdWJzY3JpcHRpb25zLGZ1bmN0aW9uKGV2ZW50TmFtZSxzdWJzY3JpcHRpb25zKXtpZihldmVudE5hbWUhPT0nZGlydHknKQp0b3RhbCs9c3Vic2NyaXB0aW9ucy5sZW5ndGg7fSk7cmV0dXJuIHRvdGFsO319LGlzRGlmZmVyZW50OmZ1bmN0aW9uKG9sZFZhbHVlLG5ld1ZhbHVlKXtyZXR1cm4hdGhpc1snZXF1YWxpdHlDb21wYXJlciddfHwhdGhpc1snZXF1YWxpdHlDb21wYXJlciddKG9sZFZhbHVlLG5ld1ZhbHVlKTt9LHRvU3RyaW5nOmZ1bmN0aW9uKCl7cmV0dXJuJ1tvYmplY3QgT2JqZWN0XSd9LGV4dGVuZDphcHBseUV4dGVuZGVyc307a28uZXhwb3J0UHJvcGVydHkoa29fc3Vic2NyaWJhYmxlX2ZuLCdpbml0Jyxrb19zdWJzY3JpYmFibGVfZm4uaW5pdCk7a28uZXhwb3J0UHJvcGVydHkoa29fc3Vic2NyaWJhYmxlX2ZuLCdzdWJzY3JpYmUnLGtvX3N1YnNjcmliYWJsZV9mbi5zdWJzY3JpYmUpO2tvLmV4cG9ydFByb3BlcnR5KGtvX3N1YnNjcmliYWJsZV9mbiwnZXh0ZW5kJyxrb19zdWJzY3JpYmFibGVfZm4uZXh0ZW5kKTtrby5leHBvcnRQcm9wZXJ0eShrb19zdWJzY3JpYmFibGVfZm4sJ2dldFN1YnNjcmlwdGlvbnNDb3VudCcsa29fc3Vic2NyaWJhYmxlX2ZuLmdldFN1YnNjcmlwdGlvbnNDb3VudCk7aWYoa28udXRpbHMuY2FuU2V0UHJvdG90eXBlKXtrby51dGlscy5zZXRQcm90b3R5cGVPZihrb19zdWJzY3JpYmFibGVfZm4sRnVuY3Rpb24ucHJvdG90eXBlKTt9CmtvLnN1YnNjcmliYWJsZVsnZm4nXT1rb19zdWJzY3JpYmFibGVfZm47a28uaXNTdWJzY3JpYmFibGU9ZnVuY3Rpb24oaW5zdGFuY2Upe3JldHVybiBpbnN0YW5jZSE9bnVsbCYmdHlwZW9mIGluc3RhbmNlLnN1YnNjcmliZT09ImZ1bmN0aW9uIiYmdHlwZW9mIGluc3RhbmNlWyJub3RpZnlTdWJzY3JpYmVycyJdPT0iZnVuY3Rpb24iO307a28uZXhwb3J0U3ltYm9sKCdzdWJzY3JpYmFibGUnLGtvLnN1YnNjcmliYWJsZSk7a28uZXhwb3J0U3ltYm9sKCdpc1N1YnNjcmliYWJsZScsa28uaXNTdWJzY3JpYmFibGUpO2tvLmNvbXB1dGVkQ29udGV4dD1rby5kZXBlbmRlbmN5RGV0ZWN0aW9uPShmdW5jdGlvbigpe3ZhciBvdXRlckZyYW1lcz1bXSxjdXJyZW50RnJhbWUsbGFzdElkPTA7ZnVuY3Rpb24gZ2V0SWQoKXtyZXR1cm4rK2xhc3RJZDt9CmZ1bmN0aW9uIGJlZ2luKG9wdGlvbnMpe291dGVyRnJhbWVzLnB1c2goY3VycmVudEZyYW1lKTtjdXJyZW50RnJhbWU9b3B0aW9uczt9CmZ1bmN0aW9uIGVuZCgpe2N1cnJlbnRGcmFtZT1vdXRlckZyYW1lcy5wb3AoKTt9CnJldHVybntiZWdpbjpiZWdpbixlbmQ6ZW5kLHJlZ2lzdGVyRGVwZW5kZW5jeTpmdW5jdGlvbihzdWJzY3JpYmFibGUpe2lmKGN1cnJlbnRGcmFtZSl7aWYoIWtvLmlzU3Vic2NyaWJhYmxlKHN1YnNjcmliYWJsZSkpCnRocm93IG5ldyBFcnJvcigiT25seSBzdWJzY3JpYmFibGUgdGhpbmdzIGNhbiBhY3QgYXMgZGVwZW5kZW5jaWVzIik7Y3VycmVudEZyYW1lLmNhbGxiYWNrLmNhbGwoY3VycmVudEZyYW1lLmNhbGxiYWNrVGFyZ2V0LHN1YnNjcmliYWJsZSxzdWJzY3JpYmFibGUuX2lkfHwoc3Vic2NyaWJhYmxlLl9pZD1nZXRJZCgpKSk7fX0saWdub3JlOmZ1bmN0aW9uKGNhbGxiYWNrLGNhbGxiYWNrVGFyZ2V0LGNhbGxiYWNrQXJncyl7dHJ5e2JlZ2luKCk7cmV0dXJuIGNhbGxiYWNrLmFwcGx5KGNhbGxiYWNrVGFyZ2V0LGNhbGxiYWNrQXJnc3x8W10pO31maW5hbGx5e2VuZCgpO319LGdldERlcGVuZGVuY2llc0NvdW50OmZ1bmN0aW9uKCl7aWYoY3VycmVudEZyYW1lKQpyZXR1cm4gY3VycmVudEZyYW1lLmNvbXB1dGVkLmdldERlcGVuZGVuY2llc0NvdW50KCk7fSxnZXREZXBlbmRlbmNpZXM6ZnVuY3Rpb24oKXtpZihjdXJyZW50RnJhbWUpCnJldHVybiBjdXJyZW50RnJhbWUuY29tcHV0ZWQuZ2V0RGVwZW5kZW5jaWVzKCk7fSxpc0luaXRpYWw6ZnVuY3Rpb24oKXtpZihjdXJyZW50RnJhbWUpCnJldHVybiBjdXJyZW50RnJhbWUuaXNJbml0aWFsO30sY29tcHV0ZWQ6ZnVuY3Rpb24oKXtpZihjdXJyZW50RnJhbWUpCnJldHVybiBjdXJyZW50RnJhbWUuY29tcHV0ZWQ7fX07fSkoKTtrby5leHBvcnRTeW1ib2woJ2NvbXB1dGVkQ29udGV4dCcsa28uY29tcHV0ZWRDb250ZXh0KTtrby5leHBvcnRTeW1ib2woJ2NvbXB1dGVkQ29udGV4dC5nZXREZXBlbmRlbmNpZXNDb3VudCcsa28uY29tcHV0ZWRDb250ZXh0LmdldERlcGVuZGVuY2llc0NvdW50KTtrby5leHBvcnRTeW1ib2woJ2NvbXB1dGVkQ29udGV4dC5nZXREZXBlbmRlbmNpZXMnLGtvLmNvbXB1dGVkQ29udGV4dC5nZXREZXBlbmRlbmNpZXMpO2tvLmV4cG9ydFN5bWJvbCgnY29tcHV0ZWRDb250ZXh0LmlzSW5pdGlhbCcsa28uY29tcHV0ZWRDb250ZXh0LmlzSW5pdGlhbCk7a28uZXhwb3J0U3ltYm9sKCdjb21wdXRlZENvbnRleHQucmVnaXN0ZXJEZXBlbmRlbmN5Jyxrby5jb21wdXRlZENvbnRleHQucmVnaXN0ZXJEZXBlbmRlbmN5KTtrby5leHBvcnRTeW1ib2woJ2lnbm9yZURlcGVuZGVuY2llcycsa28uaWdub3JlRGVwZW5kZW5jaWVzPWtvLmRlcGVuZGVuY3lEZXRlY3Rpb24uaWdub3JlKTt2YXIgb2JzZXJ2YWJsZUxhdGVzdFZhbHVlPWtvLnV0aWxzLmNyZWF0ZVN5bWJvbE9yU3RyaW5nKCdfbGF0ZXN0VmFsdWUnKTtrby5vYnNlcnZhYmxlPWZ1bmN0aW9uKGluaXRpYWxWYWx1ZSl7ZnVuY3Rpb24gb2JzZXJ2YWJsZSgpe2lmKGFyZ3VtZW50cy5sZW5ndGg+MCl7aWYob2JzZXJ2YWJsZS5pc0RpZmZlcmVudChvYnNlcnZhYmxlW29ic2VydmFibGVMYXRlc3RWYWx1ZV0sYXJndW1lbnRzWzBdKSl7b2JzZXJ2YWJsZS52YWx1ZVdpbGxNdXRhdGUoKTtvYnNlcnZhYmxlW29ic2VydmFibGVMYXRlc3RWYWx1ZV09YXJndW1lbnRzWzBdO29ic2VydmFibGUudmFsdWVIYXNNdXRhdGVkKCk7fQpyZXR1cm4gdGhpczt9CmVsc2V7a28uZGVwZW5kZW5jeURldGVjdGlvbi5yZWdpc3RlckRlcGVuZGVuY3kob2JzZXJ2YWJsZSk7cmV0dXJuIG9ic2VydmFibGVbb2JzZXJ2YWJsZUxhdGVzdFZhbHVlXTt9fQpvYnNlcnZhYmxlW29ic2VydmFibGVMYXRlc3RWYWx1ZV09aW5pdGlhbFZhbHVlO2lmKCFrby51dGlscy5jYW5TZXRQcm90b3R5cGUpe2tvLnV0aWxzLmV4dGVuZChvYnNlcnZhYmxlLGtvLnN1YnNjcmliYWJsZVsnZm4nXSk7fQprby5zdWJzY3JpYmFibGVbJ2ZuJ10uaW5pdChvYnNlcnZhYmxlKTtrby51dGlscy5zZXRQcm90b3R5cGVPZk9yRXh0ZW5kKG9ic2VydmFibGUsb2JzZXJ2YWJsZUZuKTtpZihrby5vcHRpb25zWydkZWZlclVwZGF0ZXMnXSl7a28uZXh0ZW5kZXJzWydkZWZlcnJlZCddKG9ic2VydmFibGUsdHJ1ZSk7fQpyZXR1cm4gb2JzZXJ2YWJsZTt9CnZhciBvYnNlcnZhYmxlRm49eydlcXVhbGl0eUNvbXBhcmVyJzp2YWx1ZXNBcmVQcmltaXRpdmVBbmRFcXVhbCxwZWVrOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXNbb2JzZXJ2YWJsZUxhdGVzdFZhbHVlXTt9LHZhbHVlSGFzTXV0YXRlZDpmdW5jdGlvbigpe3RoaXNbJ25vdGlmeVN1YnNjcmliZXJzJ10odGhpc1tvYnNlcnZhYmxlTGF0ZXN0VmFsdWVdLCdzcGVjdGF0ZScpO3RoaXNbJ25vdGlmeVN1YnNjcmliZXJzJ10odGhpc1tvYnNlcnZhYmxlTGF0ZXN0VmFsdWVdKTt9LHZhbHVlV2lsbE11dGF0ZTpmdW5jdGlvbigpe3RoaXNbJ25vdGlmeVN1YnNjcmliZXJzJ10odGhpc1tvYnNlcnZhYmxlTGF0ZXN0VmFsdWVdLCdiZWZvcmVDaGFuZ2UnKTt9fTtpZihrby51dGlscy5jYW5TZXRQcm90b3R5cGUpe2tvLnV0aWxzLnNldFByb3RvdHlwZU9mKG9ic2VydmFibGVGbixrby5zdWJzY3JpYmFibGVbJ2ZuJ10pO30KdmFyIHByb3RvUHJvcGVydHk9a28ub2JzZXJ2YWJsZS5wcm90b1Byb3BlcnR5PSdfX2tvX3Byb3RvX18nO29ic2VydmFibGVGbltwcm90b1Byb3BlcnR5XT1rby5vYnNlcnZhYmxlO2tvLmlzT2JzZXJ2YWJsZT1mdW5jdGlvbihpbnN0YW5jZSl7dmFyIHByb3RvPXR5cGVvZiBpbnN0YW5jZT09J2Z1bmN0aW9uJyYmaW5zdGFuY2VbcHJvdG9Qcm9wZXJ0eV07aWYocHJvdG8mJnByb3RvIT09b2JzZXJ2YWJsZUZuW3Byb3RvUHJvcGVydHldJiZwcm90byE9PWtvLmNvbXB1dGVkWydmbiddW3Byb3RvUHJvcGVydHldKXt0aHJvdyBFcnJvcigiSW52YWxpZCBvYmplY3QgdGhhdCBsb29rcyBsaWtlIGFuIG9ic2VydmFibGU7IHBvc3NpYmx5IGZyb20gYW5vdGhlciBLbm9ja291dCBpbnN0YW5jZSIpO30KcmV0dXJuISFwcm90bzt9O2tvLmlzV3JpdGVhYmxlT2JzZXJ2YWJsZT1mdW5jdGlvbihpbnN0YW5jZSl7cmV0dXJuKHR5cGVvZiBpbnN0YW5jZT09J2Z1bmN0aW9uJyYmKChpbnN0YW5jZVtwcm90b1Byb3BlcnR5XT09PW9ic2VydmFibGVGbltwcm90b1Byb3BlcnR5XSl8fChpbnN0YW5jZVtwcm90b1Byb3BlcnR5XT09PWtvLmNvbXB1dGVkWydmbiddW3Byb3RvUHJvcGVydHldJiZpbnN0YW5jZS5oYXNXcml0ZUZ1bmN0aW9uKSkpO307a28uZXhwb3J0U3ltYm9sKCdvYnNlcnZhYmxlJyxrby5vYnNlcnZhYmxlKTtrby5leHBvcnRTeW1ib2woJ2lzT2JzZXJ2YWJsZScsa28uaXNPYnNlcnZhYmxlKTtrby5leHBvcnRTeW1ib2woJ2lzV3JpdGVhYmxlT2JzZXJ2YWJsZScsa28uaXNXcml0ZWFibGVPYnNlcnZhYmxlKTtrby5leHBvcnRTeW1ib2woJ2lzV3JpdGFibGVPYnNlcnZhYmxlJyxrby5pc1dyaXRlYWJsZU9ic2VydmFibGUpO2tvLmV4cG9ydFN5bWJvbCgnb2JzZXJ2YWJsZS5mbicsb2JzZXJ2YWJsZUZuKTtrby5leHBvcnRQcm9wZXJ0eShvYnNlcnZhYmxlRm4sJ3BlZWsnLG9ic2VydmFibGVGbi5wZWVrKTtrby5leHBvcnRQcm9wZXJ0eShvYnNlcnZhYmxlRm4sJ3ZhbHVlSGFzTXV0YXRlZCcsb2JzZXJ2YWJsZUZuLnZhbHVlSGFzTXV0YXRlZCk7a28uZXhwb3J0UHJvcGVydHkob2JzZXJ2YWJsZUZuLCd2YWx1ZVdpbGxNdXRhdGUnLG9ic2VydmFibGVGbi52YWx1ZVdpbGxNdXRhdGUpO2tvLm9ic2VydmFibGVBcnJheT1mdW5jdGlvbihpbml0aWFsVmFsdWVzKXtpbml0aWFsVmFsdWVzPWluaXRpYWxWYWx1ZXN8fFtdO2lmKHR5cGVvZiBpbml0aWFsVmFsdWVzIT0nb2JqZWN0J3x8ISgnbGVuZ3RoJ2luIGluaXRpYWxWYWx1ZXMpKQp0aHJvdyBuZXcgRXJyb3IoIlRoZSBhcmd1bWVudCBwYXNzZWQgd2hlbiBpbml0aWFsaXppbmcgYW4gb2JzZXJ2YWJsZSBhcnJheSBtdXN0IGJlIGFuIGFycmF5LCBvciBudWxsLCBvciB1bmRlZmluZWQuIik7dmFyIHJlc3VsdD1rby5vYnNlcnZhYmxlKGluaXRpYWxWYWx1ZXMpO2tvLnV0aWxzLnNldFByb3RvdHlwZU9mT3JFeHRlbmQocmVzdWx0LGtvLm9ic2VydmFibGVBcnJheVsnZm4nXSk7cmV0dXJuIHJlc3VsdC5leHRlbmQoeyd0cmFja0FycmF5Q2hhbmdlcyc6dHJ1ZX0pO307a28ub2JzZXJ2YWJsZUFycmF5WydmbiddPXsncmVtb3ZlJzpmdW5jdGlvbih2YWx1ZU9yUHJlZGljYXRlKXt2YXIgdW5kZXJseWluZ0FycmF5PXRoaXMucGVlaygpO3ZhciByZW1vdmVkVmFsdWVzPVtdO3ZhciBwcmVkaWNhdGU9dHlwZW9mIHZhbHVlT3JQcmVkaWNhdGU9PSJmdW5jdGlvbiImJiFrby5pc09ic2VydmFibGUodmFsdWVPclByZWRpY2F0ZSk/dmFsdWVPclByZWRpY2F0ZTpmdW5jdGlvbih2YWx1ZSl7cmV0dXJuIHZhbHVlPT09dmFsdWVPclByZWRpY2F0ZTt9O2Zvcih2YXIgaT0wO2k8dW5kZXJseWluZ0FycmF5Lmxlbmd0aDtpKyspe3ZhciB2YWx1ZT11bmRlcmx5aW5nQXJyYXlbaV07aWYocHJlZGljYXRlKHZhbHVlKSl7aWYocmVtb3ZlZFZhbHVlcy5sZW5ndGg9PT0wKXt0aGlzLnZhbHVlV2lsbE11dGF0ZSgpO30KaWYodW5kZXJseWluZ0FycmF5W2ldIT09dmFsdWUpe3Rocm93IEVycm9yKCJBcnJheSBtb2RpZmllZCBkdXJpbmcgcmVtb3ZlOyBjYW5ub3QgcmVtb3ZlIGl0ZW0iKTt9CnJlbW92ZWRWYWx1ZXMucHVzaCh2YWx1ZSk7dW5kZXJseWluZ0FycmF5LnNwbGljZShpLDEpO2ktLTt9fQppZihyZW1vdmVkVmFsdWVzLmxlbmd0aCl7dGhpcy52YWx1ZUhhc011dGF0ZWQoKTt9CnJldHVybiByZW1vdmVkVmFsdWVzO30sJ3JlbW92ZUFsbCc6ZnVuY3Rpb24oYXJyYXlPZlZhbHVlcyl7aWYoYXJyYXlPZlZhbHVlcz09PXVuZGVmaW5lZCl7dmFyIHVuZGVybHlpbmdBcnJheT10aGlzLnBlZWsoKTt2YXIgYWxsVmFsdWVzPXVuZGVybHlpbmdBcnJheS5zbGljZSgwKTt0aGlzLnZhbHVlV2lsbE11dGF0ZSgpO3VuZGVybHlpbmdBcnJheS5zcGxpY2UoMCx1bmRlcmx5aW5nQXJyYXkubGVuZ3RoKTt0aGlzLnZhbHVlSGFzTXV0YXRlZCgpO3JldHVybiBhbGxWYWx1ZXM7fQppZighYXJyYXlPZlZhbHVlcykKcmV0dXJuW107cmV0dXJuIHRoaXNbJ3JlbW92ZSddKGZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ga28udXRpbHMuYXJyYXlJbmRleE9mKGFycmF5T2ZWYWx1ZXMsdmFsdWUpPj0wO30pO30sJ2Rlc3Ryb3knOmZ1bmN0aW9uKHZhbHVlT3JQcmVkaWNhdGUpe3ZhciB1bmRlcmx5aW5nQXJyYXk9dGhpcy5wZWVrKCk7dmFyIHByZWRpY2F0ZT10eXBlb2YgdmFsdWVPclByZWRpY2F0ZT09ImZ1bmN0aW9uIiYmIWtvLmlzT2JzZXJ2YWJsZSh2YWx1ZU9yUHJlZGljYXRlKT92YWx1ZU9yUHJlZGljYXRlOmZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4gdmFsdWU9PT12YWx1ZU9yUHJlZGljYXRlO307dGhpcy52YWx1ZVdpbGxNdXRhdGUoKTtmb3IodmFyIGk9dW5kZXJseWluZ0FycmF5Lmxlbmd0aC0xO2k+PTA7aS0tKXt2YXIgdmFsdWU9dW5kZXJseWluZ0FycmF5W2ldO2lmKHByZWRpY2F0ZSh2YWx1ZSkpCnZhbHVlWyJfZGVzdHJveSJdPXRydWU7fQp0aGlzLnZhbHVlSGFzTXV0YXRlZCgpO30sJ2Rlc3Ryb3lBbGwnOmZ1bmN0aW9uKGFycmF5T2ZWYWx1ZXMpe2lmKGFycmF5T2ZWYWx1ZXM9PT11bmRlZmluZWQpCnJldHVybiB0aGlzWydkZXN0cm95J10oZnVuY3Rpb24oKXtyZXR1cm4gdHJ1ZX0pO2lmKCFhcnJheU9mVmFsdWVzKQpyZXR1cm5bXTtyZXR1cm4gdGhpc1snZGVzdHJveSddKGZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ga28udXRpbHMuYXJyYXlJbmRleE9mKGFycmF5T2ZWYWx1ZXMsdmFsdWUpPj0wO30pO30sJ2luZGV4T2YnOmZ1bmN0aW9uKGl0ZW0pe3ZhciB1bmRlcmx5aW5nQXJyYXk9dGhpcygpO3JldHVybiBrby51dGlscy5hcnJheUluZGV4T2YodW5kZXJseWluZ0FycmF5LGl0ZW0pO30sJ3JlcGxhY2UnOmZ1bmN0aW9uKG9sZEl0ZW0sbmV3SXRlbSl7dmFyIGluZGV4PXRoaXNbJ2luZGV4T2YnXShvbGRJdGVtKTtpZihpbmRleD49MCl7dGhpcy52YWx1ZVdpbGxNdXRhdGUoKTt0aGlzLnBlZWsoKVtpbmRleF09bmV3SXRlbTt0aGlzLnZhbHVlSGFzTXV0YXRlZCgpO319LCdzb3J0ZWQnOmZ1bmN0aW9uKGNvbXBhcmVGdW5jdGlvbil7dmFyIGFycmF5Q29weT10aGlzKCkuc2xpY2UoMCk7cmV0dXJuIGNvbXBhcmVGdW5jdGlvbj9hcnJheUNvcHkuc29ydChjb21wYXJlRnVuY3Rpb24pOmFycmF5Q29weS5zb3J0KCk7fSwncmV2ZXJzZWQnOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMoKS5zbGljZSgwKS5yZXZlcnNlKCk7fX07aWYoa28udXRpbHMuY2FuU2V0UHJvdG90eXBlKXtrby51dGlscy5zZXRQcm90b3R5cGVPZihrby5vYnNlcnZhYmxlQXJyYXlbJ2ZuJ10sa28ub2JzZXJ2YWJsZVsnZm4nXSk7fQprby51dGlscy5hcnJheUZvckVhY2goWyJwb3AiLCJwdXNoIiwicmV2ZXJzZSIsInNoaWZ0Iiwic29ydCIsInNwbGljZSIsInVuc2hpZnQiXSxmdW5jdGlvbihtZXRob2ROYW1lKXtrby5vYnNlcnZhYmxlQXJyYXlbJ2ZuJ11bbWV0aG9kTmFtZV09ZnVuY3Rpb24oKXt2YXIgdW5kZXJseWluZ0FycmF5PXRoaXMucGVlaygpO3RoaXMudmFsdWVXaWxsTXV0YXRlKCk7dGhpcy5jYWNoZURpZmZGb3JLbm93bk9wZXJhdGlvbih1bmRlcmx5aW5nQXJyYXksbWV0aG9kTmFtZSxhcmd1bWVudHMpO3ZhciBtZXRob2RDYWxsUmVzdWx0PXVuZGVybHlpbmdBcnJheVttZXRob2ROYW1lXS5hcHBseSh1bmRlcmx5aW5nQXJyYXksYXJndW1lbnRzKTt0aGlzLnZhbHVlSGFzTXV0YXRlZCgpO3JldHVybiBtZXRob2RDYWxsUmVzdWx0PT09dW5kZXJseWluZ0FycmF5P3RoaXM6bWV0aG9kQ2FsbFJlc3VsdDt9O30pO2tvLnV0aWxzLmFycmF5Rm9yRWFjaChbInNsaWNlIl0sZnVuY3Rpb24obWV0aG9kTmFtZSl7a28ub2JzZXJ2YWJsZUFycmF5WydmbiddW21ldGhvZE5hbWVdPWZ1bmN0aW9uKCl7dmFyIHVuZGVybHlpbmdBcnJheT10aGlzKCk7cmV0dXJuIHVuZGVybHlpbmdBcnJheVttZXRob2ROYW1lXS5hcHBseSh1bmRlcmx5aW5nQXJyYXksYXJndW1lbnRzKTt9O30pO2tvLmlzT2JzZXJ2YWJsZUFycmF5PWZ1bmN0aW9uKGluc3RhbmNlKXtyZXR1cm4ga28uaXNPYnNlcnZhYmxlKGluc3RhbmNlKSYmdHlwZW9mIGluc3RhbmNlWyJyZW1vdmUiXT09ImZ1bmN0aW9uIiYmdHlwZW9mIGluc3RhbmNlWyJwdXNoIl09PSJmdW5jdGlvbiI7fTtrby5leHBvcnRTeW1ib2woJ29ic2VydmFibGVBcnJheScsa28ub2JzZXJ2YWJsZUFycmF5KTtrby5leHBvcnRTeW1ib2woJ2lzT2JzZXJ2YWJsZUFycmF5Jyxrby5pc09ic2VydmFibGVBcnJheSk7dmFyIGFycmF5Q2hhbmdlRXZlbnROYW1lPSdhcnJheUNoYW5nZSc7a28uZXh0ZW5kZXJzWyd0cmFja0FycmF5Q2hhbmdlcyddPWZ1bmN0aW9uKHRhcmdldCxvcHRpb25zKXt0YXJnZXQuY29tcGFyZUFycmF5T3B0aW9ucz17fTtpZihvcHRpb25zJiZ0eXBlb2Ygb3B0aW9ucz09Im9iamVjdCIpe2tvLnV0aWxzLmV4dGVuZCh0YXJnZXQuY29tcGFyZUFycmF5T3B0aW9ucyxvcHRpb25zKTt9CnRhcmdldC5jb21wYXJlQXJyYXlPcHRpb25zWydzcGFyc2UnXT10cnVlO2lmKHRhcmdldC5jYWNoZURpZmZGb3JLbm93bk9wZXJhdGlvbil7cmV0dXJuO30KdmFyIHRyYWNraW5nQ2hhbmdlcz1mYWxzZSxjYWNoZWREaWZmPW51bGwsY2hhbmdlU3Vic2NyaXB0aW9uLHNwZWN0YXRlU3Vic2NyaXB0aW9uLHBlbmRpbmdDaGFuZ2VzPTAscHJldmlvdXNDb250ZW50cyx1bmRlcmx5aW5nQmVmb3JlU3Vic2NyaXB0aW9uQWRkRnVuY3Rpb249dGFyZ2V0LmJlZm9yZVN1YnNjcmlwdGlvbkFkZCx1bmRlcmx5aW5nQWZ0ZXJTdWJzY3JpcHRpb25SZW1vdmVGdW5jdGlvbj10YXJnZXQuYWZ0ZXJTdWJzY3JpcHRpb25SZW1vdmU7dGFyZ2V0LmJlZm9yZVN1YnNjcmlwdGlvbkFkZD1mdW5jdGlvbihldmVudCl7aWYodW5kZXJseWluZ0JlZm9yZVN1YnNjcmlwdGlvbkFkZEZ1bmN0aW9uKXt1bmRlcmx5aW5nQmVmb3JlU3Vic2NyaXB0aW9uQWRkRnVuY3Rpb24uY2FsbCh0YXJnZXQsZXZlbnQpO30KaWYoZXZlbnQ9PT1hcnJheUNoYW5nZUV2ZW50TmFtZSl7dHJhY2tDaGFuZ2VzKCk7fX07dGFyZ2V0LmFmdGVyU3Vic2NyaXB0aW9uUmVtb3ZlPWZ1bmN0aW9uKGV2ZW50KXtpZih1bmRlcmx5aW5nQWZ0ZXJTdWJzY3JpcHRpb25SZW1vdmVGdW5jdGlvbil7dW5kZXJseWluZ0FmdGVyU3Vic2NyaXB0aW9uUmVtb3ZlRnVuY3Rpb24uY2FsbCh0YXJnZXQsZXZlbnQpO30KaWYoZXZlbnQ9PT1hcnJheUNoYW5nZUV2ZW50TmFtZSYmIXRhcmdldC5oYXNTdWJzY3JpcHRpb25zRm9yRXZlbnQoYXJyYXlDaGFuZ2VFdmVudE5hbWUpKXtpZihjaGFuZ2VTdWJzY3JpcHRpb24pe2NoYW5nZVN1YnNjcmlwdGlvbi5kaXNwb3NlKCk7fQppZihzcGVjdGF0ZVN1YnNjcmlwdGlvbil7c3BlY3RhdGVTdWJzY3JpcHRpb24uZGlzcG9zZSgpO30Kc3BlY3RhdGVTdWJzY3JpcHRpb249Y2hhbmdlU3Vic2NyaXB0aW9uPW51bGw7dHJhY2tpbmdDaGFuZ2VzPWZhbHNlO3ByZXZpb3VzQ29udGVudHM9dW5kZWZpbmVkO319O2Z1bmN0aW9uIHRyYWNrQ2hhbmdlcygpe2lmKHRyYWNraW5nQ2hhbmdlcyl7bm90aWZ5Q2hhbmdlcygpO3JldHVybjt9CnRyYWNraW5nQ2hhbmdlcz10cnVlO3NwZWN0YXRlU3Vic2NyaXB0aW9uPXRhcmdldC5zdWJzY3JpYmUoZnVuY3Rpb24oKXsrK3BlbmRpbmdDaGFuZ2VzO30sbnVsbCwic3BlY3RhdGUiKTtwcmV2aW91c0NvbnRlbnRzPVtdLmNvbmNhdCh0YXJnZXQucGVlaygpfHxbXSk7Y2FjaGVkRGlmZj1udWxsO2NoYW5nZVN1YnNjcmlwdGlvbj10YXJnZXQuc3Vic2NyaWJlKG5vdGlmeUNoYW5nZXMpO2Z1bmN0aW9uIG5vdGlmeUNoYW5nZXMoKXtpZihwZW5kaW5nQ2hhbmdlcyl7dmFyIGN1cnJlbnRDb250ZW50cz1bXS5jb25jYXQodGFyZ2V0LnBlZWsoKXx8W10pLGNoYW5nZXM7aWYodGFyZ2V0Lmhhc1N1YnNjcmlwdGlvbnNGb3JFdmVudChhcnJheUNoYW5nZUV2ZW50TmFtZSkpe2NoYW5nZXM9Z2V0Q2hhbmdlcyhwcmV2aW91c0NvbnRlbnRzLGN1cnJlbnRDb250ZW50cyk7fQpwcmV2aW91c0NvbnRlbnRzPWN1cnJlbnRDb250ZW50cztjYWNoZWREaWZmPW51bGw7cGVuZGluZ0NoYW5nZXM9MDtpZihjaGFuZ2VzJiZjaGFuZ2VzLmxlbmd0aCl7dGFyZ2V0Wydub3RpZnlTdWJzY3JpYmVycyddKGNoYW5nZXMsYXJyYXlDaGFuZ2VFdmVudE5hbWUpO319fX0KZnVuY3Rpb24gZ2V0Q2hhbmdlcyhwcmV2aW91c0NvbnRlbnRzLGN1cnJlbnRDb250ZW50cyl7aWYoIWNhY2hlZERpZmZ8fHBlbmRpbmdDaGFuZ2VzPjEpe2NhY2hlZERpZmY9a28udXRpbHMuY29tcGFyZUFycmF5cyhwcmV2aW91c0NvbnRlbnRzLGN1cnJlbnRDb250ZW50cyx0YXJnZXQuY29tcGFyZUFycmF5T3B0aW9ucyk7fQpyZXR1cm4gY2FjaGVkRGlmZjt9CnRhcmdldC5jYWNoZURpZmZGb3JLbm93bk9wZXJhdGlvbj1mdW5jdGlvbihyYXdBcnJheSxvcGVyYXRpb25OYW1lLGFyZ3Mpe2lmKCF0cmFja2luZ0NoYW5nZXN8fHBlbmRpbmdDaGFuZ2VzKXtyZXR1cm47fQp2YXIgZGlmZj1bXSxhcnJheUxlbmd0aD1yYXdBcnJheS5sZW5ndGgsYXJnc0xlbmd0aD1hcmdzLmxlbmd0aCxvZmZzZXQ9MDtmdW5jdGlvbiBwdXNoRGlmZihzdGF0dXMsdmFsdWUsaW5kZXgpe3JldHVybiBkaWZmW2RpZmYubGVuZ3RoXT17J3N0YXR1cyc6c3RhdHVzLCd2YWx1ZSc6dmFsdWUsJ2luZGV4JzppbmRleH07fQpzd2l0Y2gob3BlcmF0aW9uTmFtZSl7Y2FzZSdwdXNoJzpvZmZzZXQ9YXJyYXlMZW5ndGg7Y2FzZSd1bnNoaWZ0Jzpmb3IodmFyIGluZGV4PTA7aW5kZXg8YXJnc0xlbmd0aDtpbmRleCsrKXtwdXNoRGlmZignYWRkZWQnLGFyZ3NbaW5kZXhdLG9mZnNldCtpbmRleCk7fQpicmVhaztjYXNlJ3BvcCc6b2Zmc2V0PWFycmF5TGVuZ3RoLTE7Y2FzZSdzaGlmdCc6aWYoYXJyYXlMZW5ndGgpe3B1c2hEaWZmKCdkZWxldGVkJyxyYXdBcnJheVtvZmZzZXRdLG9mZnNldCk7fQpicmVhaztjYXNlJ3NwbGljZSc6dmFyIHN0YXJ0SW5kZXg9TWF0aC5taW4oTWF0aC5tYXgoMCxhcmdzWzBdPDA/YXJyYXlMZW5ndGgrYXJnc1swXTphcmdzWzBdKSxhcnJheUxlbmd0aCksZW5kRGVsZXRlSW5kZXg9YXJnc0xlbmd0aD09PTE/YXJyYXlMZW5ndGg6TWF0aC5taW4oc3RhcnRJbmRleCsoYXJnc1sxXXx8MCksYXJyYXlMZW5ndGgpLGVuZEFkZEluZGV4PXN0YXJ0SW5kZXgrYXJnc0xlbmd0aC0yLGVuZEluZGV4PU1hdGgubWF4KGVuZERlbGV0ZUluZGV4LGVuZEFkZEluZGV4KSxhZGRpdGlvbnM9W10sZGVsZXRpb25zPVtdO2Zvcih2YXIgaW5kZXg9c3RhcnRJbmRleCxhcmdzSW5kZXg9MjtpbmRleDxlbmRJbmRleDsrK2luZGV4LCsrYXJnc0luZGV4KXtpZihpbmRleDxlbmREZWxldGVJbmRleCkKZGVsZXRpb25zLnB1c2gocHVzaERpZmYoJ2RlbGV0ZWQnLHJhd0FycmF5W2luZGV4XSxpbmRleCkpO2lmKGluZGV4PGVuZEFkZEluZGV4KQphZGRpdGlvbnMucHVzaChwdXNoRGlmZignYWRkZWQnLGFyZ3NbYXJnc0luZGV4XSxpbmRleCkpO30Ka28udXRpbHMuZmluZE1vdmVzSW5BcnJheUNvbXBhcmlzb24oZGVsZXRpb25zLGFkZGl0aW9ucyk7YnJlYWs7ZGVmYXVsdDpyZXR1cm47fQpjYWNoZWREaWZmPWRpZmY7fTt9O3ZhciBjb21wdXRlZFN0YXRlPWtvLnV0aWxzLmNyZWF0ZVN5bWJvbE9yU3RyaW5nKCdfc3RhdGUnKTtrby5jb21wdXRlZD1rby5kZXBlbmRlbnRPYnNlcnZhYmxlPWZ1bmN0aW9uKGV2YWx1YXRvckZ1bmN0aW9uT3JPcHRpb25zLGV2YWx1YXRvckZ1bmN0aW9uVGFyZ2V0LG9wdGlvbnMpe2lmKHR5cGVvZiBldmFsdWF0b3JGdW5jdGlvbk9yT3B0aW9ucz09PSJvYmplY3QiKXtvcHRpb25zPWV2YWx1YXRvckZ1bmN0aW9uT3JPcHRpb25zO31lbHNle29wdGlvbnM9b3B0aW9uc3x8e307aWYoZXZhbHVhdG9yRnVuY3Rpb25Pck9wdGlvbnMpe29wdGlvbnNbInJlYWQiXT1ldmFsdWF0b3JGdW5jdGlvbk9yT3B0aW9uczt9fQppZih0eXBlb2Ygb3B0aW9uc1sicmVhZCJdIT0iZnVuY3Rpb24iKQp0aHJvdyBFcnJvcigiUGFzcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIGtvLmNvbXB1dGVkIik7dmFyIHdyaXRlRnVuY3Rpb249b3B0aW9uc1sid3JpdGUiXTt2YXIgc3RhdGU9e2xhdGVzdFZhbHVlOnVuZGVmaW5lZCxpc1N0YWxlOnRydWUsaXNEaXJ0eTp0cnVlLGlzQmVpbmdFdmFsdWF0ZWQ6ZmFsc2Usc3VwcHJlc3NEaXNwb3NhbFVudGlsRGlzcG9zZVdoZW5SZXR1cm5zRmFsc2U6ZmFsc2UsaXNEaXNwb3NlZDpmYWxzZSxwdXJlOmZhbHNlLGlzU2xlZXBpbmc6ZmFsc2UscmVhZEZ1bmN0aW9uOm9wdGlvbnNbInJlYWQiXSxldmFsdWF0b3JGdW5jdGlvblRhcmdldDpldmFsdWF0b3JGdW5jdGlvblRhcmdldHx8b3B0aW9uc1sib3duZXIiXSxkaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQ6b3B0aW9uc1siZGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkIl18fG9wdGlvbnMuZGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkfHxudWxsLGRpc3Bvc2VXaGVuOm9wdGlvbnNbImRpc3Bvc2VXaGVuIl18fG9wdGlvbnMuZGlzcG9zZVdoZW4sZG9tTm9kZURpc3Bvc2FsQ2FsbGJhY2s6bnVsbCxkZXBlbmRlbmN5VHJhY2tpbmc6e30sZGVwZW5kZW5jaWVzQ291bnQ6MCxldmFsdWF0aW9uVGltZW91dEluc3RhbmNlOm51bGx9O2Z1bmN0aW9uIGNvbXB1dGVkT2JzZXJ2YWJsZSgpe2lmKGFyZ3VtZW50cy5sZW5ndGg+MCl7aWYodHlwZW9mIHdyaXRlRnVuY3Rpb249PT0iZnVuY3Rpb24iKXt3cml0ZUZ1bmN0aW9uLmFwcGx5KHN0YXRlLmV2YWx1YXRvckZ1bmN0aW9uVGFyZ2V0LGFyZ3VtZW50cyk7fWVsc2V7dGhyb3cgbmV3IEVycm9yKCJDYW5ub3Qgd3JpdGUgYSB2YWx1ZSB0byBhIGtvLmNvbXB1dGVkIHVubGVzcyB5b3Ugc3BlY2lmeSBhICd3cml0ZScgb3B0aW9uLiBJZiB5b3Ugd2lzaCB0byByZWFkIHRoZSBjdXJyZW50IHZhbHVlLCBkb24ndCBwYXNzIGFueSBwYXJhbWV0ZXJzLiIpO30KcmV0dXJuIHRoaXM7fWVsc2V7aWYoIXN0YXRlLmlzRGlzcG9zZWQpe2tvLmRlcGVuZGVuY3lEZXRlY3Rpb24ucmVnaXN0ZXJEZXBlbmRlbmN5KGNvbXB1dGVkT2JzZXJ2YWJsZSk7fQppZihzdGF0ZS5pc0RpcnR5fHwoc3RhdGUuaXNTbGVlcGluZyYmY29tcHV0ZWRPYnNlcnZhYmxlLmhhdmVEZXBlbmRlbmNpZXNDaGFuZ2VkKCkpKXtjb21wdXRlZE9ic2VydmFibGUuZXZhbHVhdGVJbW1lZGlhdGUoKTt9CnJldHVybiBzdGF0ZS5sYXRlc3RWYWx1ZTt9fQpjb21wdXRlZE9ic2VydmFibGVbY29tcHV0ZWRTdGF0ZV09c3RhdGU7Y29tcHV0ZWRPYnNlcnZhYmxlLmhhc1dyaXRlRnVuY3Rpb249dHlwZW9mIHdyaXRlRnVuY3Rpb249PT0iZnVuY3Rpb24iO2lmKCFrby51dGlscy5jYW5TZXRQcm90b3R5cGUpe2tvLnV0aWxzLmV4dGVuZChjb21wdXRlZE9ic2VydmFibGUsa28uc3Vic2NyaWJhYmxlWydmbiddKTt9CmtvLnN1YnNjcmliYWJsZVsnZm4nXS5pbml0KGNvbXB1dGVkT2JzZXJ2YWJsZSk7a28udXRpbHMuc2V0UHJvdG90eXBlT2ZPckV4dGVuZChjb21wdXRlZE9ic2VydmFibGUsY29tcHV0ZWRGbik7aWYob3B0aW9uc1sncHVyZSddKXtzdGF0ZS5wdXJlPXRydWU7c3RhdGUuaXNTbGVlcGluZz10cnVlO2tvLnV0aWxzLmV4dGVuZChjb21wdXRlZE9ic2VydmFibGUscHVyZUNvbXB1dGVkT3ZlcnJpZGVzKTt9ZWxzZSBpZihvcHRpb25zWydkZWZlckV2YWx1YXRpb24nXSl7a28udXRpbHMuZXh0ZW5kKGNvbXB1dGVkT2JzZXJ2YWJsZSxkZWZlckV2YWx1YXRpb25PdmVycmlkZXMpO30KaWYoa28ub3B0aW9uc1snZGVmZXJVcGRhdGVzJ10pe2tvLmV4dGVuZGVyc1snZGVmZXJyZWQnXShjb21wdXRlZE9ic2VydmFibGUsdHJ1ZSk7fQppZihERUJVRyl7Y29tcHV0ZWRPYnNlcnZhYmxlWyJfb3B0aW9ucyJdPW9wdGlvbnM7fQppZihzdGF0ZS5kaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQpe3N0YXRlLnN1cHByZXNzRGlzcG9zYWxVbnRpbERpc3Bvc2VXaGVuUmV0dXJuc0ZhbHNlPXRydWU7aWYoIXN0YXRlLmRpc3Bvc2VXaGVuTm9kZUlzUmVtb3ZlZC5ub2RlVHlwZSl7c3RhdGUuZGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkPW51bGw7fX0KaWYoIXN0YXRlLmlzU2xlZXBpbmcmJiFvcHRpb25zWydkZWZlckV2YWx1YXRpb24nXSl7Y29tcHV0ZWRPYnNlcnZhYmxlLmV2YWx1YXRlSW1tZWRpYXRlKCk7fQppZihzdGF0ZS5kaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQmJmNvbXB1dGVkT2JzZXJ2YWJsZS5pc0FjdGl2ZSgpKXtrby51dGlscy5kb21Ob2RlRGlzcG9zYWwuYWRkRGlzcG9zZUNhbGxiYWNrKHN0YXRlLmRpc3Bvc2VXaGVuTm9kZUlzUmVtb3ZlZCxzdGF0ZS5kb21Ob2RlRGlzcG9zYWxDYWxsYmFjaz1mdW5jdGlvbigpe2NvbXB1dGVkT2JzZXJ2YWJsZS5kaXNwb3NlKCk7fSk7fQpyZXR1cm4gY29tcHV0ZWRPYnNlcnZhYmxlO307ZnVuY3Rpb24gY29tcHV0ZWREaXNwb3NlRGVwZW5kZW5jeUNhbGxiYWNrKGlkLGVudHJ5VG9EaXNwb3NlKXtpZihlbnRyeVRvRGlzcG9zZSE9PW51bGwmJmVudHJ5VG9EaXNwb3NlLmRpc3Bvc2Upe2VudHJ5VG9EaXNwb3NlLmRpc3Bvc2UoKTt9fQpmdW5jdGlvbiBjb21wdXRlZEJlZ2luRGVwZW5kZW5jeURldGVjdGlvbkNhbGxiYWNrKHN1YnNjcmliYWJsZSxpZCl7dmFyIGNvbXB1dGVkT2JzZXJ2YWJsZT10aGlzLmNvbXB1dGVkT2JzZXJ2YWJsZSxzdGF0ZT1jb21wdXRlZE9ic2VydmFibGVbY29tcHV0ZWRTdGF0ZV07aWYoIXN0YXRlLmlzRGlzcG9zZWQpe2lmKHRoaXMuZGlzcG9zYWxDb3VudCYmdGhpcy5kaXNwb3NhbENhbmRpZGF0ZXNbaWRdKXtjb21wdXRlZE9ic2VydmFibGUuYWRkRGVwZW5kZW5jeVRyYWNraW5nKGlkLHN1YnNjcmliYWJsZSx0aGlzLmRpc3Bvc2FsQ2FuZGlkYXRlc1tpZF0pO3RoaXMuZGlzcG9zYWxDYW5kaWRhdGVzW2lkXT1udWxsOy0tdGhpcy5kaXNwb3NhbENvdW50O31lbHNlIGlmKCFzdGF0ZS5kZXBlbmRlbmN5VHJhY2tpbmdbaWRdKXtjb21wdXRlZE9ic2VydmFibGUuYWRkRGVwZW5kZW5jeVRyYWNraW5nKGlkLHN1YnNjcmliYWJsZSxzdGF0ZS5pc1NsZWVwaW5nP3tfdGFyZ2V0OnN1YnNjcmliYWJsZX06Y29tcHV0ZWRPYnNlcnZhYmxlLnN1YnNjcmliZVRvRGVwZW5kZW5jeShzdWJzY3JpYmFibGUpKTt9CmlmKHN1YnNjcmliYWJsZS5fbm90aWZpY2F0aW9uSXNQZW5kaW5nKXtzdWJzY3JpYmFibGUuX25vdGlmeU5leHRDaGFuZ2VJZlZhbHVlSXNEaWZmZXJlbnQoKTt9fX0KdmFyIGNvbXB1dGVkRm49eyJlcXVhbGl0eUNvbXBhcmVyIjp2YWx1ZXNBcmVQcmltaXRpdmVBbmRFcXVhbCxnZXREZXBlbmRlbmNpZXNDb3VudDpmdW5jdGlvbigpe3JldHVybiB0aGlzW2NvbXB1dGVkU3RhdGVdLmRlcGVuZGVuY2llc0NvdW50O30sZ2V0RGVwZW5kZW5jaWVzOmZ1bmN0aW9uKCl7dmFyIGRlcGVuZGVuY3lUcmFja2luZz10aGlzW2NvbXB1dGVkU3RhdGVdLmRlcGVuZGVuY3lUcmFja2luZyxkZXBlbmRlbnRPYnNlcnZhYmxlcz1bXTtrby51dGlscy5vYmplY3RGb3JFYWNoKGRlcGVuZGVuY3lUcmFja2luZyxmdW5jdGlvbihpZCxkZXBlbmRlbmN5KXtkZXBlbmRlbnRPYnNlcnZhYmxlc1tkZXBlbmRlbmN5Ll9vcmRlcl09ZGVwZW5kZW5jeS5fdGFyZ2V0O30pO3JldHVybiBkZXBlbmRlbnRPYnNlcnZhYmxlczt9LGhhc0FuY2VzdG9yRGVwZW5kZW5jeTpmdW5jdGlvbihvYnMpe2lmKCF0aGlzW2NvbXB1dGVkU3RhdGVdLmRlcGVuZGVuY2llc0NvdW50KXtyZXR1cm4gZmFsc2U7fQp2YXIgZGVwZW5kZW5jaWVzPXRoaXMuZ2V0RGVwZW5kZW5jaWVzKCk7aWYoa28udXRpbHMuYXJyYXlJbmRleE9mKGRlcGVuZGVuY2llcyxvYnMpIT09LTEpe3JldHVybiB0cnVlO30KcmV0dXJuISFrby51dGlscy5hcnJheUZpcnN0KGRlcGVuZGVuY2llcyxmdW5jdGlvbihkZXApe3JldHVybiBkZXAuaGFzQW5jZXN0b3JEZXBlbmRlbmN5JiZkZXAuaGFzQW5jZXN0b3JEZXBlbmRlbmN5KG9icyk7fSk7fSxhZGREZXBlbmRlbmN5VHJhY2tpbmc6ZnVuY3Rpb24oaWQsdGFyZ2V0LHRyYWNraW5nT2JqKXtpZih0aGlzW2NvbXB1dGVkU3RhdGVdLnB1cmUmJnRhcmdldD09PXRoaXMpe3Rocm93IEVycm9yKCJBICdwdXJlJyBjb21wdXRlZCBtdXN0IG5vdCBiZSBjYWxsZWQgcmVjdXJzaXZlbHkiKTt9CnRoaXNbY29tcHV0ZWRTdGF0ZV0uZGVwZW5kZW5jeVRyYWNraW5nW2lkXT10cmFja2luZ09iajt0cmFja2luZ09iai5fb3JkZXI9dGhpc1tjb21wdXRlZFN0YXRlXS5kZXBlbmRlbmNpZXNDb3VudCsrO3RyYWNraW5nT2JqLl92ZXJzaW9uPXRhcmdldC5nZXRWZXJzaW9uKCk7fSxoYXZlRGVwZW5kZW5jaWVzQ2hhbmdlZDpmdW5jdGlvbigpe3ZhciBpZCxkZXBlbmRlbmN5LGRlcGVuZGVuY3lUcmFja2luZz10aGlzW2NvbXB1dGVkU3RhdGVdLmRlcGVuZGVuY3lUcmFja2luZztmb3IoaWQgaW4gZGVwZW5kZW5jeVRyYWNraW5nKXtpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZGVwZW5kZW5jeVRyYWNraW5nLGlkKSl7ZGVwZW5kZW5jeT1kZXBlbmRlbmN5VHJhY2tpbmdbaWRdO2lmKCh0aGlzLl9ldmFsRGVsYXllZCYmZGVwZW5kZW5jeS5fdGFyZ2V0Ll9ub3RpZmljYXRpb25Jc1BlbmRpbmcpfHxkZXBlbmRlbmN5Ll90YXJnZXQuaGFzQ2hhbmdlZChkZXBlbmRlbmN5Ll92ZXJzaW9uKSl7cmV0dXJuIHRydWU7fX19fSxtYXJrRGlydHk6ZnVuY3Rpb24oKXtpZih0aGlzLl9ldmFsRGVsYXllZCYmIXRoaXNbY29tcHV0ZWRTdGF0ZV0uaXNCZWluZ0V2YWx1YXRlZCl7dGhpcy5fZXZhbERlbGF5ZWQoZmFsc2UpO319LGlzQWN0aXZlOmZ1bmN0aW9uKCl7dmFyIHN0YXRlPXRoaXNbY29tcHV0ZWRTdGF0ZV07cmV0dXJuIHN0YXRlLmlzRGlydHl8fHN0YXRlLmRlcGVuZGVuY2llc0NvdW50PjA7fSxyZXNwb25kVG9DaGFuZ2U6ZnVuY3Rpb24oKXtpZighdGhpcy5fbm90aWZpY2F0aW9uSXNQZW5kaW5nKXt0aGlzLmV2YWx1YXRlUG9zc2libHlBc3luYygpO31lbHNlIGlmKHRoaXNbY29tcHV0ZWRTdGF0ZV0uaXNEaXJ0eSl7dGhpc1tjb21wdXRlZFN0YXRlXS5pc1N0YWxlPXRydWU7fX0sc3Vic2NyaWJlVG9EZXBlbmRlbmN5OmZ1bmN0aW9uKHRhcmdldCl7aWYodGFyZ2V0Ll9kZWZlclVwZGF0ZXMpe3ZhciBkaXJ0eVN1Yj10YXJnZXQuc3Vic2NyaWJlKHRoaXMubWFya0RpcnR5LHRoaXMsJ2RpcnR5JyksY2hhbmdlU3ViPXRhcmdldC5zdWJzY3JpYmUodGhpcy5yZXNwb25kVG9DaGFuZ2UsdGhpcyk7cmV0dXJue190YXJnZXQ6dGFyZ2V0LGRpc3Bvc2U6ZnVuY3Rpb24oKXtkaXJ0eVN1Yi5kaXNwb3NlKCk7Y2hhbmdlU3ViLmRpc3Bvc2UoKTt9fTt9ZWxzZXtyZXR1cm4gdGFyZ2V0LnN1YnNjcmliZSh0aGlzLmV2YWx1YXRlUG9zc2libHlBc3luYyx0aGlzKTt9fSxldmFsdWF0ZVBvc3NpYmx5QXN5bmM6ZnVuY3Rpb24oKXt2YXIgY29tcHV0ZWRPYnNlcnZhYmxlPXRoaXMsdGhyb3R0bGVFdmFsdWF0aW9uVGltZW91dD1jb21wdXRlZE9ic2VydmFibGVbJ3Rocm90dGxlRXZhbHVhdGlvbiddO2lmKHRocm90dGxlRXZhbHVhdGlvblRpbWVvdXQmJnRocm90dGxlRXZhbHVhdGlvblRpbWVvdXQ+PTApe2NsZWFyVGltZW91dCh0aGlzW2NvbXB1dGVkU3RhdGVdLmV2YWx1YXRpb25UaW1lb3V0SW5zdGFuY2UpO3RoaXNbY29tcHV0ZWRTdGF0ZV0uZXZhbHVhdGlvblRpbWVvdXRJbnN0YW5jZT1rby51dGlscy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7Y29tcHV0ZWRPYnNlcnZhYmxlLmV2YWx1YXRlSW1tZWRpYXRlKHRydWUpO30sdGhyb3R0bGVFdmFsdWF0aW9uVGltZW91dCk7fWVsc2UgaWYoY29tcHV0ZWRPYnNlcnZhYmxlLl9ldmFsRGVsYXllZCl7Y29tcHV0ZWRPYnNlcnZhYmxlLl9ldmFsRGVsYXllZCh0cnVlKTt9ZWxzZXtjb21wdXRlZE9ic2VydmFibGUuZXZhbHVhdGVJbW1lZGlhdGUodHJ1ZSk7fX0sZXZhbHVhdGVJbW1lZGlhdGU6ZnVuY3Rpb24obm90aWZ5Q2hhbmdlKXt2YXIgY29tcHV0ZWRPYnNlcnZhYmxlPXRoaXMsc3RhdGU9Y29tcHV0ZWRPYnNlcnZhYmxlW2NvbXB1dGVkU3RhdGVdLGRpc3Bvc2VXaGVuPXN0YXRlLmRpc3Bvc2VXaGVuLGNoYW5nZWQ9ZmFsc2U7aWYoc3RhdGUuaXNCZWluZ0V2YWx1YXRlZCl7cmV0dXJuO30KaWYoc3RhdGUuaXNEaXNwb3NlZCl7cmV0dXJuO30KaWYoc3RhdGUuZGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkJiYha28udXRpbHMuZG9tTm9kZUlzQXR0YWNoZWRUb0RvY3VtZW50KHN0YXRlLmRpc3Bvc2VXaGVuTm9kZUlzUmVtb3ZlZCl8fGRpc3Bvc2VXaGVuJiZkaXNwb3NlV2hlbigpKXtpZighc3RhdGUuc3VwcHJlc3NEaXNwb3NhbFVudGlsRGlzcG9zZVdoZW5SZXR1cm5zRmFsc2Upe2NvbXB1dGVkT2JzZXJ2YWJsZS5kaXNwb3NlKCk7cmV0dXJuO319ZWxzZXtzdGF0ZS5zdXBwcmVzc0Rpc3Bvc2FsVW50aWxEaXNwb3NlV2hlblJldHVybnNGYWxzZT1mYWxzZTt9CnN0YXRlLmlzQmVpbmdFdmFsdWF0ZWQ9dHJ1ZTt0cnl7Y2hhbmdlZD10aGlzLmV2YWx1YXRlSW1tZWRpYXRlX0NhbGxSZWFkV2l0aERlcGVuZGVuY3lEZXRlY3Rpb24obm90aWZ5Q2hhbmdlKTt9ZmluYWxseXtzdGF0ZS5pc0JlaW5nRXZhbHVhdGVkPWZhbHNlO30KcmV0dXJuIGNoYW5nZWQ7fSxldmFsdWF0ZUltbWVkaWF0ZV9DYWxsUmVhZFdpdGhEZXBlbmRlbmN5RGV0ZWN0aW9uOmZ1bmN0aW9uKG5vdGlmeUNoYW5nZSl7dmFyIGNvbXB1dGVkT2JzZXJ2YWJsZT10aGlzLHN0YXRlPWNvbXB1dGVkT2JzZXJ2YWJsZVtjb21wdXRlZFN0YXRlXSxjaGFuZ2VkPWZhbHNlO3ZhciBpc0luaXRpYWw9c3RhdGUucHVyZT91bmRlZmluZWQ6IXN0YXRlLmRlcGVuZGVuY2llc0NvdW50LGRlcGVuZGVuY3lEZXRlY3Rpb25Db250ZXh0PXtjb21wdXRlZE9ic2VydmFibGU6Y29tcHV0ZWRPYnNlcnZhYmxlLGRpc3Bvc2FsQ2FuZGlkYXRlczpzdGF0ZS5kZXBlbmRlbmN5VHJhY2tpbmcsZGlzcG9zYWxDb3VudDpzdGF0ZS5kZXBlbmRlbmNpZXNDb3VudH07a28uZGVwZW5kZW5jeURldGVjdGlvbi5iZWdpbih7Y2FsbGJhY2tUYXJnZXQ6ZGVwZW5kZW5jeURldGVjdGlvbkNvbnRleHQsY2FsbGJhY2s6Y29tcHV0ZWRCZWdpbkRlcGVuZGVuY3lEZXRlY3Rpb25DYWxsYmFjayxjb21wdXRlZDpjb21wdXRlZE9ic2VydmFibGUsaXNJbml0aWFsOmlzSW5pdGlhbH0pO3N0YXRlLmRlcGVuZGVuY3lUcmFja2luZz17fTtzdGF0ZS5kZXBlbmRlbmNpZXNDb3VudD0wO3ZhciBuZXdWYWx1ZT10aGlzLmV2YWx1YXRlSW1tZWRpYXRlX0NhbGxSZWFkVGhlbkVuZERlcGVuZGVuY3lEZXRlY3Rpb24oc3RhdGUsZGVwZW5kZW5jeURldGVjdGlvbkNvbnRleHQpO2lmKCFzdGF0ZS5kZXBlbmRlbmNpZXNDb3VudCl7Y29tcHV0ZWRPYnNlcnZhYmxlLmRpc3Bvc2UoKTtjaGFuZ2VkPXRydWU7fWVsc2V7Y2hhbmdlZD1jb21wdXRlZE9ic2VydmFibGUuaXNEaWZmZXJlbnQoc3RhdGUubGF0ZXN0VmFsdWUsbmV3VmFsdWUpO30KaWYoY2hhbmdlZCl7aWYoIXN0YXRlLmlzU2xlZXBpbmcpe2NvbXB1dGVkT2JzZXJ2YWJsZVsibm90aWZ5U3Vic2NyaWJlcnMiXShzdGF0ZS5sYXRlc3RWYWx1ZSwiYmVmb3JlQ2hhbmdlIik7fWVsc2V7Y29tcHV0ZWRPYnNlcnZhYmxlLnVwZGF0ZVZlcnNpb24oKTt9CnN0YXRlLmxhdGVzdFZhbHVlPW5ld1ZhbHVlO2lmKERFQlVHKWNvbXB1dGVkT2JzZXJ2YWJsZS5fbGF0ZXN0VmFsdWU9bmV3VmFsdWU7Y29tcHV0ZWRPYnNlcnZhYmxlWyJub3RpZnlTdWJzY3JpYmVycyJdKHN0YXRlLmxhdGVzdFZhbHVlLCJzcGVjdGF0ZSIpO2lmKCFzdGF0ZS5pc1NsZWVwaW5nJiZub3RpZnlDaGFuZ2Upe2NvbXB1dGVkT2JzZXJ2YWJsZVsibm90aWZ5U3Vic2NyaWJlcnMiXShzdGF0ZS5sYXRlc3RWYWx1ZSk7fQppZihjb21wdXRlZE9ic2VydmFibGUuX3JlY29yZFVwZGF0ZSl7Y29tcHV0ZWRPYnNlcnZhYmxlLl9yZWNvcmRVcGRhdGUoKTt9fQppZihpc0luaXRpYWwpe2NvbXB1dGVkT2JzZXJ2YWJsZVsibm90aWZ5U3Vic2NyaWJlcnMiXShzdGF0ZS5sYXRlc3RWYWx1ZSwiYXdha2UiKTt9CnJldHVybiBjaGFuZ2VkO30sZXZhbHVhdGVJbW1lZGlhdGVfQ2FsbFJlYWRUaGVuRW5kRGVwZW5kZW5jeURldGVjdGlvbjpmdW5jdGlvbihzdGF0ZSxkZXBlbmRlbmN5RGV0ZWN0aW9uQ29udGV4dCl7dHJ5e3ZhciByZWFkRnVuY3Rpb249c3RhdGUucmVhZEZ1bmN0aW9uO3JldHVybiBzdGF0ZS5ldmFsdWF0b3JGdW5jdGlvblRhcmdldD9yZWFkRnVuY3Rpb24uY2FsbChzdGF0ZS5ldmFsdWF0b3JGdW5jdGlvblRhcmdldCk6cmVhZEZ1bmN0aW9uKCk7fWZpbmFsbHl7a28uZGVwZW5kZW5jeURldGVjdGlvbi5lbmQoKTtpZihkZXBlbmRlbmN5RGV0ZWN0aW9uQ29udGV4dC5kaXNwb3NhbENvdW50JiYhc3RhdGUuaXNTbGVlcGluZyl7a28udXRpbHMub2JqZWN0Rm9yRWFjaChkZXBlbmRlbmN5RGV0ZWN0aW9uQ29udGV4dC5kaXNwb3NhbENhbmRpZGF0ZXMsY29tcHV0ZWREaXNwb3NlRGVwZW5kZW5jeUNhbGxiYWNrKTt9CnN0YXRlLmlzU3RhbGU9c3RhdGUuaXNEaXJ0eT1mYWxzZTt9fSxwZWVrOmZ1bmN0aW9uKGV2YWx1YXRlKXt2YXIgc3RhdGU9dGhpc1tjb21wdXRlZFN0YXRlXTtpZigoc3RhdGUuaXNEaXJ0eSYmKGV2YWx1YXRlfHwhc3RhdGUuZGVwZW5kZW5jaWVzQ291bnQpKXx8KHN0YXRlLmlzU2xlZXBpbmcmJnRoaXMuaGF2ZURlcGVuZGVuY2llc0NoYW5nZWQoKSkpe3RoaXMuZXZhbHVhdGVJbW1lZGlhdGUoKTt9CnJldHVybiBzdGF0ZS5sYXRlc3RWYWx1ZTt9LGxpbWl0OmZ1bmN0aW9uKGxpbWl0RnVuY3Rpb24pe2tvLnN1YnNjcmliYWJsZVsnZm4nXS5saW1pdC5jYWxsKHRoaXMsbGltaXRGdW5jdGlvbik7dGhpcy5fZXZhbElmQ2hhbmdlZD1mdW5jdGlvbigpe2lmKCF0aGlzW2NvbXB1dGVkU3RhdGVdLmlzU2xlZXBpbmcpe2lmKHRoaXNbY29tcHV0ZWRTdGF0ZV0uaXNTdGFsZSl7dGhpcy5ldmFsdWF0ZUltbWVkaWF0ZSgpO31lbHNle3RoaXNbY29tcHV0ZWRTdGF0ZV0uaXNEaXJ0eT1mYWxzZTt9fQpyZXR1cm4gdGhpc1tjb21wdXRlZFN0YXRlXS5sYXRlc3RWYWx1ZTt9O3RoaXMuX2V2YWxEZWxheWVkPWZ1bmN0aW9uKGlzQ2hhbmdlKXt0aGlzLl9saW1pdEJlZm9yZUNoYW5nZSh0aGlzW2NvbXB1dGVkU3RhdGVdLmxhdGVzdFZhbHVlKTt0aGlzW2NvbXB1dGVkU3RhdGVdLmlzRGlydHk9dHJ1ZTtpZihpc0NoYW5nZSl7dGhpc1tjb21wdXRlZFN0YXRlXS5pc1N0YWxlPXRydWU7fQp0aGlzLl9saW1pdENoYW5nZSh0aGlzLCFpc0NoYW5nZSk7fTt9LGRpc3Bvc2U6ZnVuY3Rpb24oKXt2YXIgc3RhdGU9dGhpc1tjb21wdXRlZFN0YXRlXTtpZighc3RhdGUuaXNTbGVlcGluZyYmc3RhdGUuZGVwZW5kZW5jeVRyYWNraW5nKXtrby51dGlscy5vYmplY3RGb3JFYWNoKHN0YXRlLmRlcGVuZGVuY3lUcmFja2luZyxmdW5jdGlvbihpZCxkZXBlbmRlbmN5KXtpZihkZXBlbmRlbmN5LmRpc3Bvc2UpCmRlcGVuZGVuY3kuZGlzcG9zZSgpO30pO30KaWYoc3RhdGUuZGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkJiZzdGF0ZS5kb21Ob2RlRGlzcG9zYWxDYWxsYmFjayl7a28udXRpbHMuZG9tTm9kZURpc3Bvc2FsLnJlbW92ZURpc3Bvc2VDYWxsYmFjayhzdGF0ZS5kaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQsc3RhdGUuZG9tTm9kZURpc3Bvc2FsQ2FsbGJhY2spO30Kc3RhdGUuZGVwZW5kZW5jeVRyYWNraW5nPXVuZGVmaW5lZDtzdGF0ZS5kZXBlbmRlbmNpZXNDb3VudD0wO3N0YXRlLmlzRGlzcG9zZWQ9dHJ1ZTtzdGF0ZS5pc1N0YWxlPWZhbHNlO3N0YXRlLmlzRGlydHk9ZmFsc2U7c3RhdGUuaXNTbGVlcGluZz1mYWxzZTtzdGF0ZS5kaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQ9dW5kZWZpbmVkO3N0YXRlLmRpc3Bvc2VXaGVuPXVuZGVmaW5lZDtzdGF0ZS5yZWFkRnVuY3Rpb249dW5kZWZpbmVkO2lmKCF0aGlzLmhhc1dyaXRlRnVuY3Rpb24pe3N0YXRlLmV2YWx1YXRvckZ1bmN0aW9uVGFyZ2V0PXVuZGVmaW5lZDt9fX07dmFyIHB1cmVDb21wdXRlZE92ZXJyaWRlcz17YmVmb3JlU3Vic2NyaXB0aW9uQWRkOmZ1bmN0aW9uKGV2ZW50KXt2YXIgY29tcHV0ZWRPYnNlcnZhYmxlPXRoaXMsc3RhdGU9Y29tcHV0ZWRPYnNlcnZhYmxlW2NvbXB1dGVkU3RhdGVdO2lmKCFzdGF0ZS5pc0Rpc3Bvc2VkJiZzdGF0ZS5pc1NsZWVwaW5nJiZldmVudD09J2NoYW5nZScpe3N0YXRlLmlzU2xlZXBpbmc9ZmFsc2U7aWYoc3RhdGUuaXNTdGFsZXx8Y29tcHV0ZWRPYnNlcnZhYmxlLmhhdmVEZXBlbmRlbmNpZXNDaGFuZ2VkKCkpe3N0YXRlLmRlcGVuZGVuY3lUcmFja2luZz1udWxsO3N0YXRlLmRlcGVuZGVuY2llc0NvdW50PTA7aWYoY29tcHV0ZWRPYnNlcnZhYmxlLmV2YWx1YXRlSW1tZWRpYXRlKCkpe2NvbXB1dGVkT2JzZXJ2YWJsZS51cGRhdGVWZXJzaW9uKCk7fX1lbHNle3ZhciBkZXBlbmRlbmNpZXNPcmRlcj1bXTtrby51dGlscy5vYmplY3RGb3JFYWNoKHN0YXRlLmRlcGVuZGVuY3lUcmFja2luZyxmdW5jdGlvbihpZCxkZXBlbmRlbmN5KXtkZXBlbmRlbmNpZXNPcmRlcltkZXBlbmRlbmN5Ll9vcmRlcl09aWQ7fSk7a28udXRpbHMuYXJyYXlGb3JFYWNoKGRlcGVuZGVuY2llc09yZGVyLGZ1bmN0aW9uKGlkLG9yZGVyKXt2YXIgZGVwZW5kZW5jeT1zdGF0ZS5kZXBlbmRlbmN5VHJhY2tpbmdbaWRdLHN1YnNjcmlwdGlvbj1jb21wdXRlZE9ic2VydmFibGUuc3Vic2NyaWJlVG9EZXBlbmRlbmN5KGRlcGVuZGVuY3kuX3RhcmdldCk7c3Vic2NyaXB0aW9uLl9vcmRlcj1vcmRlcjtzdWJzY3JpcHRpb24uX3ZlcnNpb249ZGVwZW5kZW5jeS5fdmVyc2lvbjtzdGF0ZS5kZXBlbmRlbmN5VHJhY2tpbmdbaWRdPXN1YnNjcmlwdGlvbjt9KTtpZihjb21wdXRlZE9ic2VydmFibGUuaGF2ZURlcGVuZGVuY2llc0NoYW5nZWQoKSl7aWYoY29tcHV0ZWRPYnNlcnZhYmxlLmV2YWx1YXRlSW1tZWRpYXRlKCkpe2NvbXB1dGVkT2JzZXJ2YWJsZS51cGRhdGVWZXJzaW9uKCk7fX19CmlmKCFzdGF0ZS5pc0Rpc3Bvc2VkKXtjb21wdXRlZE9ic2VydmFibGVbIm5vdGlmeVN1YnNjcmliZXJzIl0oc3RhdGUubGF0ZXN0VmFsdWUsImF3YWtlIik7fX19LGFmdGVyU3Vic2NyaXB0aW9uUmVtb3ZlOmZ1bmN0aW9uKGV2ZW50KXt2YXIgc3RhdGU9dGhpc1tjb21wdXRlZFN0YXRlXTtpZighc3RhdGUuaXNEaXNwb3NlZCYmZXZlbnQ9PSdjaGFuZ2UnJiYhdGhpcy5oYXNTdWJzY3JpcHRpb25zRm9yRXZlbnQoJ2NoYW5nZScpKXtrby51dGlscy5vYmplY3RGb3JFYWNoKHN0YXRlLmRlcGVuZGVuY3lUcmFja2luZyxmdW5jdGlvbihpZCxkZXBlbmRlbmN5KXtpZihkZXBlbmRlbmN5LmRpc3Bvc2Upe3N0YXRlLmRlcGVuZGVuY3lUcmFja2luZ1tpZF09e190YXJnZXQ6ZGVwZW5kZW5jeS5fdGFyZ2V0LF9vcmRlcjpkZXBlbmRlbmN5Ll9vcmRlcixfdmVyc2lvbjpkZXBlbmRlbmN5Ll92ZXJzaW9ufTtkZXBlbmRlbmN5LmRpc3Bvc2UoKTt9fSk7c3RhdGUuaXNTbGVlcGluZz10cnVlO3RoaXNbIm5vdGlmeVN1YnNjcmliZXJzIl0odW5kZWZpbmVkLCJhc2xlZXAiKTt9fSxnZXRWZXJzaW9uOmZ1bmN0aW9uKCl7dmFyIHN0YXRlPXRoaXNbY29tcHV0ZWRTdGF0ZV07aWYoc3RhdGUuaXNTbGVlcGluZyYmKHN0YXRlLmlzU3RhbGV8fHRoaXMuaGF2ZURlcGVuZGVuY2llc0NoYW5nZWQoKSkpe3RoaXMuZXZhbHVhdGVJbW1lZGlhdGUoKTt9CnJldHVybiBrby5zdWJzY3JpYmFibGVbJ2ZuJ10uZ2V0VmVyc2lvbi5jYWxsKHRoaXMpO319O3ZhciBkZWZlckV2YWx1YXRpb25PdmVycmlkZXM9e2JlZm9yZVN1YnNjcmlwdGlvbkFkZDpmdW5jdGlvbihldmVudCl7aWYoZXZlbnQ9PSdjaGFuZ2UnfHxldmVudD09J2JlZm9yZUNoYW5nZScpe3RoaXMucGVlaygpO319fTtpZihrby51dGlscy5jYW5TZXRQcm90b3R5cGUpe2tvLnV0aWxzLnNldFByb3RvdHlwZU9mKGNvbXB1dGVkRm4sa28uc3Vic2NyaWJhYmxlWydmbiddKTt9CnZhciBwcm90b1Byb3A9a28ub2JzZXJ2YWJsZS5wcm90b1Byb3BlcnR5O2NvbXB1dGVkRm5bcHJvdG9Qcm9wXT1rby5jb21wdXRlZDtrby5pc0NvbXB1dGVkPWZ1bmN0aW9uKGluc3RhbmNlKXtyZXR1cm4odHlwZW9mIGluc3RhbmNlPT0nZnVuY3Rpb24nJiZpbnN0YW5jZVtwcm90b1Byb3BdPT09Y29tcHV0ZWRGbltwcm90b1Byb3BdKTt9O2tvLmlzUHVyZUNvbXB1dGVkPWZ1bmN0aW9uKGluc3RhbmNlKXtyZXR1cm4ga28uaXNDb21wdXRlZChpbnN0YW5jZSkmJmluc3RhbmNlW2NvbXB1dGVkU3RhdGVdJiZpbnN0YW5jZVtjb21wdXRlZFN0YXRlXS5wdXJlO307a28uZXhwb3J0U3ltYm9sKCdjb21wdXRlZCcsa28uY29tcHV0ZWQpO2tvLmV4cG9ydFN5bWJvbCgnZGVwZW5kZW50T2JzZXJ2YWJsZScsa28uY29tcHV0ZWQpO2tvLmV4cG9ydFN5bWJvbCgnaXNDb21wdXRlZCcsa28uaXNDb21wdXRlZCk7a28uZXhwb3J0U3ltYm9sKCdpc1B1cmVDb21wdXRlZCcsa28uaXNQdXJlQ29tcHV0ZWQpO2tvLmV4cG9ydFN5bWJvbCgnY29tcHV0ZWQuZm4nLGNvbXB1dGVkRm4pO2tvLmV4cG9ydFByb3BlcnR5KGNvbXB1dGVkRm4sJ3BlZWsnLGNvbXB1dGVkRm4ucGVlayk7a28uZXhwb3J0UHJvcGVydHkoY29tcHV0ZWRGbiwnZGlzcG9zZScsY29tcHV0ZWRGbi5kaXNwb3NlKTtrby5leHBvcnRQcm9wZXJ0eShjb21wdXRlZEZuLCdpc0FjdGl2ZScsY29tcHV0ZWRGbi5pc0FjdGl2ZSk7a28uZXhwb3J0UHJvcGVydHkoY29tcHV0ZWRGbiwnZ2V0RGVwZW5kZW5jaWVzQ291bnQnLGNvbXB1dGVkRm4uZ2V0RGVwZW5kZW5jaWVzQ291bnQpO2tvLmV4cG9ydFByb3BlcnR5KGNvbXB1dGVkRm4sJ2dldERlcGVuZGVuY2llcycsY29tcHV0ZWRGbi5nZXREZXBlbmRlbmNpZXMpO2tvLnB1cmVDb21wdXRlZD1mdW5jdGlvbihldmFsdWF0b3JGdW5jdGlvbk9yT3B0aW9ucyxldmFsdWF0b3JGdW5jdGlvblRhcmdldCl7aWYodHlwZW9mIGV2YWx1YXRvckZ1bmN0aW9uT3JPcHRpb25zPT09J2Z1bmN0aW9uJyl7cmV0dXJuIGtvLmNvbXB1dGVkKGV2YWx1YXRvckZ1bmN0aW9uT3JPcHRpb25zLGV2YWx1YXRvckZ1bmN0aW9uVGFyZ2V0LHsncHVyZSc6dHJ1ZX0pO31lbHNle2V2YWx1YXRvckZ1bmN0aW9uT3JPcHRpb25zPWtvLnV0aWxzLmV4dGVuZCh7fSxldmFsdWF0b3JGdW5jdGlvbk9yT3B0aW9ucyk7ZXZhbHVhdG9yRnVuY3Rpb25Pck9wdGlvbnNbJ3B1cmUnXT10cnVlO3JldHVybiBrby5jb21wdXRlZChldmFsdWF0b3JGdW5jdGlvbk9yT3B0aW9ucyxldmFsdWF0b3JGdW5jdGlvblRhcmdldCk7fX0Ka28uZXhwb3J0U3ltYm9sKCdwdXJlQ29tcHV0ZWQnLGtvLnB1cmVDb21wdXRlZCk7KGZ1bmN0aW9uKCl7dmFyIG1heE5lc3RlZE9ic2VydmFibGVEZXB0aD0xMDtrby50b0pTPWZ1bmN0aW9uKHJvb3RPYmplY3Qpe2lmKGFyZ3VtZW50cy5sZW5ndGg9PTApCnRocm93IG5ldyBFcnJvcigiV2hlbiBjYWxsaW5nIGtvLnRvSlMsIHBhc3MgdGhlIG9iamVjdCB5b3Ugd2FudCB0byBjb252ZXJ0LiIpO3JldHVybiBtYXBKc09iamVjdEdyYXBoKHJvb3RPYmplY3QsZnVuY3Rpb24odmFsdWVUb01hcCl7Zm9yKHZhciBpPTA7a28uaXNPYnNlcnZhYmxlKHZhbHVlVG9NYXApJiYoaTxtYXhOZXN0ZWRPYnNlcnZhYmxlRGVwdGgpO2krKykKdmFsdWVUb01hcD12YWx1ZVRvTWFwKCk7cmV0dXJuIHZhbHVlVG9NYXA7fSk7fTtrby50b0pTT049ZnVuY3Rpb24ocm9vdE9iamVjdCxyZXBsYWNlcixzcGFjZSl7dmFyIHBsYWluSmF2YVNjcmlwdE9iamVjdD1rby50b0pTKHJvb3RPYmplY3QpO3JldHVybiBrby51dGlscy5zdHJpbmdpZnlKc29uKHBsYWluSmF2YVNjcmlwdE9iamVjdCxyZXBsYWNlcixzcGFjZSk7fTtmdW5jdGlvbiBtYXBKc09iamVjdEdyYXBoKHJvb3RPYmplY3QsbWFwSW5wdXRDYWxsYmFjayx2aXNpdGVkT2JqZWN0cyl7dmlzaXRlZE9iamVjdHM9dmlzaXRlZE9iamVjdHN8fG5ldyBvYmplY3RMb29rdXAoKTtyb290T2JqZWN0PW1hcElucHV0Q2FsbGJhY2socm9vdE9iamVjdCk7dmFyIGNhbkhhdmVQcm9wZXJ0aWVzPSh0eXBlb2Ygcm9vdE9iamVjdD09Im9iamVjdCIpJiYocm9vdE9iamVjdCE9PW51bGwpJiYocm9vdE9iamVjdCE9PXVuZGVmaW5lZCkmJighKHJvb3RPYmplY3QgaW5zdGFuY2VvZiBSZWdFeHApKSYmKCEocm9vdE9iamVjdCBpbnN0YW5jZW9mIERhdGUpKSYmKCEocm9vdE9iamVjdCBpbnN0YW5jZW9mIFN0cmluZykpJiYoIShyb290T2JqZWN0IGluc3RhbmNlb2YgTnVtYmVyKSkmJighKHJvb3RPYmplY3QgaW5zdGFuY2VvZiBCb29sZWFuKSk7aWYoIWNhbkhhdmVQcm9wZXJ0aWVzKQpyZXR1cm4gcm9vdE9iamVjdDt2YXIgb3V0cHV0UHJvcGVydGllcz1yb290T2JqZWN0IGluc3RhbmNlb2YgQXJyYXk/W106e307dmlzaXRlZE9iamVjdHMuc2F2ZShyb290T2JqZWN0LG91dHB1dFByb3BlcnRpZXMpO3Zpc2l0UHJvcGVydGllc09yQXJyYXlFbnRyaWVzKHJvb3RPYmplY3QsZnVuY3Rpb24oaW5kZXhlcil7dmFyIHByb3BlcnR5VmFsdWU9bWFwSW5wdXRDYWxsYmFjayhyb290T2JqZWN0W2luZGV4ZXJdKTtzd2l0Y2godHlwZW9mIHByb3BlcnR5VmFsdWUpe2Nhc2UiYm9vbGVhbiI6Y2FzZSJudW1iZXIiOmNhc2Uic3RyaW5nIjpjYXNlImZ1bmN0aW9uIjpvdXRwdXRQcm9wZXJ0aWVzW2luZGV4ZXJdPXByb3BlcnR5VmFsdWU7YnJlYWs7Y2FzZSJvYmplY3QiOmNhc2UidW5kZWZpbmVkIjp2YXIgcHJldmlvdXNseU1hcHBlZFZhbHVlPXZpc2l0ZWRPYmplY3RzLmdldChwcm9wZXJ0eVZhbHVlKTtvdXRwdXRQcm9wZXJ0aWVzW2luZGV4ZXJdPShwcmV2aW91c2x5TWFwcGVkVmFsdWUhPT11bmRlZmluZWQpP3ByZXZpb3VzbHlNYXBwZWRWYWx1ZTptYXBKc09iamVjdEdyYXBoKHByb3BlcnR5VmFsdWUsbWFwSW5wdXRDYWxsYmFjayx2aXNpdGVkT2JqZWN0cyk7YnJlYWs7fX0pO3JldHVybiBvdXRwdXRQcm9wZXJ0aWVzO30KZnVuY3Rpb24gdmlzaXRQcm9wZXJ0aWVzT3JBcnJheUVudHJpZXMocm9vdE9iamVjdCx2aXNpdG9yQ2FsbGJhY2spe2lmKHJvb3RPYmplY3QgaW5zdGFuY2VvZiBBcnJheSl7Zm9yKHZhciBpPTA7aTxyb290T2JqZWN0Lmxlbmd0aDtpKyspCnZpc2l0b3JDYWxsYmFjayhpKTtpZih0eXBlb2Ygcm9vdE9iamVjdFsndG9KU09OJ109PSdmdW5jdGlvbicpCnZpc2l0b3JDYWxsYmFjaygndG9KU09OJyk7fWVsc2V7Zm9yKHZhciBwcm9wZXJ0eU5hbWUgaW4gcm9vdE9iamVjdCl7dmlzaXRvckNhbGxiYWNrKHByb3BlcnR5TmFtZSk7fX19O2Z1bmN0aW9uIG9iamVjdExvb2t1cCgpe3RoaXMua2V5cz1bXTt0aGlzLnZhbHVlcz1bXTt9O29iamVjdExvb2t1cC5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOm9iamVjdExvb2t1cCxzYXZlOmZ1bmN0aW9uKGtleSx2YWx1ZSl7dmFyIGV4aXN0aW5nSW5kZXg9a28udXRpbHMuYXJyYXlJbmRleE9mKHRoaXMua2V5cyxrZXkpO2lmKGV4aXN0aW5nSW5kZXg+PTApCnRoaXMudmFsdWVzW2V4aXN0aW5nSW5kZXhdPXZhbHVlO2Vsc2V7dGhpcy5rZXlzLnB1c2goa2V5KTt0aGlzLnZhbHVlcy5wdXNoKHZhbHVlKTt9fSxnZXQ6ZnVuY3Rpb24oa2V5KXt2YXIgZXhpc3RpbmdJbmRleD1rby51dGlscy5hcnJheUluZGV4T2YodGhpcy5rZXlzLGtleSk7cmV0dXJuKGV4aXN0aW5nSW5kZXg+PTApP3RoaXMudmFsdWVzW2V4aXN0aW5nSW5kZXhdOnVuZGVmaW5lZDt9fTt9KSgpO2tvLmV4cG9ydFN5bWJvbCgndG9KUycsa28udG9KUyk7a28uZXhwb3J0U3ltYm9sKCd0b0pTT04nLGtvLnRvSlNPTik7a28ud2hlbj1mdW5jdGlvbihwcmVkaWNhdGUsY2FsbGJhY2ssY29udGV4dCl7ZnVuY3Rpb24ga293aGVuKHJlc29sdmUpe3ZhciBvYnNlcnZhYmxlPWtvLnB1cmVDb21wdXRlZChwcmVkaWNhdGUsY29udGV4dCkuZXh0ZW5kKHtub3RpZnk6J2Fsd2F5cyd9KTt2YXIgc3Vic2NyaXB0aW9uPW9ic2VydmFibGUuc3Vic2NyaWJlKGZ1bmN0aW9uKHZhbHVlKXtpZih2YWx1ZSl7c3Vic2NyaXB0aW9uLmRpc3Bvc2UoKTtyZXNvbHZlKHZhbHVlKTt9fSk7b2JzZXJ2YWJsZVsnbm90aWZ5U3Vic2NyaWJlcnMnXShvYnNlcnZhYmxlLnBlZWsoKSk7cmV0dXJuIHN1YnNjcmlwdGlvbjt9CmlmKHR5cGVvZiBQcm9taXNlPT09ImZ1bmN0aW9uIiYmIWNhbGxiYWNrKXtyZXR1cm4gbmV3IFByb21pc2Uoa293aGVuKTt9ZWxzZXtyZXR1cm4ga293aGVuKGNhbGxiYWNrLmJpbmQoY29udGV4dCkpO319O2tvLmV4cG9ydFN5bWJvbCgnd2hlbicsa28ud2hlbik7KGZ1bmN0aW9uKCl7dmFyIGhhc0RvbURhdGFFeHBhbmRvUHJvcGVydHk9J19fa29fX2hhc0RvbURhdGFPcHRpb25WYWx1ZV9fJztrby5zZWxlY3RFeHRlbnNpb25zPXtyZWFkVmFsdWU6ZnVuY3Rpb24oZWxlbWVudCl7c3dpdGNoKGtvLnV0aWxzLnRhZ05hbWVMb3dlcihlbGVtZW50KSl7Y2FzZSdvcHRpb24nOmlmKGVsZW1lbnRbaGFzRG9tRGF0YUV4cGFuZG9Qcm9wZXJ0eV09PT10cnVlKQpyZXR1cm4ga28udXRpbHMuZG9tRGF0YS5nZXQoZWxlbWVudCxrby5iaW5kaW5nSGFuZGxlcnMub3B0aW9ucy5vcHRpb25WYWx1ZURvbURhdGFLZXkpO3JldHVybiBrby51dGlscy5pZVZlcnNpb248PTc/KGVsZW1lbnQuZ2V0QXR0cmlidXRlTm9kZSgndmFsdWUnKSYmZWxlbWVudC5nZXRBdHRyaWJ1dGVOb2RlKCd2YWx1ZScpLnNwZWNpZmllZD9lbGVtZW50LnZhbHVlOmVsZW1lbnQudGV4dCk6ZWxlbWVudC52YWx1ZTtjYXNlJ3NlbGVjdCc6cmV0dXJuIGVsZW1lbnQuc2VsZWN0ZWRJbmRleD49MD9rby5zZWxlY3RFeHRlbnNpb25zLnJlYWRWYWx1ZShlbGVtZW50Lm9wdGlvbnNbZWxlbWVudC5zZWxlY3RlZEluZGV4XSk6dW5kZWZpbmVkO2RlZmF1bHQ6cmV0dXJuIGVsZW1lbnQudmFsdWU7fX0sd3JpdGVWYWx1ZTpmdW5jdGlvbihlbGVtZW50LHZhbHVlLGFsbG93VW5zZXQpe3N3aXRjaChrby51dGlscy50YWdOYW1lTG93ZXIoZWxlbWVudCkpe2Nhc2Unb3B0aW9uJzppZih0eXBlb2YgdmFsdWU9PT0ic3RyaW5nIil7a28udXRpbHMuZG9tRGF0YS5zZXQoZWxlbWVudCxrby5iaW5kaW5nSGFuZGxlcnMub3B0aW9ucy5vcHRpb25WYWx1ZURvbURhdGFLZXksdW5kZWZpbmVkKTtpZihoYXNEb21EYXRhRXhwYW5kb1Byb3BlcnR5IGluIGVsZW1lbnQpe2RlbGV0ZSBlbGVtZW50W2hhc0RvbURhdGFFeHBhbmRvUHJvcGVydHldO30KZWxlbWVudC52YWx1ZT12YWx1ZTt9CmVsc2V7a28udXRpbHMuZG9tRGF0YS5zZXQoZWxlbWVudCxrby5iaW5kaW5nSGFuZGxlcnMub3B0aW9ucy5vcHRpb25WYWx1ZURvbURhdGFLZXksdmFsdWUpO2VsZW1lbnRbaGFzRG9tRGF0YUV4cGFuZG9Qcm9wZXJ0eV09dHJ1ZTtlbGVtZW50LnZhbHVlPXR5cGVvZiB2YWx1ZT09PSJudW1iZXIiP3ZhbHVlOiIiO30KYnJlYWs7Y2FzZSdzZWxlY3QnOmlmKHZhbHVlPT09IiJ8fHZhbHVlPT09bnVsbCkKdmFsdWU9dW5kZWZpbmVkO3ZhciBzZWxlY3Rpb249LTE7Zm9yKHZhciBpPTAsbj1lbGVtZW50Lm9wdGlvbnMubGVuZ3RoLG9wdGlvblZhbHVlO2k8bjsrK2kpe29wdGlvblZhbHVlPWtvLnNlbGVjdEV4dGVuc2lvbnMucmVhZFZhbHVlKGVsZW1lbnQub3B0aW9uc1tpXSk7aWYob3B0aW9uVmFsdWU9PXZhbHVlfHwob3B0aW9uVmFsdWU9PT0iIiYmdmFsdWU9PT11bmRlZmluZWQpKXtzZWxlY3Rpb249aTticmVhazt9fQppZihhbGxvd1Vuc2V0fHxzZWxlY3Rpb24+PTB8fCh2YWx1ZT09PXVuZGVmaW5lZCYmZWxlbWVudC5zaXplPjEpKXtlbGVtZW50LnNlbGVjdGVkSW5kZXg9c2VsZWN0aW9uO2lmKGtvLnV0aWxzLmllVmVyc2lvbj09PTYpe2tvLnV0aWxzLnNldFRpbWVvdXQoZnVuY3Rpb24oKXtlbGVtZW50LnNlbGVjdGVkSW5kZXg9c2VsZWN0aW9uO30sMCk7fX0KYnJlYWs7ZGVmYXVsdDppZigodmFsdWU9PT1udWxsKXx8KHZhbHVlPT09dW5kZWZpbmVkKSkKdmFsdWU9IiI7ZWxlbWVudC52YWx1ZT12YWx1ZTticmVhazt9fX07fSkoKTtrby5leHBvcnRTeW1ib2woJ3NlbGVjdEV4dGVuc2lvbnMnLGtvLnNlbGVjdEV4dGVuc2lvbnMpO2tvLmV4cG9ydFN5bWJvbCgnc2VsZWN0RXh0ZW5zaW9ucy5yZWFkVmFsdWUnLGtvLnNlbGVjdEV4dGVuc2lvbnMucmVhZFZhbHVlKTtrby5leHBvcnRTeW1ib2woJ3NlbGVjdEV4dGVuc2lvbnMud3JpdGVWYWx1ZScsa28uc2VsZWN0RXh0ZW5zaW9ucy53cml0ZVZhbHVlKTtrby5leHByZXNzaW9uUmV3cml0aW5nPShmdW5jdGlvbigpe3ZhciBqYXZhU2NyaXB0UmVzZXJ2ZWRXb3Jkcz1bInRydWUiLCJmYWxzZSIsIm51bGwiLCJ1bmRlZmluZWQiXTt2YXIgamF2YVNjcmlwdEFzc2lnbm1lbnRUYXJnZXQ9L14oPzpbJF9hLXpdWyRcd10qfCguKykoXC5ccypbJF9hLXpdWyRcd10qfFxbLitcXSkpJC9pO2Z1bmN0aW9uIGdldFdyaXRlYWJsZVZhbHVlKGV4cHJlc3Npb24pe2lmKGtvLnV0aWxzLmFycmF5SW5kZXhPZihqYXZhU2NyaXB0UmVzZXJ2ZWRXb3JkcyxleHByZXNzaW9uKT49MCkKcmV0dXJuIGZhbHNlO3ZhciBtYXRjaD1leHByZXNzaW9uLm1hdGNoKGphdmFTY3JpcHRBc3NpZ25tZW50VGFyZ2V0KTtyZXR1cm4gbWF0Y2g9PT1udWxsP2ZhbHNlOm1hdGNoWzFdPygnT2JqZWN0KCcrbWF0Y2hbMV0rJyknK21hdGNoWzJdKTpleHByZXNzaW9uO30KdmFyIHNwZWNpYWxzPScsIlwnYHt9KCkvOltcXF0nLGJpbmRpbmdUb2tlbj1SZWdFeHAoWyciKD86XFxcXC58W14iXSkqIicsIicoPzpcXFxcLnxbXiddKSonIiwiYCg/OlxcXFwufFteYF0pKmAiLCIvXFwqKD86W14qXXxcXCorW14qL10pKlxcKisvIiwiLy8uKlxuIiwnLyg/OlxcXFwufFteL10pKy9cdyonLCdbXlxcczosL11bXicrc3BlY2lhbHMrJ10qW15cXHMnK3NwZWNpYWxzKyddJywnW15cXHNdJ10uam9pbignfCcpLCdnJyksZGl2aXNpb25Mb29rQmVoaW5kPS9bXF0pIidBLVphLXowLTlfJF0rJC8sa2V5d29yZFJlZ2V4TG9va0JlaGluZD17J2luJzoxLCdyZXR1cm4nOjEsJ3R5cGVvZic6MX07ZnVuY3Rpb24gcGFyc2VPYmplY3RMaXRlcmFsKG9iamVjdExpdGVyYWxTdHJpbmcpe3ZhciBzdHI9a28udXRpbHMuc3RyaW5nVHJpbShvYmplY3RMaXRlcmFsU3RyaW5nKTtpZihzdHIuY2hhckNvZGVBdCgwKT09PTEyMylzdHI9c3RyLnNsaWNlKDEsLTEpO3N0cis9IlxuLCI7dmFyIHJlc3VsdD1bXSx0b2tzPXN0ci5tYXRjaChiaW5kaW5nVG9rZW4pLGtleSx2YWx1ZXM9W10sZGVwdGg9MDtpZih0b2tzLmxlbmd0aD4xKXtmb3IodmFyIGk9MCx0b2s7dG9rPXRva3NbaV07KytpKXt2YXIgYz10b2suY2hhckNvZGVBdCgwKTtpZihjPT09NDQpe2lmKGRlcHRoPD0wKXtyZXN1bHQucHVzaCgoa2V5JiZ2YWx1ZXMubGVuZ3RoKT97a2V5OmtleSx2YWx1ZTp2YWx1ZXMuam9pbignJyl9OnsndW5rbm93bic6a2V5fHx2YWx1ZXMuam9pbignJyl9KTtrZXk9ZGVwdGg9MDt2YWx1ZXM9W107Y29udGludWU7fX1lbHNlIGlmKGM9PT01OCl7aWYoIWRlcHRoJiYha2V5JiZ2YWx1ZXMubGVuZ3RoPT09MSl7a2V5PXZhbHVlcy5wb3AoKTtjb250aW51ZTt9fWVsc2UgaWYoYz09PTQ3JiZ0b2subGVuZ3RoPjEmJih0b2suY2hhckNvZGVBdCgxKT09PTQ3fHx0b2suY2hhckNvZGVBdCgxKT09PTQyKSl7Y29udGludWU7fWVsc2UgaWYoYz09PTQ3JiZpJiZ0b2subGVuZ3RoPjEpe3ZhciBtYXRjaD10b2tzW2ktMV0ubWF0Y2goZGl2aXNpb25Mb29rQmVoaW5kKTtpZihtYXRjaCYmIWtleXdvcmRSZWdleExvb2tCZWhpbmRbbWF0Y2hbMF1dKXtzdHI9c3RyLnN1YnN0cihzdHIuaW5kZXhPZih0b2spKzEpO3Rva3M9c3RyLm1hdGNoKGJpbmRpbmdUb2tlbik7aT0tMTt0b2s9Jy8nO319ZWxzZSBpZihjPT09NDB8fGM9PT0xMjN8fGM9PT05MSl7KytkZXB0aDt9ZWxzZSBpZihjPT09NDF8fGM9PT0xMjV8fGM9PT05Myl7LS1kZXB0aDt9ZWxzZSBpZigha2V5JiYhdmFsdWVzLmxlbmd0aCYmKGM9PT0zNHx8Yz09PTM5KSl7dG9rPXRvay5zbGljZSgxLC0xKTt9CnZhbHVlcy5wdXNoKHRvayk7fQppZihkZXB0aD4wKXt0aHJvdyBFcnJvcigiVW5iYWxhbmNlZCBwYXJlbnRoZXNlcywgYnJhY2VzLCBvciBicmFja2V0cyIpO319CnJldHVybiByZXN1bHQ7fQp2YXIgdHdvV2F5QmluZGluZ3M9e307ZnVuY3Rpb24gcHJlUHJvY2Vzc0JpbmRpbmdzKGJpbmRpbmdzU3RyaW5nT3JLZXlWYWx1ZUFycmF5LGJpbmRpbmdPcHRpb25zKXtiaW5kaW5nT3B0aW9ucz1iaW5kaW5nT3B0aW9uc3x8e307ZnVuY3Rpb24gcHJvY2Vzc0tleVZhbHVlKGtleSx2YWwpe3ZhciB3cml0YWJsZVZhbDtmdW5jdGlvbiBjYWxsUHJlcHJvY2Vzc0hvb2sob2JqKXtyZXR1cm4ob2JqJiZvYmpbJ3ByZXByb2Nlc3MnXSk/KHZhbD1vYmpbJ3ByZXByb2Nlc3MnXSh2YWwsa2V5LHByb2Nlc3NLZXlWYWx1ZSkpOnRydWU7fQppZighYmluZGluZ1BhcmFtcyl7aWYoIWNhbGxQcmVwcm9jZXNzSG9vayhrb1snZ2V0QmluZGluZ0hhbmRsZXInXShrZXkpKSkKcmV0dXJuO2lmKHR3b1dheUJpbmRpbmdzW2tleV0mJih3cml0YWJsZVZhbD1nZXRXcml0ZWFibGVWYWx1ZSh2YWwpKSl7dmFyIHdyaXRlS2V5PXR5cGVvZiB0d29XYXlCaW5kaW5nc1trZXldPT0nc3RyaW5nJz90d29XYXlCaW5kaW5nc1trZXldOmtleTtwcm9wZXJ0eUFjY2Vzc29yUmVzdWx0U3RyaW5ncy5wdXNoKCInIit3cml0ZUtleSsiJzpmdW5jdGlvbihfeil7Iit3cml0YWJsZVZhbCsiPV96fSIpO319CmlmKG1ha2VWYWx1ZUFjY2Vzc29ycyl7dmFsPSdmdW5jdGlvbigpe3JldHVybiAnK3ZhbCsnIH0nO30KcmVzdWx0U3RyaW5ncy5wdXNoKCInIitrZXkrIic6Iit2YWwpO30KdmFyIHJlc3VsdFN0cmluZ3M9W10scHJvcGVydHlBY2Nlc3NvclJlc3VsdFN0cmluZ3M9W10sbWFrZVZhbHVlQWNjZXNzb3JzPWJpbmRpbmdPcHRpb25zWyd2YWx1ZUFjY2Vzc29ycyddLGJpbmRpbmdQYXJhbXM9YmluZGluZ09wdGlvbnNbJ2JpbmRpbmdQYXJhbXMnXSxrZXlWYWx1ZUFycmF5PXR5cGVvZiBiaW5kaW5nc1N0cmluZ09yS2V5VmFsdWVBcnJheT09PSJzdHJpbmciP3BhcnNlT2JqZWN0TGl0ZXJhbChiaW5kaW5nc1N0cmluZ09yS2V5VmFsdWVBcnJheSk6YmluZGluZ3NTdHJpbmdPcktleVZhbHVlQXJyYXk7a28udXRpbHMuYXJyYXlGb3JFYWNoKGtleVZhbHVlQXJyYXksZnVuY3Rpb24oa2V5VmFsdWUpe3Byb2Nlc3NLZXlWYWx1ZShrZXlWYWx1ZS5rZXl8fGtleVZhbHVlWyd1bmtub3duJ10sa2V5VmFsdWUudmFsdWUpO30pO2lmKHByb3BlcnR5QWNjZXNzb3JSZXN1bHRTdHJpbmdzLmxlbmd0aCkKcHJvY2Vzc0tleVZhbHVlKCdfa29fcHJvcGVydHlfd3JpdGVycycsInsiK3Byb3BlcnR5QWNjZXNzb3JSZXN1bHRTdHJpbmdzLmpvaW4oIiwiKSsiIH0iKTtyZXR1cm4gcmVzdWx0U3RyaW5ncy5qb2luKCIsIik7fQpyZXR1cm57YmluZGluZ1Jld3JpdGVWYWxpZGF0b3JzOltdLHR3b1dheUJpbmRpbmdzOnR3b1dheUJpbmRpbmdzLHBhcnNlT2JqZWN0TGl0ZXJhbDpwYXJzZU9iamVjdExpdGVyYWwscHJlUHJvY2Vzc0JpbmRpbmdzOnByZVByb2Nlc3NCaW5kaW5ncyxrZXlWYWx1ZUFycmF5Q29udGFpbnNLZXk6ZnVuY3Rpb24oa2V5VmFsdWVBcnJheSxrZXkpe2Zvcih2YXIgaT0wO2k8a2V5VmFsdWVBcnJheS5sZW5ndGg7aSsrKQppZihrZXlWYWx1ZUFycmF5W2ldWydrZXknXT09a2V5KQpyZXR1cm4gdHJ1ZTtyZXR1cm4gZmFsc2U7fSx3cml0ZVZhbHVlVG9Qcm9wZXJ0eTpmdW5jdGlvbihwcm9wZXJ0eSxhbGxCaW5kaW5ncyxrZXksdmFsdWUsY2hlY2tJZkRpZmZlcmVudCl7aWYoIXByb3BlcnR5fHwha28uaXNPYnNlcnZhYmxlKHByb3BlcnR5KSl7dmFyIHByb3BXcml0ZXJzPWFsbEJpbmRpbmdzLmdldCgnX2tvX3Byb3BlcnR5X3dyaXRlcnMnKTtpZihwcm9wV3JpdGVycyYmcHJvcFdyaXRlcnNba2V5XSkKcHJvcFdyaXRlcnNba2V5XSh2YWx1ZSk7fWVsc2UgaWYoa28uaXNXcml0ZWFibGVPYnNlcnZhYmxlKHByb3BlcnR5KSYmKCFjaGVja0lmRGlmZmVyZW50fHxwcm9wZXJ0eS5wZWVrKCkhPT12YWx1ZSkpe3Byb3BlcnR5KHZhbHVlKTt9fX07fSkoKTtrby5leHBvcnRTeW1ib2woJ2V4cHJlc3Npb25SZXdyaXRpbmcnLGtvLmV4cHJlc3Npb25SZXdyaXRpbmcpO2tvLmV4cG9ydFN5bWJvbCgnZXhwcmVzc2lvblJld3JpdGluZy5iaW5kaW5nUmV3cml0ZVZhbGlkYXRvcnMnLGtvLmV4cHJlc3Npb25SZXdyaXRpbmcuYmluZGluZ1Jld3JpdGVWYWxpZGF0b3JzKTtrby5leHBvcnRTeW1ib2woJ2V4cHJlc3Npb25SZXdyaXRpbmcucGFyc2VPYmplY3RMaXRlcmFsJyxrby5leHByZXNzaW9uUmV3cml0aW5nLnBhcnNlT2JqZWN0TGl0ZXJhbCk7a28uZXhwb3J0U3ltYm9sKCdleHByZXNzaW9uUmV3cml0aW5nLnByZVByb2Nlc3NCaW5kaW5ncycsa28uZXhwcmVzc2lvblJld3JpdGluZy5wcmVQcm9jZXNzQmluZGluZ3MpO2tvLmV4cG9ydFN5bWJvbCgnZXhwcmVzc2lvblJld3JpdGluZy5fdHdvV2F5QmluZGluZ3MnLGtvLmV4cHJlc3Npb25SZXdyaXRpbmcudHdvV2F5QmluZGluZ3MpO2tvLmV4cG9ydFN5bWJvbCgnanNvbkV4cHJlc3Npb25SZXdyaXRpbmcnLGtvLmV4cHJlc3Npb25SZXdyaXRpbmcpO2tvLmV4cG9ydFN5bWJvbCgnanNvbkV4cHJlc3Npb25SZXdyaXRpbmcuaW5zZXJ0UHJvcGVydHlBY2Nlc3NvcnNJbnRvSnNvbicsa28uZXhwcmVzc2lvblJld3JpdGluZy5wcmVQcm9jZXNzQmluZGluZ3MpOyhmdW5jdGlvbigpe3ZhciBjb21tZW50Tm9kZXNIYXZlVGV4dFByb3BlcnR5PWRvY3VtZW50JiZkb2N1bWVudC5jcmVhdGVDb21tZW50KCJ0ZXN0IikudGV4dD09PSI8IS0tdGVzdC0tPiI7dmFyIHN0YXJ0Q29tbWVudFJlZ2V4PWNvbW1lbnROb2Rlc0hhdmVUZXh0UHJvcGVydHk/L148IS0tXHMqa28oPzpccysoW1xzXFNdKykpP1xzKi0tPiQvOi9eXHMqa28oPzpccysoW1xzXFNdKykpP1xzKiQvO3ZhciBlbmRDb21tZW50UmVnZXg9Y29tbWVudE5vZGVzSGF2ZVRleHRQcm9wZXJ0eT8vXjwhLS1ccypcL2tvXHMqLS0+JC86L15ccypcL2tvXHMqJC87dmFyIGh0bWxUYWdzV2l0aE9wdGlvbmFsbHlDbG9zaW5nQ2hpbGRyZW49eyd1bCc6dHJ1ZSwnb2wnOnRydWV9O2Z1bmN0aW9uIGlzU3RhcnRDb21tZW50KG5vZGUpe3JldHVybihub2RlLm5vZGVUeXBlPT04KSYmc3RhcnRDb21tZW50UmVnZXgudGVzdChjb21tZW50Tm9kZXNIYXZlVGV4dFByb3BlcnR5P25vZGUudGV4dDpub2RlLm5vZGVWYWx1ZSk7fQpmdW5jdGlvbiBpc0VuZENvbW1lbnQobm9kZSl7cmV0dXJuKG5vZGUubm9kZVR5cGU9PTgpJiZlbmRDb21tZW50UmVnZXgudGVzdChjb21tZW50Tm9kZXNIYXZlVGV4dFByb3BlcnR5P25vZGUudGV4dDpub2RlLm5vZGVWYWx1ZSk7fQpmdW5jdGlvbiBpc1VubWF0Y2hlZEVuZENvbW1lbnQobm9kZSl7cmV0dXJuIGlzRW5kQ29tbWVudChub2RlKSYmIShrby51dGlscy5kb21EYXRhLmdldChub2RlLG1hdGNoZWRFbmRDb21tZW50RGF0YUtleSkpO30KdmFyIG1hdGNoZWRFbmRDb21tZW50RGF0YUtleT0iX19rb19tYXRjaGVkRW5kQ29tbWVudF9fIgpmdW5jdGlvbiBnZXRWaXJ0dWFsQ2hpbGRyZW4oc3RhcnRDb21tZW50LGFsbG93VW5iYWxhbmNlZCl7dmFyIGN1cnJlbnROb2RlPXN0YXJ0Q29tbWVudDt2YXIgZGVwdGg9MTt2YXIgY2hpbGRyZW49W107d2hpbGUoY3VycmVudE5vZGU9Y3VycmVudE5vZGUubmV4dFNpYmxpbmcpe2lmKGlzRW5kQ29tbWVudChjdXJyZW50Tm9kZSkpe2tvLnV0aWxzLmRvbURhdGEuc2V0KGN1cnJlbnROb2RlLG1hdGNoZWRFbmRDb21tZW50RGF0YUtleSx0cnVlKTtkZXB0aC0tO2lmKGRlcHRoPT09MCkKcmV0dXJuIGNoaWxkcmVuO30KY2hpbGRyZW4ucHVzaChjdXJyZW50Tm9kZSk7aWYoaXNTdGFydENvbW1lbnQoY3VycmVudE5vZGUpKQpkZXB0aCsrO30KaWYoIWFsbG93VW5iYWxhbmNlZCkKdGhyb3cgbmV3IEVycm9yKCJDYW5ub3QgZmluZCBjbG9zaW5nIGNvbW1lbnQgdGFnIHRvIG1hdGNoOiAiK3N0YXJ0Q29tbWVudC5ub2RlVmFsdWUpO3JldHVybiBudWxsO30KZnVuY3Rpb24gZ2V0TWF0Y2hpbmdFbmRDb21tZW50KHN0YXJ0Q29tbWVudCxhbGxvd1VuYmFsYW5jZWQpe3ZhciBhbGxWaXJ0dWFsQ2hpbGRyZW49Z2V0VmlydHVhbENoaWxkcmVuKHN0YXJ0Q29tbWVudCxhbGxvd1VuYmFsYW5jZWQpO2lmKGFsbFZpcnR1YWxDaGlsZHJlbil7aWYoYWxsVmlydHVhbENoaWxkcmVuLmxlbmd0aD4wKQpyZXR1cm4gYWxsVmlydHVhbENoaWxkcmVuW2FsbFZpcnR1YWxDaGlsZHJlbi5sZW5ndGgtMV0ubmV4dFNpYmxpbmc7cmV0dXJuIHN0YXJ0Q29tbWVudC5uZXh0U2libGluZzt9ZWxzZQpyZXR1cm4gbnVsbDt9CmZ1bmN0aW9uIGdldFVuYmFsYW5jZWRDaGlsZFRhZ3Mobm9kZSl7dmFyIGNoaWxkTm9kZT1ub2RlLmZpcnN0Q2hpbGQsY2FwdHVyZVJlbWFpbmluZz1udWxsO2lmKGNoaWxkTm9kZSl7ZG97aWYoY2FwdHVyZVJlbWFpbmluZykKY2FwdHVyZVJlbWFpbmluZy5wdXNoKGNoaWxkTm9kZSk7ZWxzZSBpZihpc1N0YXJ0Q29tbWVudChjaGlsZE5vZGUpKXt2YXIgbWF0Y2hpbmdFbmRDb21tZW50PWdldE1hdGNoaW5nRW5kQ29tbWVudChjaGlsZE5vZGUsdHJ1ZSk7aWYobWF0Y2hpbmdFbmRDb21tZW50KQpjaGlsZE5vZGU9bWF0Y2hpbmdFbmRDb21tZW50O2Vsc2UKY2FwdHVyZVJlbWFpbmluZz1bY2hpbGROb2RlXTt9ZWxzZSBpZihpc0VuZENvbW1lbnQoY2hpbGROb2RlKSl7Y2FwdHVyZVJlbWFpbmluZz1bY2hpbGROb2RlXTt9fXdoaWxlKGNoaWxkTm9kZT1jaGlsZE5vZGUubmV4dFNpYmxpbmcpO30KcmV0dXJuIGNhcHR1cmVSZW1haW5pbmc7fQprby52aXJ0dWFsRWxlbWVudHM9e2FsbG93ZWRCaW5kaW5nczp7fSxjaGlsZE5vZGVzOmZ1bmN0aW9uKG5vZGUpe3JldHVybiBpc1N0YXJ0Q29tbWVudChub2RlKT9nZXRWaXJ0dWFsQ2hpbGRyZW4obm9kZSk6bm9kZS5jaGlsZE5vZGVzO30sZW1wdHlOb2RlOmZ1bmN0aW9uKG5vZGUpe2lmKCFpc1N0YXJ0Q29tbWVudChub2RlKSkKa28udXRpbHMuZW1wdHlEb21Ob2RlKG5vZGUpO2Vsc2V7dmFyIHZpcnR1YWxDaGlsZHJlbj1rby52aXJ0dWFsRWxlbWVudHMuY2hpbGROb2Rlcyhub2RlKTtmb3IodmFyIGk9MCxqPXZpcnR1YWxDaGlsZHJlbi5sZW5ndGg7aTxqO2krKykKa28ucmVtb3ZlTm9kZSh2aXJ0dWFsQ2hpbGRyZW5baV0pO319LHNldERvbU5vZGVDaGlsZHJlbjpmdW5jdGlvbihub2RlLGNoaWxkTm9kZXMpe2lmKCFpc1N0YXJ0Q29tbWVudChub2RlKSkKa28udXRpbHMuc2V0RG9tTm9kZUNoaWxkcmVuKG5vZGUsY2hpbGROb2Rlcyk7ZWxzZXtrby52aXJ0dWFsRWxlbWVudHMuZW1wdHlOb2RlKG5vZGUpO3ZhciBlbmRDb21tZW50Tm9kZT1ub2RlLm5leHRTaWJsaW5nO2Zvcih2YXIgaT0wLGo9Y2hpbGROb2Rlcy5sZW5ndGg7aTxqO2krKykKZW5kQ29tbWVudE5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoY2hpbGROb2Rlc1tpXSxlbmRDb21tZW50Tm9kZSk7fX0scHJlcGVuZDpmdW5jdGlvbihjb250YWluZXJOb2RlLG5vZGVUb1ByZXBlbmQpe3ZhciBpbnNlcnRCZWZvcmVOb2RlO2lmKGlzU3RhcnRDb21tZW50KGNvbnRhaW5lck5vZGUpKXtpbnNlcnRCZWZvcmVOb2RlPWNvbnRhaW5lck5vZGUubmV4dFNpYmxpbmc7Y29udGFpbmVyTm9kZT1jb250YWluZXJOb2RlLnBhcmVudE5vZGU7fWVsc2V7aW5zZXJ0QmVmb3JlTm9kZT1jb250YWluZXJOb2RlLmZpcnN0Q2hpbGQ7fQppZighaW5zZXJ0QmVmb3JlTm9kZSl7Y29udGFpbmVyTm9kZS5hcHBlbmRDaGlsZChub2RlVG9QcmVwZW5kKTt9ZWxzZSBpZihub2RlVG9QcmVwZW5kIT09aW5zZXJ0QmVmb3JlTm9kZSl7Y29udGFpbmVyTm9kZS5pbnNlcnRCZWZvcmUobm9kZVRvUHJlcGVuZCxpbnNlcnRCZWZvcmVOb2RlKTt9fSxpbnNlcnRBZnRlcjpmdW5jdGlvbihjb250YWluZXJOb2RlLG5vZGVUb0luc2VydCxpbnNlcnRBZnRlck5vZGUpe2lmKCFpbnNlcnRBZnRlck5vZGUpe2tvLnZpcnR1YWxFbGVtZW50cy5wcmVwZW5kKGNvbnRhaW5lck5vZGUsbm9kZVRvSW5zZXJ0KTt9ZWxzZXt2YXIgaW5zZXJ0QmVmb3JlTm9kZT1pbnNlcnRBZnRlck5vZGUubmV4dFNpYmxpbmc7aWYoaXNTdGFydENvbW1lbnQoY29udGFpbmVyTm9kZSkpe2NvbnRhaW5lck5vZGU9Y29udGFpbmVyTm9kZS5wYXJlbnROb2RlO30KaWYoIWluc2VydEJlZm9yZU5vZGUpe2NvbnRhaW5lck5vZGUuYXBwZW5kQ2hpbGQobm9kZVRvSW5zZXJ0KTt9ZWxzZSBpZihub2RlVG9JbnNlcnQhPT1pbnNlcnRCZWZvcmVOb2RlKXtjb250YWluZXJOb2RlLmluc2VydEJlZm9yZShub2RlVG9JbnNlcnQsaW5zZXJ0QmVmb3JlTm9kZSk7fX19LGZpcnN0Q2hpbGQ6ZnVuY3Rpb24obm9kZSl7aWYoIWlzU3RhcnRDb21tZW50KG5vZGUpKXtpZihub2RlLmZpcnN0Q2hpbGQmJmlzRW5kQ29tbWVudChub2RlLmZpcnN0Q2hpbGQpKXt0aHJvdyBuZXcgRXJyb3IoIkZvdW5kIGludmFsaWQgZW5kIGNvbW1lbnQsIGFzIHRoZSBmaXJzdCBjaGlsZCBvZiAiK25vZGUpO30KcmV0dXJuIG5vZGUuZmlyc3RDaGlsZDt9ZWxzZSBpZighbm9kZS5uZXh0U2libGluZ3x8aXNFbmRDb21tZW50KG5vZGUubmV4dFNpYmxpbmcpKXtyZXR1cm4gbnVsbDt9ZWxzZXtyZXR1cm4gbm9kZS5uZXh0U2libGluZzt9fSxuZXh0U2libGluZzpmdW5jdGlvbihub2RlKXtpZihpc1N0YXJ0Q29tbWVudChub2RlKSl7bm9kZT1nZXRNYXRjaGluZ0VuZENvbW1lbnQobm9kZSk7fQppZihub2RlLm5leHRTaWJsaW5nJiZpc0VuZENvbW1lbnQobm9kZS5uZXh0U2libGluZykpe2lmKGlzVW5tYXRjaGVkRW5kQ29tbWVudChub2RlLm5leHRTaWJsaW5nKSl7dGhyb3cgRXJyb3IoIkZvdW5kIGVuZCBjb21tZW50IHdpdGhvdXQgYSBtYXRjaGluZyBvcGVuaW5nIGNvbW1lbnQsIGFzIGNoaWxkIG9mICIrbm9kZSk7fWVsc2V7cmV0dXJuIG51bGw7fX1lbHNle3JldHVybiBub2RlLm5leHRTaWJsaW5nO319LGhhc0JpbmRpbmdWYWx1ZTppc1N0YXJ0Q29tbWVudCx2aXJ0dWFsTm9kZUJpbmRpbmdWYWx1ZTpmdW5jdGlvbihub2RlKXt2YXIgcmVnZXhNYXRjaD0oY29tbWVudE5vZGVzSGF2ZVRleHRQcm9wZXJ0eT9ub2RlLnRleHQ6bm9kZS5ub2RlVmFsdWUpLm1hdGNoKHN0YXJ0Q29tbWVudFJlZ2V4KTtyZXR1cm4gcmVnZXhNYXRjaD9yZWdleE1hdGNoWzFdOm51bGw7fSxub3JtYWxpc2VWaXJ0dWFsRWxlbWVudERvbVN0cnVjdHVyZTpmdW5jdGlvbihlbGVtZW50VmVyaWZpZWQpe2lmKCFodG1sVGFnc1dpdGhPcHRpb25hbGx5Q2xvc2luZ0NoaWxkcmVuW2tvLnV0aWxzLnRhZ05hbWVMb3dlcihlbGVtZW50VmVyaWZpZWQpXSkKcmV0dXJuO3ZhciBjaGlsZE5vZGU9ZWxlbWVudFZlcmlmaWVkLmZpcnN0Q2hpbGQ7aWYoY2hpbGROb2RlKXtkb3tpZihjaGlsZE5vZGUubm9kZVR5cGU9PT0xKXt2YXIgdW5iYWxhbmNlZFRhZ3M9Z2V0VW5iYWxhbmNlZENoaWxkVGFncyhjaGlsZE5vZGUpO2lmKHVuYmFsYW5jZWRUYWdzKXt2YXIgbm9kZVRvSW5zZXJ0QmVmb3JlPWNoaWxkTm9kZS5uZXh0U2libGluZztmb3IodmFyIGk9MDtpPHVuYmFsYW5jZWRUYWdzLmxlbmd0aDtpKyspe2lmKG5vZGVUb0luc2VydEJlZm9yZSkKZWxlbWVudFZlcmlmaWVkLmluc2VydEJlZm9yZSh1bmJhbGFuY2VkVGFnc1tpXSxub2RlVG9JbnNlcnRCZWZvcmUpO2Vsc2UKZWxlbWVudFZlcmlmaWVkLmFwcGVuZENoaWxkKHVuYmFsYW5jZWRUYWdzW2ldKTt9fX19d2hpbGUoY2hpbGROb2RlPWNoaWxkTm9kZS5uZXh0U2libGluZyk7fX19O30pKCk7a28uZXhwb3J0U3ltYm9sKCd2aXJ0dWFsRWxlbWVudHMnLGtvLnZpcnR1YWxFbGVtZW50cyk7a28uZXhwb3J0U3ltYm9sKCd2aXJ0dWFsRWxlbWVudHMuYWxsb3dlZEJpbmRpbmdzJyxrby52aXJ0dWFsRWxlbWVudHMuYWxsb3dlZEJpbmRpbmdzKTtrby5leHBvcnRTeW1ib2woJ3ZpcnR1YWxFbGVtZW50cy5lbXB0eU5vZGUnLGtvLnZpcnR1YWxFbGVtZW50cy5lbXB0eU5vZGUpO2tvLmV4cG9ydFN5bWJvbCgndmlydHVhbEVsZW1lbnRzLmluc2VydEFmdGVyJyxrby52aXJ0dWFsRWxlbWVudHMuaW5zZXJ0QWZ0ZXIpO2tvLmV4cG9ydFN5bWJvbCgndmlydHVhbEVsZW1lbnRzLnByZXBlbmQnLGtvLnZpcnR1YWxFbGVtZW50cy5wcmVwZW5kKTtrby5leHBvcnRTeW1ib2woJ3ZpcnR1YWxFbGVtZW50cy5zZXREb21Ob2RlQ2hpbGRyZW4nLGtvLnZpcnR1YWxFbGVtZW50cy5zZXREb21Ob2RlQ2hpbGRyZW4pOyhmdW5jdGlvbigpe3ZhciBkZWZhdWx0QmluZGluZ0F0dHJpYnV0ZU5hbWU9ImRhdGEtYmluZCI7a28uYmluZGluZ1Byb3ZpZGVyPWZ1bmN0aW9uKCl7dGhpcy5iaW5kaW5nQ2FjaGU9e307fTtrby51dGlscy5leHRlbmQoa28uYmluZGluZ1Byb3ZpZGVyLnByb3RvdHlwZSx7J25vZGVIYXNCaW5kaW5ncyc6ZnVuY3Rpb24obm9kZSl7c3dpdGNoKG5vZGUubm9kZVR5cGUpe2Nhc2UgMTpyZXR1cm4gbm9kZS5nZXRBdHRyaWJ1dGUoZGVmYXVsdEJpbmRpbmdBdHRyaWJ1dGVOYW1lKSE9bnVsbHx8a28uY29tcG9uZW50c1snZ2V0Q29tcG9uZW50TmFtZUZvck5vZGUnXShub2RlKTtjYXNlIDg6cmV0dXJuIGtvLnZpcnR1YWxFbGVtZW50cy5oYXNCaW5kaW5nVmFsdWUobm9kZSk7ZGVmYXVsdDpyZXR1cm4gZmFsc2U7fX0sJ2dldEJpbmRpbmdzJzpmdW5jdGlvbihub2RlLGJpbmRpbmdDb250ZXh0KXt2YXIgYmluZGluZ3NTdHJpbmc9dGhpc1snZ2V0QmluZGluZ3NTdHJpbmcnXShub2RlLGJpbmRpbmdDb250ZXh0KSxwYXJzZWRCaW5kaW5ncz1iaW5kaW5nc1N0cmluZz90aGlzWydwYXJzZUJpbmRpbmdzU3RyaW5nJ10oYmluZGluZ3NTdHJpbmcsYmluZGluZ0NvbnRleHQsbm9kZSk6bnVsbDtyZXR1cm4ga28uY29tcG9uZW50cy5hZGRCaW5kaW5nc0ZvckN1c3RvbUVsZW1lbnQocGFyc2VkQmluZGluZ3Msbm9kZSxiaW5kaW5nQ29udGV4dCxmYWxzZSk7fSwnZ2V0QmluZGluZ0FjY2Vzc29ycyc6ZnVuY3Rpb24obm9kZSxiaW5kaW5nQ29udGV4dCl7dmFyIGJpbmRpbmdzU3RyaW5nPXRoaXNbJ2dldEJpbmRpbmdzU3RyaW5nJ10obm9kZSxiaW5kaW5nQ29udGV4dCkscGFyc2VkQmluZGluZ3M9YmluZGluZ3NTdHJpbmc/dGhpc1sncGFyc2VCaW5kaW5nc1N0cmluZyddKGJpbmRpbmdzU3RyaW5nLGJpbmRpbmdDb250ZXh0LG5vZGUseyd2YWx1ZUFjY2Vzc29ycyc6dHJ1ZX0pOm51bGw7cmV0dXJuIGtvLmNvbXBvbmVudHMuYWRkQmluZGluZ3NGb3JDdXN0b21FbGVtZW50KHBhcnNlZEJpbmRpbmdzLG5vZGUsYmluZGluZ0NvbnRleHQsdHJ1ZSk7fSwnZ2V0QmluZGluZ3NTdHJpbmcnOmZ1bmN0aW9uKG5vZGUsYmluZGluZ0NvbnRleHQpe3N3aXRjaChub2RlLm5vZGVUeXBlKXtjYXNlIDE6cmV0dXJuIG5vZGUuZ2V0QXR0cmlidXRlKGRlZmF1bHRCaW5kaW5nQXR0cmlidXRlTmFtZSk7Y2FzZSA4OnJldHVybiBrby52aXJ0dWFsRWxlbWVudHMudmlydHVhbE5vZGVCaW5kaW5nVmFsdWUobm9kZSk7ZGVmYXVsdDpyZXR1cm4gbnVsbDt9fSwncGFyc2VCaW5kaW5nc1N0cmluZyc6ZnVuY3Rpb24oYmluZGluZ3NTdHJpbmcsYmluZGluZ0NvbnRleHQsbm9kZSxvcHRpb25zKXt0cnl7dmFyIGJpbmRpbmdGdW5jdGlvbj1jcmVhdGVCaW5kaW5nc1N0cmluZ0V2YWx1YXRvclZpYUNhY2hlKGJpbmRpbmdzU3RyaW5nLHRoaXMuYmluZGluZ0NhY2hlLG9wdGlvbnMpO3JldHVybiBiaW5kaW5nRnVuY3Rpb24oYmluZGluZ0NvbnRleHQsbm9kZSk7fWNhdGNoKGV4KXtleC5tZXNzYWdlPSJVbmFibGUgdG8gcGFyc2UgYmluZGluZ3MuXG5CaW5kaW5ncyB2YWx1ZTogIitiaW5kaW5nc1N0cmluZysiXG5NZXNzYWdlOiAiK2V4Lm1lc3NhZ2U7dGhyb3cgZXg7fX19KTtrby5iaW5kaW5nUHJvdmlkZXJbJ2luc3RhbmNlJ109bmV3IGtvLmJpbmRpbmdQcm92aWRlcigpO2Z1bmN0aW9uIGNyZWF0ZUJpbmRpbmdzU3RyaW5nRXZhbHVhdG9yVmlhQ2FjaGUoYmluZGluZ3NTdHJpbmcsY2FjaGUsb3B0aW9ucyl7dmFyIGNhY2hlS2V5PWJpbmRpbmdzU3RyaW5nKyhvcHRpb25zJiZvcHRpb25zWyd2YWx1ZUFjY2Vzc29ycyddfHwnJyk7cmV0dXJuIGNhY2hlW2NhY2hlS2V5XXx8KGNhY2hlW2NhY2hlS2V5XT1jcmVhdGVCaW5kaW5nc1N0cmluZ0V2YWx1YXRvcihiaW5kaW5nc1N0cmluZyxvcHRpb25zKSk7fQpmdW5jdGlvbiBjcmVhdGVCaW5kaW5nc1N0cmluZ0V2YWx1YXRvcihiaW5kaW5nc1N0cmluZyxvcHRpb25zKXt2YXIgcmV3cml0dGVuQmluZGluZ3M9a28uZXhwcmVzc2lvblJld3JpdGluZy5wcmVQcm9jZXNzQmluZGluZ3MoYmluZGluZ3NTdHJpbmcsb3B0aW9ucyksZnVuY3Rpb25Cb2R5PSJ3aXRoKCRjb250ZXh0KXt3aXRoKCRkYXRhfHx7fSl7cmV0dXJueyIrcmV3cml0dGVuQmluZGluZ3MrIn19fSI7cmV0dXJuIG5ldyBGdW5jdGlvbigiJGNvbnRleHQiLCIkZWxlbWVudCIsZnVuY3Rpb25Cb2R5KTt9fSkoKTtrby5leHBvcnRTeW1ib2woJ2JpbmRpbmdQcm92aWRlcicsa28uYmluZGluZ1Byb3ZpZGVyKTsoZnVuY3Rpb24oKXt2YXIgY29udGV4dFN1YnNjcmliYWJsZT1rby51dGlscy5jcmVhdGVTeW1ib2xPclN0cmluZygnX3N1YnNjcmliYWJsZScpO3ZhciBjb250ZXh0QW5jZXN0b3JCaW5kaW5nSW5mbz1rby51dGlscy5jcmVhdGVTeW1ib2xPclN0cmluZygnX2FuY2VzdG9yQmluZGluZ0luZm8nKTt2YXIgY29udGV4dERhdGFEZXBlbmRlbmN5PWtvLnV0aWxzLmNyZWF0ZVN5bWJvbE9yU3RyaW5nKCdfZGF0YURlcGVuZGVuY3knKTtrby5iaW5kaW5nSGFuZGxlcnM9e307dmFyIGJpbmRpbmdEb2VzTm90UmVjdXJzZUludG9FbGVtZW50VHlwZXM9eydzY3JpcHQnOnRydWUsJ3RleHRhcmVhJzp0cnVlLCd0ZW1wbGF0ZSc6dHJ1ZX07a29bJ2dldEJpbmRpbmdIYW5kbGVyJ109ZnVuY3Rpb24oYmluZGluZ0tleSl7cmV0dXJuIGtvLmJpbmRpbmdIYW5kbGVyc1tiaW5kaW5nS2V5XTt9O3ZhciBpbmhlcml0UGFyZW50Vm09e307a28uYmluZGluZ0NvbnRleHQ9ZnVuY3Rpb24oZGF0YUl0ZW1PckFjY2Vzc29yLHBhcmVudENvbnRleHQsZGF0YUl0ZW1BbGlhcyxleHRlbmRDYWxsYmFjayxvcHRpb25zKXtmdW5jdGlvbiB1cGRhdGVDb250ZXh0KCl7dmFyIGRhdGFJdGVtT3JPYnNlcnZhYmxlPWlzRnVuYz9yZWFsRGF0YUl0ZW1PckFjY2Vzc29yKCk6cmVhbERhdGFJdGVtT3JBY2Nlc3NvcixkYXRhSXRlbT1rby51dGlscy51bndyYXBPYnNlcnZhYmxlKGRhdGFJdGVtT3JPYnNlcnZhYmxlKTtpZihwYXJlbnRDb250ZXh0KXtrby51dGlscy5leHRlbmQoc2VsZixwYXJlbnRDb250ZXh0KTtpZihjb250ZXh0QW5jZXN0b3JCaW5kaW5nSW5mbyBpbiBwYXJlbnRDb250ZXh0KXtzZWxmW2NvbnRleHRBbmNlc3RvckJpbmRpbmdJbmZvXT1wYXJlbnRDb250ZXh0W2NvbnRleHRBbmNlc3RvckJpbmRpbmdJbmZvXTt9fWVsc2V7c2VsZlsnJHBhcmVudHMnXT1bXTtzZWxmWyckcm9vdCddPWRhdGFJdGVtO3NlbGZbJ2tvJ109a287fQpzZWxmW2NvbnRleHRTdWJzY3JpYmFibGVdPXN1YnNjcmliYWJsZTtpZihzaG91bGRJbmhlcml0RGF0YSl7ZGF0YUl0ZW09c2VsZlsnJGRhdGEnXTt9ZWxzZXtzZWxmWyckcmF3RGF0YSddPWRhdGFJdGVtT3JPYnNlcnZhYmxlO3NlbGZbJyRkYXRhJ109ZGF0YUl0ZW07fQppZihkYXRhSXRlbUFsaWFzKQpzZWxmW2RhdGFJdGVtQWxpYXNdPWRhdGFJdGVtO2lmKGV4dGVuZENhbGxiYWNrKQpleHRlbmRDYWxsYmFjayhzZWxmLHBhcmVudENvbnRleHQsZGF0YUl0ZW0pO2lmKHBhcmVudENvbnRleHQmJnBhcmVudENvbnRleHRbY29udGV4dFN1YnNjcmliYWJsZV0mJiFrby5jb21wdXRlZENvbnRleHQuY29tcHV0ZWQoKS5oYXNBbmNlc3RvckRlcGVuZGVuY3kocGFyZW50Q29udGV4dFtjb250ZXh0U3Vic2NyaWJhYmxlXSkpe3BhcmVudENvbnRleHRbY29udGV4dFN1YnNjcmliYWJsZV0oKTt9CmlmKGRhdGFEZXBlbmRlbmN5KXtzZWxmW2NvbnRleHREYXRhRGVwZW5kZW5jeV09ZGF0YURlcGVuZGVuY3k7fQpyZXR1cm4gc2VsZlsnJGRhdGEnXTt9CnZhciBzZWxmPXRoaXMsc2hvdWxkSW5oZXJpdERhdGE9ZGF0YUl0ZW1PckFjY2Vzc29yPT09aW5oZXJpdFBhcmVudFZtLHJlYWxEYXRhSXRlbU9yQWNjZXNzb3I9c2hvdWxkSW5oZXJpdERhdGE/dW5kZWZpbmVkOmRhdGFJdGVtT3JBY2Nlc3Nvcixpc0Z1bmM9dHlwZW9mKHJlYWxEYXRhSXRlbU9yQWNjZXNzb3IpPT0iZnVuY3Rpb24iJiYha28uaXNPYnNlcnZhYmxlKHJlYWxEYXRhSXRlbU9yQWNjZXNzb3IpLG5vZGVzLHN1YnNjcmliYWJsZSxkYXRhRGVwZW5kZW5jeT1vcHRpb25zJiZvcHRpb25zWydkYXRhRGVwZW5kZW5jeSddO2lmKG9wdGlvbnMmJm9wdGlvbnNbJ2V4cG9ydERlcGVuZGVuY2llcyddKXt1cGRhdGVDb250ZXh0KCk7fWVsc2V7c3Vic2NyaWJhYmxlPWtvLnB1cmVDb21wdXRlZCh1cGRhdGVDb250ZXh0KTtzdWJzY3JpYmFibGUucGVlaygpO2lmKHN1YnNjcmliYWJsZS5pc0FjdGl2ZSgpKXtzdWJzY3JpYmFibGVbJ2VxdWFsaXR5Q29tcGFyZXInXT1udWxsO31lbHNle3NlbGZbY29udGV4dFN1YnNjcmliYWJsZV09dW5kZWZpbmVkO319fQprby5iaW5kaW5nQ29udGV4dC5wcm90b3R5cGVbJ2NyZWF0ZUNoaWxkQ29udGV4dCddPWZ1bmN0aW9uKGRhdGFJdGVtT3JBY2Nlc3NvcixkYXRhSXRlbUFsaWFzLGV4dGVuZENhbGxiYWNrLG9wdGlvbnMpe2lmKCFvcHRpb25zJiZkYXRhSXRlbUFsaWFzJiZ0eXBlb2YgZGF0YUl0ZW1BbGlhcz09Im9iamVjdCIpe29wdGlvbnM9ZGF0YUl0ZW1BbGlhcztkYXRhSXRlbUFsaWFzPW9wdGlvbnNbJ2FzJ107ZXh0ZW5kQ2FsbGJhY2s9b3B0aW9uc1snZXh0ZW5kJ107fQppZihkYXRhSXRlbUFsaWFzJiZvcHRpb25zJiZvcHRpb25zWydub0NoaWxkQ29udGV4dCddKXt2YXIgaXNGdW5jPXR5cGVvZihkYXRhSXRlbU9yQWNjZXNzb3IpPT0iZnVuY3Rpb24iJiYha28uaXNPYnNlcnZhYmxlKGRhdGFJdGVtT3JBY2Nlc3Nvcik7cmV0dXJuIG5ldyBrby5iaW5kaW5nQ29udGV4dChpbmhlcml0UGFyZW50Vm0sdGhpcyxudWxsLGZ1bmN0aW9uKHNlbGYpe2lmKGV4dGVuZENhbGxiYWNrKQpleHRlbmRDYWxsYmFjayhzZWxmKTtzZWxmW2RhdGFJdGVtQWxpYXNdPWlzRnVuYz9kYXRhSXRlbU9yQWNjZXNzb3IoKTpkYXRhSXRlbU9yQWNjZXNzb3I7fSxvcHRpb25zKTt9CnJldHVybiBuZXcga28uYmluZGluZ0NvbnRleHQoZGF0YUl0ZW1PckFjY2Vzc29yLHRoaXMsZGF0YUl0ZW1BbGlhcyxmdW5jdGlvbihzZWxmLHBhcmVudENvbnRleHQpe3NlbGZbJyRwYXJlbnRDb250ZXh0J109cGFyZW50Q29udGV4dDtzZWxmWyckcGFyZW50J109cGFyZW50Q29udGV4dFsnJGRhdGEnXTtzZWxmWyckcGFyZW50cyddPShwYXJlbnRDb250ZXh0WyckcGFyZW50cyddfHxbXSkuc2xpY2UoMCk7c2VsZlsnJHBhcmVudHMnXS51bnNoaWZ0KHNlbGZbJyRwYXJlbnQnXSk7aWYoZXh0ZW5kQ2FsbGJhY2spCmV4dGVuZENhbGxiYWNrKHNlbGYpO30sb3B0aW9ucyk7fTtrby5iaW5kaW5nQ29udGV4dC5wcm90b3R5cGVbJ2V4dGVuZCddPWZ1bmN0aW9uKHByb3BlcnRpZXMsb3B0aW9ucyl7cmV0dXJuIG5ldyBrby5iaW5kaW5nQ29udGV4dChpbmhlcml0UGFyZW50Vm0sdGhpcyxudWxsLGZ1bmN0aW9uKHNlbGYscGFyZW50Q29udGV4dCl7a28udXRpbHMuZXh0ZW5kKHNlbGYsdHlwZW9mKHByb3BlcnRpZXMpPT0iZnVuY3Rpb24iP3Byb3BlcnRpZXMoc2VsZik6cHJvcGVydGllcyk7fSxvcHRpb25zKTt9O3ZhciBib3VuZEVsZW1lbnREb21EYXRhS2V5PWtvLnV0aWxzLmRvbURhdGEubmV4dEtleSgpO2Z1bmN0aW9uIGFzeW5jQ29udGV4dERpc3Bvc2Uobm9kZSl7dmFyIGJpbmRpbmdJbmZvPWtvLnV0aWxzLmRvbURhdGEuZ2V0KG5vZGUsYm91bmRFbGVtZW50RG9tRGF0YUtleSksYXN5bmNDb250ZXh0PWJpbmRpbmdJbmZvJiZiaW5kaW5nSW5mby5hc3luY0NvbnRleHQ7aWYoYXN5bmNDb250ZXh0KXtiaW5kaW5nSW5mby5hc3luY0NvbnRleHQ9bnVsbDthc3luY0NvbnRleHQubm90aWZ5QW5jZXN0b3IoKTt9fQpmdW5jdGlvbiBBc3luY0NvbXBsZXRlQ29udGV4dChub2RlLGJpbmRpbmdJbmZvLGFuY2VzdG9yQmluZGluZ0luZm8pe3RoaXMubm9kZT1ub2RlO3RoaXMuYmluZGluZ0luZm89YmluZGluZ0luZm87dGhpcy5hc3luY0Rlc2NlbmRhbnRzPVtdO3RoaXMuY2hpbGRyZW5Db21wbGV0ZT1mYWxzZTtpZighYmluZGluZ0luZm8uYXN5bmNDb250ZXh0KXtrby51dGlscy5kb21Ob2RlRGlzcG9zYWwuYWRkRGlzcG9zZUNhbGxiYWNrKG5vZGUsYXN5bmNDb250ZXh0RGlzcG9zZSk7fQppZihhbmNlc3RvckJpbmRpbmdJbmZvJiZhbmNlc3RvckJpbmRpbmdJbmZvLmFzeW5jQ29udGV4dCl7YW5jZXN0b3JCaW5kaW5nSW5mby5hc3luY0NvbnRleHQuYXN5bmNEZXNjZW5kYW50cy5wdXNoKG5vZGUpO3RoaXMuYW5jZXN0b3JCaW5kaW5nSW5mbz1hbmNlc3RvckJpbmRpbmdJbmZvO319CkFzeW5jQ29tcGxldGVDb250ZXh0LnByb3RvdHlwZS5ub3RpZnlBbmNlc3Rvcj1mdW5jdGlvbigpe2lmKHRoaXMuYW5jZXN0b3JCaW5kaW5nSW5mbyYmdGhpcy5hbmNlc3RvckJpbmRpbmdJbmZvLmFzeW5jQ29udGV4dCl7dGhpcy5hbmNlc3RvckJpbmRpbmdJbmZvLmFzeW5jQ29udGV4dC5kZXNjZW5kYW50Q29tcGxldGUodGhpcy5ub2RlKTt9fTtBc3luY0NvbXBsZXRlQ29udGV4dC5wcm90b3R5cGUuZGVzY2VuZGFudENvbXBsZXRlPWZ1bmN0aW9uKG5vZGUpe2tvLnV0aWxzLmFycmF5UmVtb3ZlSXRlbSh0aGlzLmFzeW5jRGVzY2VuZGFudHMsbm9kZSk7aWYoIXRoaXMuYXN5bmNEZXNjZW5kYW50cy5sZW5ndGgmJnRoaXMuY2hpbGRyZW5Db21wbGV0ZSl7dGhpcy5jb21wbGV0ZUNoaWxkcmVuKCk7fX07QXN5bmNDb21wbGV0ZUNvbnRleHQucHJvdG90eXBlLmNvbXBsZXRlQ2hpbGRyZW49ZnVuY3Rpb24oKXt0aGlzLmNoaWxkcmVuQ29tcGxldGU9dHJ1ZTtpZih0aGlzLmJpbmRpbmdJbmZvLmFzeW5jQ29udGV4dCYmIXRoaXMuYXN5bmNEZXNjZW5kYW50cy5sZW5ndGgpe3RoaXMuYmluZGluZ0luZm8uYXN5bmNDb250ZXh0PW51bGw7a28udXRpbHMuZG9tTm9kZURpc3Bvc2FsLnJlbW92ZURpc3Bvc2VDYWxsYmFjayh0aGlzLm5vZGUsYXN5bmNDb250ZXh0RGlzcG9zZSk7a28uYmluZGluZ0V2ZW50Lm5vdGlmeSh0aGlzLm5vZGUsa28uYmluZGluZ0V2ZW50LmRlc2NlbmRhbnRzQ29tcGxldGUpO3RoaXMubm90aWZ5QW5jZXN0b3IoKTt9fTtrby5iaW5kaW5nRXZlbnQ9e2NoaWxkcmVuQ29tcGxldGU6ImNoaWxkcmVuQ29tcGxldGUiLGRlc2NlbmRhbnRzQ29tcGxldGU6ImRlc2NlbmRhbnRzQ29tcGxldGUiLHN1YnNjcmliZTpmdW5jdGlvbihub2RlLGV2ZW50LGNhbGxiYWNrLGNvbnRleHQsb3B0aW9ucyl7dmFyIGJpbmRpbmdJbmZvPWtvLnV0aWxzLmRvbURhdGEuZ2V0T3JTZXQobm9kZSxib3VuZEVsZW1lbnREb21EYXRhS2V5LHt9KTtpZighYmluZGluZ0luZm8uZXZlbnRTdWJzY3JpYmFibGUpe2JpbmRpbmdJbmZvLmV2ZW50U3Vic2NyaWJhYmxlPW5ldyBrby5zdWJzY3JpYmFibGU7fQppZihvcHRpb25zJiZvcHRpb25zWydub3RpZnlJbW1lZGlhdGVseSddJiZiaW5kaW5nSW5mby5ub3RpZmllZEV2ZW50c1tldmVudF0pe2tvLmRlcGVuZGVuY3lEZXRlY3Rpb24uaWdub3JlKGNhbGxiYWNrLGNvbnRleHQsW25vZGVdKTt9CnJldHVybiBiaW5kaW5nSW5mby5ldmVudFN1YnNjcmliYWJsZS5zdWJzY3JpYmUoY2FsbGJhY2ssY29udGV4dCxldmVudCk7fSxub3RpZnk6ZnVuY3Rpb24obm9kZSxldmVudCl7dmFyIGJpbmRpbmdJbmZvPWtvLnV0aWxzLmRvbURhdGEuZ2V0KG5vZGUsYm91bmRFbGVtZW50RG9tRGF0YUtleSk7aWYoYmluZGluZ0luZm8pe2JpbmRpbmdJbmZvLm5vdGlmaWVkRXZlbnRzW2V2ZW50XT10cnVlO2lmKGJpbmRpbmdJbmZvLmV2ZW50U3Vic2NyaWJhYmxlKXtiaW5kaW5nSW5mby5ldmVudFN1YnNjcmliYWJsZVsnbm90aWZ5U3Vic2NyaWJlcnMnXShub2RlLGV2ZW50KTt9CmlmKGV2ZW50PT1rby5iaW5kaW5nRXZlbnQuY2hpbGRyZW5Db21wbGV0ZSl7aWYoYmluZGluZ0luZm8uYXN5bmNDb250ZXh0KXtiaW5kaW5nSW5mby5hc3luY0NvbnRleHQuY29tcGxldGVDaGlsZHJlbigpO31lbHNlIGlmKGJpbmRpbmdJbmZvLmFzeW5jQ29udGV4dD09PXVuZGVmaW5lZCYmYmluZGluZ0luZm8uZXZlbnRTdWJzY3JpYmFibGUmJmJpbmRpbmdJbmZvLmV2ZW50U3Vic2NyaWJhYmxlLmhhc1N1YnNjcmlwdGlvbnNGb3JFdmVudChrby5iaW5kaW5nRXZlbnQuZGVzY2VuZGFudHNDb21wbGV0ZSkpe3Rocm93IG5ldyBFcnJvcigiZGVzY2VuZGFudHNDb21wbGV0ZSBldmVudCBub3Qgc3VwcG9ydGVkIGZvciBiaW5kaW5ncyBvbiB0aGlzIG5vZGUiKTt9fX19LHN0YXJ0UG9zc2libHlBc3luY0NvbnRlbnRCaW5kaW5nOmZ1bmN0aW9uKG5vZGUsYmluZGluZ0NvbnRleHQpe3ZhciBiaW5kaW5nSW5mbz1rby51dGlscy5kb21EYXRhLmdldE9yU2V0KG5vZGUsYm91bmRFbGVtZW50RG9tRGF0YUtleSx7fSk7aWYoIWJpbmRpbmdJbmZvLmFzeW5jQ29udGV4dCl7YmluZGluZ0luZm8uYXN5bmNDb250ZXh0PW5ldyBBc3luY0NvbXBsZXRlQ29udGV4dChub2RlLGJpbmRpbmdJbmZvLGJpbmRpbmdDb250ZXh0W2NvbnRleHRBbmNlc3RvckJpbmRpbmdJbmZvXSk7fQppZihiaW5kaW5nQ29udGV4dFtjb250ZXh0QW5jZXN0b3JCaW5kaW5nSW5mb109PWJpbmRpbmdJbmZvKXtyZXR1cm4gYmluZGluZ0NvbnRleHQ7fQpyZXR1cm4gYmluZGluZ0NvbnRleHRbJ2V4dGVuZCddKGZ1bmN0aW9uKGN0eCl7Y3R4W2NvbnRleHRBbmNlc3RvckJpbmRpbmdJbmZvXT1iaW5kaW5nSW5mbzt9KTt9fTtmdW5jdGlvbiBtYWtlVmFsdWVBY2Nlc3Nvcih2YWx1ZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHZhbHVlO307fQpmdW5jdGlvbiBldmFsdWF0ZVZhbHVlQWNjZXNzb3IodmFsdWVBY2Nlc3Nvcil7cmV0dXJuIHZhbHVlQWNjZXNzb3IoKTt9CmZ1bmN0aW9uIG1ha2VBY2Nlc3NvcnNGcm9tRnVuY3Rpb24oY2FsbGJhY2spe3JldHVybiBrby51dGlscy5vYmplY3RNYXAoa28uZGVwZW5kZW5jeURldGVjdGlvbi5pZ25vcmUoY2FsbGJhY2spLGZ1bmN0aW9uKHZhbHVlLGtleSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGNhbGxiYWNrKClba2V5XTt9O30pO30KZnVuY3Rpb24gbWFrZUJpbmRpbmdBY2Nlc3NvcnMoYmluZGluZ3MsY29udGV4dCxub2RlKXtpZih0eXBlb2YgYmluZGluZ3M9PT0nZnVuY3Rpb24nKXtyZXR1cm4gbWFrZUFjY2Vzc29yc0Zyb21GdW5jdGlvbihiaW5kaW5ncy5iaW5kKG51bGwsY29udGV4dCxub2RlKSk7fWVsc2V7cmV0dXJuIGtvLnV0aWxzLm9iamVjdE1hcChiaW5kaW5ncyxtYWtlVmFsdWVBY2Nlc3Nvcik7fX0KZnVuY3Rpb24gZ2V0QmluZGluZ3NBbmRNYWtlQWNjZXNzb3JzKG5vZGUsY29udGV4dCl7cmV0dXJuIG1ha2VBY2Nlc3NvcnNGcm9tRnVuY3Rpb24odGhpc1snZ2V0QmluZGluZ3MnXS5iaW5kKHRoaXMsbm9kZSxjb250ZXh0KSk7fQpmdW5jdGlvbiB2YWxpZGF0ZVRoYXRCaW5kaW5nSXNBbGxvd2VkRm9yVmlydHVhbEVsZW1lbnRzKGJpbmRpbmdOYW1lKXt2YXIgdmFsaWRhdG9yPWtvLnZpcnR1YWxFbGVtZW50cy5hbGxvd2VkQmluZGluZ3NbYmluZGluZ05hbWVdO2lmKCF2YWxpZGF0b3IpCnRocm93IG5ldyBFcnJvcigiVGhlIGJpbmRpbmcgJyIrYmluZGluZ05hbWUrIicgY2Fubm90IGJlIHVzZWQgd2l0aCB2aXJ0dWFsIGVsZW1lbnRzIil9CmZ1bmN0aW9uIGFwcGx5QmluZGluZ3NUb0Rlc2NlbmRhbnRzSW50ZXJuYWwoYmluZGluZ0NvbnRleHQsZWxlbWVudE9yVmlydHVhbEVsZW1lbnQpe3ZhciBuZXh0SW5RdWV1ZT1rby52aXJ0dWFsRWxlbWVudHMuZmlyc3RDaGlsZChlbGVtZW50T3JWaXJ0dWFsRWxlbWVudCk7aWYobmV4dEluUXVldWUpe3ZhciBjdXJyZW50Q2hpbGQscHJvdmlkZXI9a28uYmluZGluZ1Byb3ZpZGVyWydpbnN0YW5jZSddLHByZXByb2Nlc3NOb2RlPXByb3ZpZGVyWydwcmVwcm9jZXNzTm9kZSddO2lmKHByZXByb2Nlc3NOb2RlKXt3aGlsZShjdXJyZW50Q2hpbGQ9bmV4dEluUXVldWUpe25leHRJblF1ZXVlPWtvLnZpcnR1YWxFbGVtZW50cy5uZXh0U2libGluZyhjdXJyZW50Q2hpbGQpO3ByZXByb2Nlc3NOb2RlLmNhbGwocHJvdmlkZXIsY3VycmVudENoaWxkKTt9Cm5leHRJblF1ZXVlPWtvLnZpcnR1YWxFbGVtZW50cy5maXJzdENoaWxkKGVsZW1lbnRPclZpcnR1YWxFbGVtZW50KTt9CndoaWxlKGN1cnJlbnRDaGlsZD1uZXh0SW5RdWV1ZSl7bmV4dEluUXVldWU9a28udmlydHVhbEVsZW1lbnRzLm5leHRTaWJsaW5nKGN1cnJlbnRDaGlsZCk7YXBwbHlCaW5kaW5nc1RvTm9kZUFuZERlc2NlbmRhbnRzSW50ZXJuYWwoYmluZGluZ0NvbnRleHQsY3VycmVudENoaWxkKTt9fQprby5iaW5kaW5nRXZlbnQubm90aWZ5KGVsZW1lbnRPclZpcnR1YWxFbGVtZW50LGtvLmJpbmRpbmdFdmVudC5jaGlsZHJlbkNvbXBsZXRlKTt9CmZ1bmN0aW9uIGFwcGx5QmluZGluZ3NUb05vZGVBbmREZXNjZW5kYW50c0ludGVybmFsKGJpbmRpbmdDb250ZXh0LG5vZGVWZXJpZmllZCl7dmFyIGJpbmRpbmdDb250ZXh0Rm9yRGVzY2VuZGFudHM9YmluZGluZ0NvbnRleHQ7dmFyIGlzRWxlbWVudD0obm9kZVZlcmlmaWVkLm5vZGVUeXBlPT09MSk7aWYoaXNFbGVtZW50KQprby52aXJ0dWFsRWxlbWVudHMubm9ybWFsaXNlVmlydHVhbEVsZW1lbnREb21TdHJ1Y3R1cmUobm9kZVZlcmlmaWVkKTt2YXIgc2hvdWxkQXBwbHlCaW5kaW5ncz1pc0VsZW1lbnR8fGtvLmJpbmRpbmdQcm92aWRlclsnaW5zdGFuY2UnXVsnbm9kZUhhc0JpbmRpbmdzJ10obm9kZVZlcmlmaWVkKTtpZihzaG91bGRBcHBseUJpbmRpbmdzKQpiaW5kaW5nQ29udGV4dEZvckRlc2NlbmRhbnRzPWFwcGx5QmluZGluZ3NUb05vZGVJbnRlcm5hbChub2RlVmVyaWZpZWQsbnVsbCxiaW5kaW5nQ29udGV4dClbJ2JpbmRpbmdDb250ZXh0Rm9yRGVzY2VuZGFudHMnXTtpZihiaW5kaW5nQ29udGV4dEZvckRlc2NlbmRhbnRzJiYhYmluZGluZ0RvZXNOb3RSZWN1cnNlSW50b0VsZW1lbnRUeXBlc1trby51dGlscy50YWdOYW1lTG93ZXIobm9kZVZlcmlmaWVkKV0pe2FwcGx5QmluZGluZ3NUb0Rlc2NlbmRhbnRzSW50ZXJuYWwoYmluZGluZ0NvbnRleHRGb3JEZXNjZW5kYW50cyxub2RlVmVyaWZpZWQpO319CmZ1bmN0aW9uIHRvcG9sb2dpY2FsU29ydEJpbmRpbmdzKGJpbmRpbmdzKXt2YXIgcmVzdWx0PVtdLGJpbmRpbmdzQ29uc2lkZXJlZD17fSxjeWNsaWNEZXBlbmRlbmN5U3RhY2s9W107a28udXRpbHMub2JqZWN0Rm9yRWFjaChiaW5kaW5ncyxmdW5jdGlvbiBwdXNoQmluZGluZyhiaW5kaW5nS2V5KXtpZighYmluZGluZ3NDb25zaWRlcmVkW2JpbmRpbmdLZXldKXt2YXIgYmluZGluZz1rb1snZ2V0QmluZGluZ0hhbmRsZXInXShiaW5kaW5nS2V5KTtpZihiaW5kaW5nKXtpZihiaW5kaW5nWydhZnRlciddKXtjeWNsaWNEZXBlbmRlbmN5U3RhY2sucHVzaChiaW5kaW5nS2V5KTtrby51dGlscy5hcnJheUZvckVhY2goYmluZGluZ1snYWZ0ZXInXSxmdW5jdGlvbihiaW5kaW5nRGVwZW5kZW5jeUtleSl7aWYoYmluZGluZ3NbYmluZGluZ0RlcGVuZGVuY3lLZXldKXtpZihrby51dGlscy5hcnJheUluZGV4T2YoY3ljbGljRGVwZW5kZW5jeVN0YWNrLGJpbmRpbmdEZXBlbmRlbmN5S2V5KSE9PS0xKXt0aHJvdyBFcnJvcigiQ2Fubm90IGNvbWJpbmUgdGhlIGZvbGxvd2luZyBiaW5kaW5ncywgYmVjYXVzZSB0aGV5IGhhdmUgYSBjeWNsaWMgZGVwZW5kZW5jeTogIitjeWNsaWNEZXBlbmRlbmN5U3RhY2suam9pbigiLCAiKSk7fWVsc2V7cHVzaEJpbmRpbmcoYmluZGluZ0RlcGVuZGVuY3lLZXkpO319fSk7Y3ljbGljRGVwZW5kZW5jeVN0YWNrLmxlbmd0aC0tO30KcmVzdWx0LnB1c2goe2tleTpiaW5kaW5nS2V5LGhhbmRsZXI6YmluZGluZ30pO30KYmluZGluZ3NDb25zaWRlcmVkW2JpbmRpbmdLZXldPXRydWU7fX0pO3JldHVybiByZXN1bHQ7fQpmdW5jdGlvbiBhcHBseUJpbmRpbmdzVG9Ob2RlSW50ZXJuYWwobm9kZSxzb3VyY2VCaW5kaW5ncyxiaW5kaW5nQ29udGV4dCl7dmFyIGJpbmRpbmdJbmZvPWtvLnV0aWxzLmRvbURhdGEuZ2V0T3JTZXQobm9kZSxib3VuZEVsZW1lbnREb21EYXRhS2V5LHt9KTt2YXIgYWxyZWFkeUJvdW5kPWJpbmRpbmdJbmZvLmFscmVhZHlCb3VuZDtpZighc291cmNlQmluZGluZ3Mpe2lmKGFscmVhZHlCb3VuZCl7dGhyb3cgRXJyb3IoIllvdSBjYW5ub3QgYXBwbHkgYmluZGluZ3MgbXVsdGlwbGUgdGltZXMgdG8gdGhlIHNhbWUgZWxlbWVudC4iKTt9CmJpbmRpbmdJbmZvLmFscmVhZHlCb3VuZD10cnVlO30KaWYoIWFscmVhZHlCb3VuZCl7YmluZGluZ0luZm8uY29udGV4dD1iaW5kaW5nQ29udGV4dDt9CmlmKCFiaW5kaW5nSW5mby5ub3RpZmllZEV2ZW50cyl7YmluZGluZ0luZm8ubm90aWZpZWRFdmVudHM9e307fQp2YXIgYmluZGluZ3M7aWYoc291cmNlQmluZGluZ3MmJnR5cGVvZiBzb3VyY2VCaW5kaW5ncyE9PSdmdW5jdGlvbicpe2JpbmRpbmdzPXNvdXJjZUJpbmRpbmdzO31lbHNle3ZhciBwcm92aWRlcj1rby5iaW5kaW5nUHJvdmlkZXJbJ2luc3RhbmNlJ10sZ2V0QmluZGluZ3M9cHJvdmlkZXJbJ2dldEJpbmRpbmdBY2Nlc3NvcnMnXXx8Z2V0QmluZGluZ3NBbmRNYWtlQWNjZXNzb3JzO3ZhciBiaW5kaW5nc1VwZGF0ZXI9a28uZGVwZW5kZW50T2JzZXJ2YWJsZShmdW5jdGlvbigpe2JpbmRpbmdzPXNvdXJjZUJpbmRpbmdzP3NvdXJjZUJpbmRpbmdzKGJpbmRpbmdDb250ZXh0LG5vZGUpOmdldEJpbmRpbmdzLmNhbGwocHJvdmlkZXIsbm9kZSxiaW5kaW5nQ29udGV4dCk7aWYoYmluZGluZ3Mpe2lmKGJpbmRpbmdDb250ZXh0W2NvbnRleHRTdWJzY3JpYmFibGVdKXtiaW5kaW5nQ29udGV4dFtjb250ZXh0U3Vic2NyaWJhYmxlXSgpO30KaWYoYmluZGluZ0NvbnRleHRbY29udGV4dERhdGFEZXBlbmRlbmN5XSl7YmluZGluZ0NvbnRleHRbY29udGV4dERhdGFEZXBlbmRlbmN5XSgpO319CnJldHVybiBiaW5kaW5nczt9LG51bGwse2Rpc3Bvc2VXaGVuTm9kZUlzUmVtb3ZlZDpub2RlfSk7aWYoIWJpbmRpbmdzfHwhYmluZGluZ3NVcGRhdGVyLmlzQWN0aXZlKCkpCmJpbmRpbmdzVXBkYXRlcj1udWxsO30KdmFyIGNvbnRleHRUb0V4dGVuZD1iaW5kaW5nQ29udGV4dDt2YXIgYmluZGluZ0hhbmRsZXJUaGF0Q29udHJvbHNEZXNjZW5kYW50QmluZGluZ3M7aWYoYmluZGluZ3Mpe3ZhciBnZXRWYWx1ZUFjY2Vzc29yPWJpbmRpbmdzVXBkYXRlcj9mdW5jdGlvbihiaW5kaW5nS2V5KXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gZXZhbHVhdGVWYWx1ZUFjY2Vzc29yKGJpbmRpbmdzVXBkYXRlcigpW2JpbmRpbmdLZXldKTt9O306ZnVuY3Rpb24oYmluZGluZ0tleSl7cmV0dXJuIGJpbmRpbmdzW2JpbmRpbmdLZXldO307ZnVuY3Rpb24gYWxsQmluZGluZ3MoKXtyZXR1cm4ga28udXRpbHMub2JqZWN0TWFwKGJpbmRpbmdzVXBkYXRlcj9iaW5kaW5nc1VwZGF0ZXIoKTpiaW5kaW5ncyxldmFsdWF0ZVZhbHVlQWNjZXNzb3IpO30KYWxsQmluZGluZ3NbJ2dldCddPWZ1bmN0aW9uKGtleSl7cmV0dXJuIGJpbmRpbmdzW2tleV0mJmV2YWx1YXRlVmFsdWVBY2Nlc3NvcihnZXRWYWx1ZUFjY2Vzc29yKGtleSkpO307YWxsQmluZGluZ3NbJ2hhcyddPWZ1bmN0aW9uKGtleSl7cmV0dXJuIGtleSBpbiBiaW5kaW5nczt9O2lmKGtvLmJpbmRpbmdFdmVudC5jaGlsZHJlbkNvbXBsZXRlIGluIGJpbmRpbmdzKXtrby5iaW5kaW5nRXZlbnQuc3Vic2NyaWJlKG5vZGUsa28uYmluZGluZ0V2ZW50LmNoaWxkcmVuQ29tcGxldGUsZnVuY3Rpb24oKXt2YXIgY2FsbGJhY2s9ZXZhbHVhdGVWYWx1ZUFjY2Vzc29yKGJpbmRpbmdzW2tvLmJpbmRpbmdFdmVudC5jaGlsZHJlbkNvbXBsZXRlXSk7aWYoY2FsbGJhY2spe3ZhciBub2Rlcz1rby52aXJ0dWFsRWxlbWVudHMuY2hpbGROb2Rlcyhub2RlKTtpZihub2Rlcy5sZW5ndGgpe2NhbGxiYWNrKG5vZGVzLGtvLmRhdGFGb3Iobm9kZXNbMF0pKTt9fX0pO30KaWYoa28uYmluZGluZ0V2ZW50LmRlc2NlbmRhbnRzQ29tcGxldGUgaW4gYmluZGluZ3Mpe2NvbnRleHRUb0V4dGVuZD1rby5iaW5kaW5nRXZlbnQuc3RhcnRQb3NzaWJseUFzeW5jQ29udGVudEJpbmRpbmcobm9kZSxiaW5kaW5nQ29udGV4dCk7a28uYmluZGluZ0V2ZW50LnN1YnNjcmliZShub2RlLGtvLmJpbmRpbmdFdmVudC5kZXNjZW5kYW50c0NvbXBsZXRlLGZ1bmN0aW9uKCl7dmFyIGNhbGxiYWNrPWV2YWx1YXRlVmFsdWVBY2Nlc3NvcihiaW5kaW5nc1trby5iaW5kaW5nRXZlbnQuZGVzY2VuZGFudHNDb21wbGV0ZV0pO2lmKGNhbGxiYWNrJiZrby52aXJ0dWFsRWxlbWVudHMuZmlyc3RDaGlsZChub2RlKSl7Y2FsbGJhY2sobm9kZSk7fX0pO30KdmFyIG9yZGVyZWRCaW5kaW5ncz10b3BvbG9naWNhbFNvcnRCaW5kaW5ncyhiaW5kaW5ncyk7a28udXRpbHMuYXJyYXlGb3JFYWNoKG9yZGVyZWRCaW5kaW5ncyxmdW5jdGlvbihiaW5kaW5nS2V5QW5kSGFuZGxlcil7dmFyIGhhbmRsZXJJbml0Rm49YmluZGluZ0tleUFuZEhhbmRsZXIuaGFuZGxlclsiaW5pdCJdLGhhbmRsZXJVcGRhdGVGbj1iaW5kaW5nS2V5QW5kSGFuZGxlci5oYW5kbGVyWyJ1cGRhdGUiXSxiaW5kaW5nS2V5PWJpbmRpbmdLZXlBbmRIYW5kbGVyLmtleTtpZihub2RlLm5vZGVUeXBlPT09OCl7dmFsaWRhdGVUaGF0QmluZGluZ0lzQWxsb3dlZEZvclZpcnR1YWxFbGVtZW50cyhiaW5kaW5nS2V5KTt9CnRyeXtpZih0eXBlb2YgaGFuZGxlckluaXRGbj09ImZ1bmN0aW9uIil7a28uZGVwZW5kZW5jeURldGVjdGlvbi5pZ25vcmUoZnVuY3Rpb24oKXt2YXIgaW5pdFJlc3VsdD1oYW5kbGVySW5pdEZuKG5vZGUsZ2V0VmFsdWVBY2Nlc3NvcihiaW5kaW5nS2V5KSxhbGxCaW5kaW5ncyxjb250ZXh0VG9FeHRlbmRbJyRkYXRhJ10sY29udGV4dFRvRXh0ZW5kKTtpZihpbml0UmVzdWx0JiZpbml0UmVzdWx0Wydjb250cm9sc0Rlc2NlbmRhbnRCaW5kaW5ncyddKXtpZihiaW5kaW5nSGFuZGxlclRoYXRDb250cm9sc0Rlc2NlbmRhbnRCaW5kaW5ncyE9PXVuZGVmaW5lZCkKdGhyb3cgbmV3IEVycm9yKCJNdWx0aXBsZSBiaW5kaW5ncyAoIitiaW5kaW5nSGFuZGxlclRoYXRDb250cm9sc0Rlc2NlbmRhbnRCaW5kaW5ncysiIGFuZCAiK2JpbmRpbmdLZXkrIikgYXJlIHRyeWluZyB0byBjb250cm9sIGRlc2NlbmRhbnQgYmluZGluZ3Mgb2YgdGhlIHNhbWUgZWxlbWVudC4gWW91IGNhbm5vdCB1c2UgdGhlc2UgYmluZGluZ3MgdG9nZXRoZXIgb24gdGhlIHNhbWUgZWxlbWVudC4iKTtiaW5kaW5nSGFuZGxlclRoYXRDb250cm9sc0Rlc2NlbmRhbnRCaW5kaW5ncz1iaW5kaW5nS2V5O319KTt9CmlmKHR5cGVvZiBoYW5kbGVyVXBkYXRlRm49PSJmdW5jdGlvbiIpe2tvLmRlcGVuZGVudE9ic2VydmFibGUoZnVuY3Rpb24oKXtoYW5kbGVyVXBkYXRlRm4obm9kZSxnZXRWYWx1ZUFjY2Vzc29yKGJpbmRpbmdLZXkpLGFsbEJpbmRpbmdzLGNvbnRleHRUb0V4dGVuZFsnJGRhdGEnXSxjb250ZXh0VG9FeHRlbmQpO30sbnVsbCx7ZGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkOm5vZGV9KTt9fWNhdGNoKGV4KXtleC5tZXNzYWdlPSJVbmFibGUgdG8gcHJvY2VzcyBiaW5kaW5nIFwiIitiaW5kaW5nS2V5KyI6ICIrYmluZGluZ3NbYmluZGluZ0tleV0rIlwiXG5NZXNzYWdlOiAiK2V4Lm1lc3NhZ2U7dGhyb3cgZXg7fX0pO30KdmFyIHNob3VsZEJpbmREZXNjZW5kYW50cz1iaW5kaW5nSGFuZGxlclRoYXRDb250cm9sc0Rlc2NlbmRhbnRCaW5kaW5ncz09PXVuZGVmaW5lZDtyZXR1cm57J3Nob3VsZEJpbmREZXNjZW5kYW50cyc6c2hvdWxkQmluZERlc2NlbmRhbnRzLCdiaW5kaW5nQ29udGV4dEZvckRlc2NlbmRhbnRzJzpzaG91bGRCaW5kRGVzY2VuZGFudHMmJmNvbnRleHRUb0V4dGVuZH07fTtrby5zdG9yZWRCaW5kaW5nQ29udGV4dEZvck5vZGU9ZnVuY3Rpb24obm9kZSl7dmFyIGJpbmRpbmdJbmZvPWtvLnV0aWxzLmRvbURhdGEuZ2V0KG5vZGUsYm91bmRFbGVtZW50RG9tRGF0YUtleSk7cmV0dXJuIGJpbmRpbmdJbmZvJiZiaW5kaW5nSW5mby5jb250ZXh0O30KZnVuY3Rpb24gZ2V0QmluZGluZ0NvbnRleHQodmlld01vZGVsT3JCaW5kaW5nQ29udGV4dCxleHRlbmRDb250ZXh0Q2FsbGJhY2spe3JldHVybiB2aWV3TW9kZWxPckJpbmRpbmdDb250ZXh0JiYodmlld01vZGVsT3JCaW5kaW5nQ29udGV4dCBpbnN0YW5jZW9mIGtvLmJpbmRpbmdDb250ZXh0KT92aWV3TW9kZWxPckJpbmRpbmdDb250ZXh0Om5ldyBrby5iaW5kaW5nQ29udGV4dCh2aWV3TW9kZWxPckJpbmRpbmdDb250ZXh0LHVuZGVmaW5lZCx1bmRlZmluZWQsZXh0ZW5kQ29udGV4dENhbGxiYWNrKTt9CmtvLmFwcGx5QmluZGluZ0FjY2Vzc29yc1RvTm9kZT1mdW5jdGlvbihub2RlLGJpbmRpbmdzLHZpZXdNb2RlbE9yQmluZGluZ0NvbnRleHQpe2lmKG5vZGUubm9kZVR5cGU9PT0xKQprby52aXJ0dWFsRWxlbWVudHMubm9ybWFsaXNlVmlydHVhbEVsZW1lbnREb21TdHJ1Y3R1cmUobm9kZSk7cmV0dXJuIGFwcGx5QmluZGluZ3NUb05vZGVJbnRlcm5hbChub2RlLGJpbmRpbmdzLGdldEJpbmRpbmdDb250ZXh0KHZpZXdNb2RlbE9yQmluZGluZ0NvbnRleHQpKTt9O2tvLmFwcGx5QmluZGluZ3NUb05vZGU9ZnVuY3Rpb24obm9kZSxiaW5kaW5ncyx2aWV3TW9kZWxPckJpbmRpbmdDb250ZXh0KXt2YXIgY29udGV4dD1nZXRCaW5kaW5nQ29udGV4dCh2aWV3TW9kZWxPckJpbmRpbmdDb250ZXh0KTtyZXR1cm4ga28uYXBwbHlCaW5kaW5nQWNjZXNzb3JzVG9Ob2RlKG5vZGUsbWFrZUJpbmRpbmdBY2Nlc3NvcnMoYmluZGluZ3MsY29udGV4dCxub2RlKSxjb250ZXh0KTt9O2tvLmFwcGx5QmluZGluZ3NUb0Rlc2NlbmRhbnRzPWZ1bmN0aW9uKHZpZXdNb2RlbE9yQmluZGluZ0NvbnRleHQscm9vdE5vZGUpe2lmKHJvb3ROb2RlLm5vZGVUeXBlPT09MXx8cm9vdE5vZGUubm9kZVR5cGU9PT04KQphcHBseUJpbmRpbmdzVG9EZXNjZW5kYW50c0ludGVybmFsKGdldEJpbmRpbmdDb250ZXh0KHZpZXdNb2RlbE9yQmluZGluZ0NvbnRleHQpLHJvb3ROb2RlKTt9O2tvLmFwcGx5QmluZGluZ3M9ZnVuY3Rpb24odmlld01vZGVsT3JCaW5kaW5nQ29udGV4dCxyb290Tm9kZSxleHRlbmRDb250ZXh0Q2FsbGJhY2spe2lmKCFqUXVlcnlJbnN0YW5jZSYmd2luZG93WydqUXVlcnknXSl7alF1ZXJ5SW5zdGFuY2U9d2luZG93WydqUXVlcnknXTt9CmlmKGFyZ3VtZW50cy5sZW5ndGg8Mil7cm9vdE5vZGU9ZG9jdW1lbnQuYm9keTtpZighcm9vdE5vZGUpe3Rocm93IEVycm9yKCJrby5hcHBseUJpbmRpbmdzOiBjb3VsZCBub3QgZmluZCBkb2N1bWVudC5ib2R5OyBoYXMgdGhlIGRvY3VtZW50IGJlZW4gbG9hZGVkPyIpO319ZWxzZSBpZighcm9vdE5vZGV8fChyb290Tm9kZS5ub2RlVHlwZSE9PTEmJnJvb3ROb2RlLm5vZGVUeXBlIT09OCkpe3Rocm93IEVycm9yKCJrby5hcHBseUJpbmRpbmdzOiBmaXJzdCBwYXJhbWV0ZXIgc2hvdWxkIGJlIHlvdXIgdmlldyBtb2RlbDsgc2Vjb25kIHBhcmFtZXRlciBzaG91bGQgYmUgYSBET00gbm9kZSIpO30KYXBwbHlCaW5kaW5nc1RvTm9kZUFuZERlc2NlbmRhbnRzSW50ZXJuYWwoZ2V0QmluZGluZ0NvbnRleHQodmlld01vZGVsT3JCaW5kaW5nQ29udGV4dCxleHRlbmRDb250ZXh0Q2FsbGJhY2spLHJvb3ROb2RlKTt9O2tvLmNvbnRleHRGb3I9ZnVuY3Rpb24obm9kZSl7aWYobm9kZSYmKG5vZGUubm9kZVR5cGU9PT0xfHxub2RlLm5vZGVUeXBlPT09OCkpe3JldHVybiBrby5zdG9yZWRCaW5kaW5nQ29udGV4dEZvck5vZGUobm9kZSk7fQpyZXR1cm4gdW5kZWZpbmVkO307a28uZGF0YUZvcj1mdW5jdGlvbihub2RlKXt2YXIgY29udGV4dD1rby5jb250ZXh0Rm9yKG5vZGUpO3JldHVybiBjb250ZXh0P2NvbnRleHRbJyRkYXRhJ106dW5kZWZpbmVkO307a28uZXhwb3J0U3ltYm9sKCdiaW5kaW5nSGFuZGxlcnMnLGtvLmJpbmRpbmdIYW5kbGVycyk7a28uZXhwb3J0U3ltYm9sKCdiaW5kaW5nRXZlbnQnLGtvLmJpbmRpbmdFdmVudCk7a28uZXhwb3J0U3ltYm9sKCdiaW5kaW5nRXZlbnQuc3Vic2NyaWJlJyxrby5iaW5kaW5nRXZlbnQuc3Vic2NyaWJlKTtrby5leHBvcnRTeW1ib2woJ2JpbmRpbmdFdmVudC5zdGFydFBvc3NpYmx5QXN5bmNDb250ZW50QmluZGluZycsa28uYmluZGluZ0V2ZW50LnN0YXJ0UG9zc2libHlBc3luY0NvbnRlbnRCaW5kaW5nKTtrby5leHBvcnRTeW1ib2woJ2FwcGx5QmluZGluZ3MnLGtvLmFwcGx5QmluZGluZ3MpO2tvLmV4cG9ydFN5bWJvbCgnYXBwbHlCaW5kaW5nc1RvRGVzY2VuZGFudHMnLGtvLmFwcGx5QmluZGluZ3NUb0Rlc2NlbmRhbnRzKTtrby5leHBvcnRTeW1ib2woJ2FwcGx5QmluZGluZ0FjY2Vzc29yc1RvTm9kZScsa28uYXBwbHlCaW5kaW5nQWNjZXNzb3JzVG9Ob2RlKTtrby5leHBvcnRTeW1ib2woJ2FwcGx5QmluZGluZ3NUb05vZGUnLGtvLmFwcGx5QmluZGluZ3NUb05vZGUpO2tvLmV4cG9ydFN5bWJvbCgnY29udGV4dEZvcicsa28uY29udGV4dEZvcik7a28uZXhwb3J0U3ltYm9sKCdkYXRhRm9yJyxrby5kYXRhRm9yKTt9KSgpOyhmdW5jdGlvbih1bmRlZmluZWQpe3ZhciBsb2FkaW5nU3Vic2NyaWJhYmxlc0NhY2hlPXt9LGxvYWRlZERlZmluaXRpb25zQ2FjaGU9e307a28uY29tcG9uZW50cz17Z2V0OmZ1bmN0aW9uKGNvbXBvbmVudE5hbWUsY2FsbGJhY2spe3ZhciBjYWNoZWREZWZpbml0aW9uPWdldE9iamVjdE93blByb3BlcnR5KGxvYWRlZERlZmluaXRpb25zQ2FjaGUsY29tcG9uZW50TmFtZSk7aWYoY2FjaGVkRGVmaW5pdGlvbil7aWYoY2FjaGVkRGVmaW5pdGlvbi5pc1N5bmNocm9ub3VzQ29tcG9uZW50KXtrby5kZXBlbmRlbmN5RGV0ZWN0aW9uLmlnbm9yZShmdW5jdGlvbigpe2NhbGxiYWNrKGNhY2hlZERlZmluaXRpb24uZGVmaW5pdGlvbik7fSk7fWVsc2V7a28udGFza3Muc2NoZWR1bGUoZnVuY3Rpb24oKXtjYWxsYmFjayhjYWNoZWREZWZpbml0aW9uLmRlZmluaXRpb24pO30pO319ZWxzZXtsb2FkQ29tcG9uZW50QW5kTm90aWZ5KGNvbXBvbmVudE5hbWUsY2FsbGJhY2spO319LGNsZWFyQ2FjaGVkRGVmaW5pdGlvbjpmdW5jdGlvbihjb21wb25lbnROYW1lKXtkZWxldGUgbG9hZGVkRGVmaW5pdGlvbnNDYWNoZVtjb21wb25lbnROYW1lXTt9LF9nZXRGaXJzdFJlc3VsdEZyb21Mb2FkZXJzOmdldEZpcnN0UmVzdWx0RnJvbUxvYWRlcnN9O2Z1bmN0aW9uIGdldE9iamVjdE93blByb3BlcnR5KG9iaixwcm9wTmFtZSl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmoscHJvcE5hbWUpP29ialtwcm9wTmFtZV06dW5kZWZpbmVkO30KZnVuY3Rpb24gbG9hZENvbXBvbmVudEFuZE5vdGlmeShjb21wb25lbnROYW1lLGNhbGxiYWNrKXt2YXIgc3Vic2NyaWJhYmxlPWdldE9iamVjdE93blByb3BlcnR5KGxvYWRpbmdTdWJzY3JpYmFibGVzQ2FjaGUsY29tcG9uZW50TmFtZSksY29tcGxldGVkQXN5bmM7aWYoIXN1YnNjcmliYWJsZSl7c3Vic2NyaWJhYmxlPWxvYWRpbmdTdWJzY3JpYmFibGVzQ2FjaGVbY29tcG9uZW50TmFtZV09bmV3IGtvLnN1YnNjcmliYWJsZSgpO3N1YnNjcmliYWJsZS5zdWJzY3JpYmUoY2FsbGJhY2spO2JlZ2luTG9hZGluZ0NvbXBvbmVudChjb21wb25lbnROYW1lLGZ1bmN0aW9uKGRlZmluaXRpb24sY29uZmlnKXt2YXIgaXNTeW5jaHJvbm91c0NvbXBvbmVudD0hIShjb25maWcmJmNvbmZpZ1snc3luY2hyb25vdXMnXSk7bG9hZGVkRGVmaW5pdGlvbnNDYWNoZVtjb21wb25lbnROYW1lXT17ZGVmaW5pdGlvbjpkZWZpbml0aW9uLGlzU3luY2hyb25vdXNDb21wb25lbnQ6aXNTeW5jaHJvbm91c0NvbXBvbmVudH07ZGVsZXRlIGxvYWRpbmdTdWJzY3JpYmFibGVzQ2FjaGVbY29tcG9uZW50TmFtZV07aWYoY29tcGxldGVkQXN5bmN8fGlzU3luY2hyb25vdXNDb21wb25lbnQpe3N1YnNjcmliYWJsZVsnbm90aWZ5U3Vic2NyaWJlcnMnXShkZWZpbml0aW9uKTt9ZWxzZXtrby50YXNrcy5zY2hlZHVsZShmdW5jdGlvbigpe3N1YnNjcmliYWJsZVsnbm90aWZ5U3Vic2NyaWJlcnMnXShkZWZpbml0aW9uKTt9KTt9fSk7Y29tcGxldGVkQXN5bmM9dHJ1ZTt9ZWxzZXtzdWJzY3JpYmFibGUuc3Vic2NyaWJlKGNhbGxiYWNrKTt9fQpmdW5jdGlvbiBiZWdpbkxvYWRpbmdDb21wb25lbnQoY29tcG9uZW50TmFtZSxjYWxsYmFjayl7Z2V0Rmlyc3RSZXN1bHRGcm9tTG9hZGVycygnZ2V0Q29uZmlnJyxbY29tcG9uZW50TmFtZV0sZnVuY3Rpb24oY29uZmlnKXtpZihjb25maWcpe2dldEZpcnN0UmVzdWx0RnJvbUxvYWRlcnMoJ2xvYWRDb21wb25lbnQnLFtjb21wb25lbnROYW1lLGNvbmZpZ10sZnVuY3Rpb24oZGVmaW5pdGlvbil7Y2FsbGJhY2soZGVmaW5pdGlvbixjb25maWcpO30pO31lbHNle2NhbGxiYWNrKG51bGwsbnVsbCk7fX0pO30KZnVuY3Rpb24gZ2V0Rmlyc3RSZXN1bHRGcm9tTG9hZGVycyhtZXRob2ROYW1lLGFyZ3NFeGNlcHRDYWxsYmFjayxjYWxsYmFjayxjYW5kaWRhdGVMb2FkZXJzKXtpZighY2FuZGlkYXRlTG9hZGVycyl7Y2FuZGlkYXRlTG9hZGVycz1rby5jb21wb25lbnRzWydsb2FkZXJzJ10uc2xpY2UoMCk7fQp2YXIgY3VycmVudENhbmRpZGF0ZUxvYWRlcj1jYW5kaWRhdGVMb2FkZXJzLnNoaWZ0KCk7aWYoY3VycmVudENhbmRpZGF0ZUxvYWRlcil7dmFyIG1ldGhvZEluc3RhbmNlPWN1cnJlbnRDYW5kaWRhdGVMb2FkZXJbbWV0aG9kTmFtZV07aWYobWV0aG9kSW5zdGFuY2Upe3ZhciB3YXNBYm9ydGVkPWZhbHNlLHN5bmNocm9ub3VzUmV0dXJuVmFsdWU9bWV0aG9kSW5zdGFuY2UuYXBwbHkoY3VycmVudENhbmRpZGF0ZUxvYWRlcixhcmdzRXhjZXB0Q2FsbGJhY2suY29uY2F0KGZ1bmN0aW9uKHJlc3VsdCl7aWYod2FzQWJvcnRlZCl7Y2FsbGJhY2sobnVsbCk7fWVsc2UgaWYocmVzdWx0IT09bnVsbCl7Y2FsbGJhY2socmVzdWx0KTt9ZWxzZXtnZXRGaXJzdFJlc3VsdEZyb21Mb2FkZXJzKG1ldGhvZE5hbWUsYXJnc0V4Y2VwdENhbGxiYWNrLGNhbGxiYWNrLGNhbmRpZGF0ZUxvYWRlcnMpO319KSk7aWYoc3luY2hyb25vdXNSZXR1cm5WYWx1ZSE9PXVuZGVmaW5lZCl7d2FzQWJvcnRlZD10cnVlO2lmKCFjdXJyZW50Q2FuZGlkYXRlTG9hZGVyWydzdXBwcmVzc0xvYWRlckV4Y2VwdGlvbnMnXSl7dGhyb3cgbmV3IEVycm9yKCdDb21wb25lbnQgbG9hZGVycyBtdXN0IHN1cHBseSB2YWx1ZXMgYnkgaW52b2tpbmcgdGhlIGNhbGxiYWNrLCBub3QgYnkgcmV0dXJuaW5nIHZhbHVlcyBzeW5jaHJvbm91c2x5LicpO319fWVsc2V7Z2V0Rmlyc3RSZXN1bHRGcm9tTG9hZGVycyhtZXRob2ROYW1lLGFyZ3NFeGNlcHRDYWxsYmFjayxjYWxsYmFjayxjYW5kaWRhdGVMb2FkZXJzKTt9fWVsc2V7Y2FsbGJhY2sobnVsbCk7fX0Ka28uY29tcG9uZW50c1snbG9hZGVycyddPVtdO2tvLmV4cG9ydFN5bWJvbCgnY29tcG9uZW50cycsa28uY29tcG9uZW50cyk7a28uZXhwb3J0U3ltYm9sKCdjb21wb25lbnRzLmdldCcsa28uY29tcG9uZW50cy5nZXQpO2tvLmV4cG9ydFN5bWJvbCgnY29tcG9uZW50cy5jbGVhckNhY2hlZERlZmluaXRpb24nLGtvLmNvbXBvbmVudHMuY2xlYXJDYWNoZWREZWZpbml0aW9uKTt9KSgpOyhmdW5jdGlvbih1bmRlZmluZWQpe3ZhciBkZWZhdWx0Q29uZmlnUmVnaXN0cnk9e307a28uY29tcG9uZW50cy5yZWdpc3Rlcj1mdW5jdGlvbihjb21wb25lbnROYW1lLGNvbmZpZyl7aWYoIWNvbmZpZyl7dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvbmZpZ3VyYXRpb24gZm9yICcrY29tcG9uZW50TmFtZSk7fQppZihrby5jb21wb25lbnRzLmlzUmVnaXN0ZXJlZChjb21wb25lbnROYW1lKSl7dGhyb3cgbmV3IEVycm9yKCdDb21wb25lbnQgJytjb21wb25lbnROYW1lKycgaXMgYWxyZWFkeSByZWdpc3RlcmVkJyk7fQpkZWZhdWx0Q29uZmlnUmVnaXN0cnlbY29tcG9uZW50TmFtZV09Y29uZmlnO307a28uY29tcG9uZW50cy5pc1JlZ2lzdGVyZWQ9ZnVuY3Rpb24oY29tcG9uZW50TmFtZSl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChkZWZhdWx0Q29uZmlnUmVnaXN0cnksY29tcG9uZW50TmFtZSk7fTtrby5jb21wb25lbnRzLnVucmVnaXN0ZXI9ZnVuY3Rpb24oY29tcG9uZW50TmFtZSl7ZGVsZXRlIGRlZmF1bHRDb25maWdSZWdpc3RyeVtjb21wb25lbnROYW1lXTtrby5jb21wb25lbnRzLmNsZWFyQ2FjaGVkRGVmaW5pdGlvbihjb21wb25lbnROYW1lKTt9O2tvLmNvbXBvbmVudHMuZGVmYXVsdExvYWRlcj17J2dldENvbmZpZyc6ZnVuY3Rpb24oY29tcG9uZW50TmFtZSxjYWxsYmFjayl7dmFyIHJlc3VsdD1rby5jb21wb25lbnRzLmlzUmVnaXN0ZXJlZChjb21wb25lbnROYW1lKT9kZWZhdWx0Q29uZmlnUmVnaXN0cnlbY29tcG9uZW50TmFtZV06bnVsbDtjYWxsYmFjayhyZXN1bHQpO30sJ2xvYWRDb21wb25lbnQnOmZ1bmN0aW9uKGNvbXBvbmVudE5hbWUsY29uZmlnLGNhbGxiYWNrKXt2YXIgZXJyb3JDYWxsYmFjaz1tYWtlRXJyb3JDYWxsYmFjayhjb21wb25lbnROYW1lKTtwb3NzaWJseUdldENvbmZpZ0Zyb21BbWQoZXJyb3JDYWxsYmFjayxjb25maWcsZnVuY3Rpb24obG9hZGVkQ29uZmlnKXtyZXNvbHZlQ29uZmlnKGNvbXBvbmVudE5hbWUsZXJyb3JDYWxsYmFjayxsb2FkZWRDb25maWcsY2FsbGJhY2spO30pO30sJ2xvYWRUZW1wbGF0ZSc6ZnVuY3Rpb24oY29tcG9uZW50TmFtZSx0ZW1wbGF0ZUNvbmZpZyxjYWxsYmFjayl7cmVzb2x2ZVRlbXBsYXRlKG1ha2VFcnJvckNhbGxiYWNrKGNvbXBvbmVudE5hbWUpLHRlbXBsYXRlQ29uZmlnLGNhbGxiYWNrKTt9LCdsb2FkVmlld01vZGVsJzpmdW5jdGlvbihjb21wb25lbnROYW1lLHZpZXdNb2RlbENvbmZpZyxjYWxsYmFjayl7cmVzb2x2ZVZpZXdNb2RlbChtYWtlRXJyb3JDYWxsYmFjayhjb21wb25lbnROYW1lKSx2aWV3TW9kZWxDb25maWcsY2FsbGJhY2spO319O3ZhciBjcmVhdGVWaWV3TW9kZWxLZXk9J2NyZWF0ZVZpZXdNb2RlbCc7ZnVuY3Rpb24gcmVzb2x2ZUNvbmZpZyhjb21wb25lbnROYW1lLGVycm9yQ2FsbGJhY2ssY29uZmlnLGNhbGxiYWNrKXt2YXIgcmVzdWx0PXt9LG1ha2VDYWxsQmFja1doZW5aZXJvPTIsdHJ5SXNzdWVDYWxsYmFjaz1mdW5jdGlvbigpe2lmKC0tbWFrZUNhbGxCYWNrV2hlblplcm89PT0wKXtjYWxsYmFjayhyZXN1bHQpO319LHRlbXBsYXRlQ29uZmlnPWNvbmZpZ1sndGVtcGxhdGUnXSx2aWV3TW9kZWxDb25maWc9Y29uZmlnWyd2aWV3TW9kZWwnXTtpZih0ZW1wbGF0ZUNvbmZpZyl7cG9zc2libHlHZXRDb25maWdGcm9tQW1kKGVycm9yQ2FsbGJhY2ssdGVtcGxhdGVDb25maWcsZnVuY3Rpb24obG9hZGVkQ29uZmlnKXtrby5jb21wb25lbnRzLl9nZXRGaXJzdFJlc3VsdEZyb21Mb2FkZXJzKCdsb2FkVGVtcGxhdGUnLFtjb21wb25lbnROYW1lLGxvYWRlZENvbmZpZ10sZnVuY3Rpb24ocmVzb2x2ZWRUZW1wbGF0ZSl7cmVzdWx0Wyd0ZW1wbGF0ZSddPXJlc29sdmVkVGVtcGxhdGU7dHJ5SXNzdWVDYWxsYmFjaygpO30pO30pO31lbHNle3RyeUlzc3VlQ2FsbGJhY2soKTt9CmlmKHZpZXdNb2RlbENvbmZpZyl7cG9zc2libHlHZXRDb25maWdGcm9tQW1kKGVycm9yQ2FsbGJhY2ssdmlld01vZGVsQ29uZmlnLGZ1bmN0aW9uKGxvYWRlZENvbmZpZyl7a28uY29tcG9uZW50cy5fZ2V0Rmlyc3RSZXN1bHRGcm9tTG9hZGVycygnbG9hZFZpZXdNb2RlbCcsW2NvbXBvbmVudE5hbWUsbG9hZGVkQ29uZmlnXSxmdW5jdGlvbihyZXNvbHZlZFZpZXdNb2RlbCl7cmVzdWx0W2NyZWF0ZVZpZXdNb2RlbEtleV09cmVzb2x2ZWRWaWV3TW9kZWw7dHJ5SXNzdWVDYWxsYmFjaygpO30pO30pO31lbHNle3RyeUlzc3VlQ2FsbGJhY2soKTt9fQpmdW5jdGlvbiByZXNvbHZlVGVtcGxhdGUoZXJyb3JDYWxsYmFjayx0ZW1wbGF0ZUNvbmZpZyxjYWxsYmFjayl7aWYodHlwZW9mIHRlbXBsYXRlQ29uZmlnPT09J3N0cmluZycpe2NhbGxiYWNrKGtvLnV0aWxzLnBhcnNlSHRtbEZyYWdtZW50KHRlbXBsYXRlQ29uZmlnKSk7fWVsc2UgaWYodGVtcGxhdGVDb25maWcgaW5zdGFuY2VvZiBBcnJheSl7Y2FsbGJhY2sodGVtcGxhdGVDb25maWcpO31lbHNlIGlmKGlzRG9jdW1lbnRGcmFnbWVudCh0ZW1wbGF0ZUNvbmZpZykpe2NhbGxiYWNrKGtvLnV0aWxzLm1ha2VBcnJheSh0ZW1wbGF0ZUNvbmZpZy5jaGlsZE5vZGVzKSk7fWVsc2UgaWYodGVtcGxhdGVDb25maWdbJ2VsZW1lbnQnXSl7dmFyIGVsZW1lbnQ9dGVtcGxhdGVDb25maWdbJ2VsZW1lbnQnXTtpZihpc0RvbUVsZW1lbnQoZWxlbWVudCkpe2NhbGxiYWNrKGNsb25lTm9kZXNGcm9tVGVtcGxhdGVTb3VyY2VFbGVtZW50KGVsZW1lbnQpKTt9ZWxzZSBpZih0eXBlb2YgZWxlbWVudD09PSdzdHJpbmcnKXt2YXIgZWxlbUluc3RhbmNlPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1lbnQpO2lmKGVsZW1JbnN0YW5jZSl7Y2FsbGJhY2soY2xvbmVOb2Rlc0Zyb21UZW1wbGF0ZVNvdXJjZUVsZW1lbnQoZWxlbUluc3RhbmNlKSk7fWVsc2V7ZXJyb3JDYWxsYmFjaygnQ2Fubm90IGZpbmQgZWxlbWVudCB3aXRoIElEICcrZWxlbWVudCk7fX1lbHNle2Vycm9yQ2FsbGJhY2soJ1Vua25vd24gZWxlbWVudCB0eXBlOiAnK2VsZW1lbnQpO319ZWxzZXtlcnJvckNhbGxiYWNrKCdVbmtub3duIHRlbXBsYXRlIHZhbHVlOiAnK3RlbXBsYXRlQ29uZmlnKTt9fQpmdW5jdGlvbiByZXNvbHZlVmlld01vZGVsKGVycm9yQ2FsbGJhY2ssdmlld01vZGVsQ29uZmlnLGNhbGxiYWNrKXtpZih0eXBlb2Ygdmlld01vZGVsQ29uZmlnPT09J2Z1bmN0aW9uJyl7Y2FsbGJhY2soZnVuY3Rpb24ocGFyYW1zKXtyZXR1cm4gbmV3IHZpZXdNb2RlbENvbmZpZyhwYXJhbXMpO30pO31lbHNlIGlmKHR5cGVvZiB2aWV3TW9kZWxDb25maWdbY3JlYXRlVmlld01vZGVsS2V5XT09PSdmdW5jdGlvbicpe2NhbGxiYWNrKHZpZXdNb2RlbENvbmZpZ1tjcmVhdGVWaWV3TW9kZWxLZXldKTt9ZWxzZSBpZignaW5zdGFuY2UnaW4gdmlld01vZGVsQ29uZmlnKXt2YXIgZml4ZWRJbnN0YW5jZT12aWV3TW9kZWxDb25maWdbJ2luc3RhbmNlJ107Y2FsbGJhY2soZnVuY3Rpb24ocGFyYW1zLGNvbXBvbmVudEluZm8pe3JldHVybiBmaXhlZEluc3RhbmNlO30pO31lbHNlIGlmKCd2aWV3TW9kZWwnaW4gdmlld01vZGVsQ29uZmlnKXtyZXNvbHZlVmlld01vZGVsKGVycm9yQ2FsbGJhY2ssdmlld01vZGVsQ29uZmlnWyd2aWV3TW9kZWwnXSxjYWxsYmFjayk7fWVsc2V7ZXJyb3JDYWxsYmFjaygnVW5rbm93biB2aWV3TW9kZWwgdmFsdWU6ICcrdmlld01vZGVsQ29uZmlnKTt9fQpmdW5jdGlvbiBjbG9uZU5vZGVzRnJvbVRlbXBsYXRlU291cmNlRWxlbWVudChlbGVtSW5zdGFuY2Upe3N3aXRjaChrby51dGlscy50YWdOYW1lTG93ZXIoZWxlbUluc3RhbmNlKSl7Y2FzZSdzY3JpcHQnOnJldHVybiBrby51dGlscy5wYXJzZUh0bWxGcmFnbWVudChlbGVtSW5zdGFuY2UudGV4dCk7Y2FzZSd0ZXh0YXJlYSc6cmV0dXJuIGtvLnV0aWxzLnBhcnNlSHRtbEZyYWdtZW50KGVsZW1JbnN0YW5jZS52YWx1ZSk7Y2FzZSd0ZW1wbGF0ZSc6aWYoaXNEb2N1bWVudEZyYWdtZW50KGVsZW1JbnN0YW5jZS5jb250ZW50KSl7cmV0dXJuIGtvLnV0aWxzLmNsb25lTm9kZXMoZWxlbUluc3RhbmNlLmNvbnRlbnQuY2hpbGROb2Rlcyk7fX0KcmV0dXJuIGtvLnV0aWxzLmNsb25lTm9kZXMoZWxlbUluc3RhbmNlLmNoaWxkTm9kZXMpO30KZnVuY3Rpb24gaXNEb21FbGVtZW50KG9iail7aWYod2luZG93WydIVE1MRWxlbWVudCddKXtyZXR1cm4gb2JqIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQ7fWVsc2V7cmV0dXJuIG9iaiYmb2JqLnRhZ05hbWUmJm9iai5ub2RlVHlwZT09PTE7fX0KZnVuY3Rpb24gaXNEb2N1bWVudEZyYWdtZW50KG9iail7aWYod2luZG93WydEb2N1bWVudEZyYWdtZW50J10pe3JldHVybiBvYmogaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50O31lbHNle3JldHVybiBvYmomJm9iai5ub2RlVHlwZT09PTExO319CmZ1bmN0aW9uIHBvc3NpYmx5R2V0Q29uZmlnRnJvbUFtZChlcnJvckNhbGxiYWNrLGNvbmZpZyxjYWxsYmFjayl7aWYodHlwZW9mIGNvbmZpZ1sncmVxdWlyZSddPT09J3N0cmluZycpe2lmKGFtZFJlcXVpcmV8fHdpbmRvd1sncmVxdWlyZSddKXsoYW1kUmVxdWlyZXx8d2luZG93WydyZXF1aXJlJ10pKFtjb25maWdbJ3JlcXVpcmUnXV0sZnVuY3Rpb24obW9kdWxlKXtpZihtb2R1bGUmJnR5cGVvZiBtb2R1bGU9PT0nb2JqZWN0JyYmbW9kdWxlLl9fZXNNb2R1bGUmJm1vZHVsZS5kZWZhdWx0KXttb2R1bGU9bW9kdWxlLmRlZmF1bHQ7fQpjYWxsYmFjayhtb2R1bGUpO30pO31lbHNle2Vycm9yQ2FsbGJhY2soJ1VzZXMgcmVxdWlyZSwgYnV0IG5vIEFNRCBsb2FkZXIgaXMgcHJlc2VudCcpO319ZWxzZXtjYWxsYmFjayhjb25maWcpO319CmZ1bmN0aW9uIG1ha2VFcnJvckNhbGxiYWNrKGNvbXBvbmVudE5hbWUpe3JldHVybiBmdW5jdGlvbihtZXNzYWdlKXt0aHJvdyBuZXcgRXJyb3IoJ0NvbXBvbmVudCBcJycrY29tcG9uZW50TmFtZSsnXCc6ICcrbWVzc2FnZSk7fTt9CmtvLmV4cG9ydFN5bWJvbCgnY29tcG9uZW50cy5yZWdpc3Rlcicsa28uY29tcG9uZW50cy5yZWdpc3Rlcik7a28uZXhwb3J0U3ltYm9sKCdjb21wb25lbnRzLmlzUmVnaXN0ZXJlZCcsa28uY29tcG9uZW50cy5pc1JlZ2lzdGVyZWQpO2tvLmV4cG9ydFN5bWJvbCgnY29tcG9uZW50cy51bnJlZ2lzdGVyJyxrby5jb21wb25lbnRzLnVucmVnaXN0ZXIpO2tvLmV4cG9ydFN5bWJvbCgnY29tcG9uZW50cy5kZWZhdWx0TG9hZGVyJyxrby5jb21wb25lbnRzLmRlZmF1bHRMb2FkZXIpO2tvLmNvbXBvbmVudHNbJ2xvYWRlcnMnXS5wdXNoKGtvLmNvbXBvbmVudHMuZGVmYXVsdExvYWRlcik7a28uY29tcG9uZW50cy5fYWxsUmVnaXN0ZXJlZENvbXBvbmVudHM9ZGVmYXVsdENvbmZpZ1JlZ2lzdHJ5O30pKCk7KGZ1bmN0aW9uKHVuZGVmaW5lZCl7a28uY29tcG9uZW50c1snZ2V0Q29tcG9uZW50TmFtZUZvck5vZGUnXT1mdW5jdGlvbihub2RlKXt2YXIgdGFnTmFtZUxvd2VyPWtvLnV0aWxzLnRhZ05hbWVMb3dlcihub2RlKTtpZihrby5jb21wb25lbnRzLmlzUmVnaXN0ZXJlZCh0YWdOYW1lTG93ZXIpKXtpZih0YWdOYW1lTG93ZXIuaW5kZXhPZignLScpIT0tMXx8KCcnK25vZGUpPT0iW29iamVjdCBIVE1MVW5rbm93bkVsZW1lbnRdInx8KGtvLnV0aWxzLmllVmVyc2lvbjw9OCYmbm9kZS50YWdOYW1lPT09dGFnTmFtZUxvd2VyKSl7cmV0dXJuIHRhZ05hbWVMb3dlcjt9fX07a28uY29tcG9uZW50cy5hZGRCaW5kaW5nc0ZvckN1c3RvbUVsZW1lbnQ9ZnVuY3Rpb24oYWxsQmluZGluZ3Msbm9kZSxiaW5kaW5nQ29udGV4dCx2YWx1ZUFjY2Vzc29ycyl7aWYobm9kZS5ub2RlVHlwZT09PTEpe3ZhciBjb21wb25lbnROYW1lPWtvLmNvbXBvbmVudHNbJ2dldENvbXBvbmVudE5hbWVGb3JOb2RlJ10obm9kZSk7aWYoY29tcG9uZW50TmFtZSl7YWxsQmluZGluZ3M9YWxsQmluZGluZ3N8fHt9O2lmKGFsbEJpbmRpbmdzWydjb21wb25lbnQnXSl7dGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgdXNlIHRoZSAiY29tcG9uZW50IiBiaW5kaW5nIG9uIGEgY3VzdG9tIGVsZW1lbnQgbWF0Y2hpbmcgYSBjb21wb25lbnQnKTt9CnZhciBjb21wb25lbnRCaW5kaW5nVmFsdWU9eyduYW1lJzpjb21wb25lbnROYW1lLCdwYXJhbXMnOmdldENvbXBvbmVudFBhcmFtc0Zyb21DdXN0b21FbGVtZW50KG5vZGUsYmluZGluZ0NvbnRleHQpfTthbGxCaW5kaW5nc1snY29tcG9uZW50J109dmFsdWVBY2Nlc3NvcnM/ZnVuY3Rpb24oKXtyZXR1cm4gY29tcG9uZW50QmluZGluZ1ZhbHVlO306Y29tcG9uZW50QmluZGluZ1ZhbHVlO319CnJldHVybiBhbGxCaW5kaW5nczt9CnZhciBuYXRpdmVCaW5kaW5nUHJvdmlkZXJJbnN0YW5jZT1uZXcga28uYmluZGluZ1Byb3ZpZGVyKCk7ZnVuY3Rpb24gZ2V0Q29tcG9uZW50UGFyYW1zRnJvbUN1c3RvbUVsZW1lbnQoZWxlbSxiaW5kaW5nQ29udGV4dCl7dmFyIHBhcmFtc0F0dHJpYnV0ZT1lbGVtLmdldEF0dHJpYnV0ZSgncGFyYW1zJyk7aWYocGFyYW1zQXR0cmlidXRlKXt2YXIgcGFyYW1zPW5hdGl2ZUJpbmRpbmdQcm92aWRlckluc3RhbmNlWydwYXJzZUJpbmRpbmdzU3RyaW5nJ10ocGFyYW1zQXR0cmlidXRlLGJpbmRpbmdDb250ZXh0LGVsZW0seyd2YWx1ZUFjY2Vzc29ycyc6dHJ1ZSwnYmluZGluZ1BhcmFtcyc6dHJ1ZX0pLHJhd1BhcmFtQ29tcHV0ZWRWYWx1ZXM9a28udXRpbHMub2JqZWN0TWFwKHBhcmFtcyxmdW5jdGlvbihwYXJhbVZhbHVlLHBhcmFtTmFtZSl7cmV0dXJuIGtvLmNvbXB1dGVkKHBhcmFtVmFsdWUsbnVsbCx7ZGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkOmVsZW19KTt9KSxyZXN1bHQ9a28udXRpbHMub2JqZWN0TWFwKHJhd1BhcmFtQ29tcHV0ZWRWYWx1ZXMsZnVuY3Rpb24ocGFyYW1WYWx1ZUNvbXB1dGVkLHBhcmFtTmFtZSl7dmFyIHBhcmFtVmFsdWU9cGFyYW1WYWx1ZUNvbXB1dGVkLnBlZWsoKTtpZighcGFyYW1WYWx1ZUNvbXB1dGVkLmlzQWN0aXZlKCkpe3JldHVybiBwYXJhbVZhbHVlO31lbHNle3JldHVybiBrby5jb21wdXRlZCh7J3JlYWQnOmZ1bmN0aW9uKCl7cmV0dXJuIGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUocGFyYW1WYWx1ZUNvbXB1dGVkKCkpO30sJ3dyaXRlJzprby5pc1dyaXRlYWJsZU9ic2VydmFibGUocGFyYW1WYWx1ZSkmJmZ1bmN0aW9uKHZhbHVlKXtwYXJhbVZhbHVlQ29tcHV0ZWQoKSh2YWx1ZSk7fSxkaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQ6ZWxlbX0pO319KTtpZighT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwnJHJhdycpKXtyZXN1bHRbJyRyYXcnXT1yYXdQYXJhbUNvbXB1dGVkVmFsdWVzO30KcmV0dXJuIHJlc3VsdDt9ZWxzZXtyZXR1cm57JyRyYXcnOnt9fTt9fQppZihrby51dGlscy5pZVZlcnNpb248OSl7a28uY29tcG9uZW50c1sncmVnaXN0ZXInXT0oZnVuY3Rpb24ob3JpZ2luYWxGdW5jdGlvbil7cmV0dXJuIGZ1bmN0aW9uKGNvbXBvbmVudE5hbWUpe2RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50TmFtZSk7cmV0dXJuIG9yaWdpbmFsRnVuY3Rpb24uYXBwbHkodGhpcyxhcmd1bWVudHMpO319KShrby5jb21wb25lbnRzWydyZWdpc3RlciddKTtkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50PShmdW5jdGlvbihvcmlnaW5hbEZ1bmN0aW9uKXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgbmV3RG9jRnJhZz1vcmlnaW5hbEZ1bmN0aW9uKCksYWxsQ29tcG9uZW50cz1rby5jb21wb25lbnRzLl9hbGxSZWdpc3RlcmVkQ29tcG9uZW50cztmb3IodmFyIGNvbXBvbmVudE5hbWUgaW4gYWxsQ29tcG9uZW50cyl7aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGFsbENvbXBvbmVudHMsY29tcG9uZW50TmFtZSkpe25ld0RvY0ZyYWcuY3JlYXRlRWxlbWVudChjb21wb25lbnROYW1lKTt9fQpyZXR1cm4gbmV3RG9jRnJhZzt9O30pKGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQpO319KSgpOyhmdW5jdGlvbih1bmRlZmluZWQpe3ZhciBjb21wb25lbnRMb2FkaW5nT3BlcmF0aW9uVW5pcXVlSWQ9MDtrby5iaW5kaW5nSGFuZGxlcnNbJ2NvbXBvbmVudCddPXsnaW5pdCc6ZnVuY3Rpb24oZWxlbWVudCx2YWx1ZUFjY2Vzc29yLGlnbm9yZWQxLGlnbm9yZWQyLGJpbmRpbmdDb250ZXh0KXt2YXIgY3VycmVudFZpZXdNb2RlbCxjdXJyZW50TG9hZGluZ09wZXJhdGlvbklkLGFmdGVyUmVuZGVyU3ViLGRpc3Bvc2VBc3NvY2lhdGVkQ29tcG9uZW50Vmlld01vZGVsPWZ1bmN0aW9uKCl7dmFyIGN1cnJlbnRWaWV3TW9kZWxEaXNwb3NlPWN1cnJlbnRWaWV3TW9kZWwmJmN1cnJlbnRWaWV3TW9kZWxbJ2Rpc3Bvc2UnXTtpZih0eXBlb2YgY3VycmVudFZpZXdNb2RlbERpc3Bvc2U9PT0nZnVuY3Rpb24nKXtjdXJyZW50Vmlld01vZGVsRGlzcG9zZS5jYWxsKGN1cnJlbnRWaWV3TW9kZWwpO30KaWYoYWZ0ZXJSZW5kZXJTdWIpe2FmdGVyUmVuZGVyU3ViLmRpc3Bvc2UoKTt9CmFmdGVyUmVuZGVyU3ViPW51bGw7Y3VycmVudFZpZXdNb2RlbD1udWxsO2N1cnJlbnRMb2FkaW5nT3BlcmF0aW9uSWQ9bnVsbDt9LG9yaWdpbmFsQ2hpbGROb2Rlcz1rby51dGlscy5tYWtlQXJyYXkoa28udmlydHVhbEVsZW1lbnRzLmNoaWxkTm9kZXMoZWxlbWVudCkpO2tvLnZpcnR1YWxFbGVtZW50cy5lbXB0eU5vZGUoZWxlbWVudCk7a28udXRpbHMuZG9tTm9kZURpc3Bvc2FsLmFkZERpc3Bvc2VDYWxsYmFjayhlbGVtZW50LGRpc3Bvc2VBc3NvY2lhdGVkQ29tcG9uZW50Vmlld01vZGVsKTtrby5jb21wdXRlZChmdW5jdGlvbigpe3ZhciB2YWx1ZT1rby51dGlscy51bndyYXBPYnNlcnZhYmxlKHZhbHVlQWNjZXNzb3IoKSksY29tcG9uZW50TmFtZSxjb21wb25lbnRQYXJhbXM7aWYodHlwZW9mIHZhbHVlPT09J3N0cmluZycpe2NvbXBvbmVudE5hbWU9dmFsdWU7fWVsc2V7Y29tcG9uZW50TmFtZT1rby51dGlscy51bndyYXBPYnNlcnZhYmxlKHZhbHVlWyduYW1lJ10pO2NvbXBvbmVudFBhcmFtcz1rby51dGlscy51bndyYXBPYnNlcnZhYmxlKHZhbHVlWydwYXJhbXMnXSk7fQppZighY29tcG9uZW50TmFtZSl7dGhyb3cgbmV3IEVycm9yKCdObyBjb21wb25lbnQgbmFtZSBzcGVjaWZpZWQnKTt9CnZhciBhc3luY0NvbnRleHQ9a28uYmluZGluZ0V2ZW50LnN0YXJ0UG9zc2libHlBc3luY0NvbnRlbnRCaW5kaW5nKGVsZW1lbnQsYmluZGluZ0NvbnRleHQpO3ZhciBsb2FkaW5nT3BlcmF0aW9uSWQ9Y3VycmVudExvYWRpbmdPcGVyYXRpb25JZD0rK2NvbXBvbmVudExvYWRpbmdPcGVyYXRpb25VbmlxdWVJZDtrby5jb21wb25lbnRzLmdldChjb21wb25lbnROYW1lLGZ1bmN0aW9uKGNvbXBvbmVudERlZmluaXRpb24pe2lmKGN1cnJlbnRMb2FkaW5nT3BlcmF0aW9uSWQhPT1sb2FkaW5nT3BlcmF0aW9uSWQpe3JldHVybjt9CmRpc3Bvc2VBc3NvY2lhdGVkQ29tcG9uZW50Vmlld01vZGVsKCk7aWYoIWNvbXBvbmVudERlZmluaXRpb24pe3Rocm93IG5ldyBFcnJvcignVW5rbm93biBjb21wb25lbnQgXCcnK2NvbXBvbmVudE5hbWUrJ1wnJyk7fQpjbG9uZVRlbXBsYXRlSW50b0VsZW1lbnQoY29tcG9uZW50TmFtZSxjb21wb25lbnREZWZpbml0aW9uLGVsZW1lbnQpO3ZhciBjb21wb25lbnRJbmZvPXsnZWxlbWVudCc6ZWxlbWVudCwndGVtcGxhdGVOb2Rlcyc6b3JpZ2luYWxDaGlsZE5vZGVzfTt2YXIgY29tcG9uZW50Vmlld01vZGVsPWNyZWF0ZVZpZXdNb2RlbChjb21wb25lbnREZWZpbml0aW9uLGNvbXBvbmVudFBhcmFtcyxjb21wb25lbnRJbmZvKSxjaGlsZEJpbmRpbmdDb250ZXh0PWFzeW5jQ29udGV4dFsnY3JlYXRlQ2hpbGRDb250ZXh0J10oY29tcG9uZW50Vmlld01vZGVsLHsnZXh0ZW5kJzpmdW5jdGlvbihjdHgpe2N0eFsnJGNvbXBvbmVudCddPWNvbXBvbmVudFZpZXdNb2RlbDtjdHhbJyRjb21wb25lbnRUZW1wbGF0ZU5vZGVzJ109b3JpZ2luYWxDaGlsZE5vZGVzO319KTtpZihjb21wb25lbnRWaWV3TW9kZWwmJmNvbXBvbmVudFZpZXdNb2RlbFsna29EZXNjZW5kYW50c0NvbXBsZXRlJ10pe2FmdGVyUmVuZGVyU3ViPWtvLmJpbmRpbmdFdmVudC5zdWJzY3JpYmUoZWxlbWVudCxrby5iaW5kaW5nRXZlbnQuZGVzY2VuZGFudHNDb21wbGV0ZSxjb21wb25lbnRWaWV3TW9kZWxbJ2tvRGVzY2VuZGFudHNDb21wbGV0ZSddLGNvbXBvbmVudFZpZXdNb2RlbCk7fQpjdXJyZW50Vmlld01vZGVsPWNvbXBvbmVudFZpZXdNb2RlbDtrby5hcHBseUJpbmRpbmdzVG9EZXNjZW5kYW50cyhjaGlsZEJpbmRpbmdDb250ZXh0LGVsZW1lbnQpO30pO30sbnVsbCx7ZGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkOmVsZW1lbnR9KTtyZXR1cm57J2NvbnRyb2xzRGVzY2VuZGFudEJpbmRpbmdzJzp0cnVlfTt9fTtrby52aXJ0dWFsRWxlbWVudHMuYWxsb3dlZEJpbmRpbmdzWydjb21wb25lbnQnXT10cnVlO2Z1bmN0aW9uIGNsb25lVGVtcGxhdGVJbnRvRWxlbWVudChjb21wb25lbnROYW1lLGNvbXBvbmVudERlZmluaXRpb24sZWxlbWVudCl7dmFyIHRlbXBsYXRlPWNvbXBvbmVudERlZmluaXRpb25bJ3RlbXBsYXRlJ107aWYoIXRlbXBsYXRlKXt0aHJvdyBuZXcgRXJyb3IoJ0NvbXBvbmVudCBcJycrY29tcG9uZW50TmFtZSsnXCcgaGFzIG5vIHRlbXBsYXRlJyk7fQp2YXIgY2xvbmVkTm9kZXNBcnJheT1rby51dGlscy5jbG9uZU5vZGVzKHRlbXBsYXRlKTtrby52aXJ0dWFsRWxlbWVudHMuc2V0RG9tTm9kZUNoaWxkcmVuKGVsZW1lbnQsY2xvbmVkTm9kZXNBcnJheSk7fQpmdW5jdGlvbiBjcmVhdGVWaWV3TW9kZWwoY29tcG9uZW50RGVmaW5pdGlvbixjb21wb25lbnRQYXJhbXMsY29tcG9uZW50SW5mbyl7dmFyIGNvbXBvbmVudFZpZXdNb2RlbEZhY3Rvcnk9Y29tcG9uZW50RGVmaW5pdGlvblsnY3JlYXRlVmlld01vZGVsJ107cmV0dXJuIGNvbXBvbmVudFZpZXdNb2RlbEZhY3Rvcnk/Y29tcG9uZW50Vmlld01vZGVsRmFjdG9yeS5jYWxsKGNvbXBvbmVudERlZmluaXRpb24sY29tcG9uZW50UGFyYW1zLGNvbXBvbmVudEluZm8pOmNvbXBvbmVudFBhcmFtczt9fSkoKTt2YXIgYXR0ckh0bWxUb0phdmFTY3JpcHRNYXA9eydjbGFzcyc6J2NsYXNzTmFtZScsJ2Zvcic6J2h0bWxGb3InfTtrby5iaW5kaW5nSGFuZGxlcnNbJ2F0dHInXT17J3VwZGF0ZSc6ZnVuY3Rpb24oZWxlbWVudCx2YWx1ZUFjY2Vzc29yLGFsbEJpbmRpbmdzKXt2YXIgdmFsdWU9a28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh2YWx1ZUFjY2Vzc29yKCkpfHx7fTtrby51dGlscy5vYmplY3RGb3JFYWNoKHZhbHVlLGZ1bmN0aW9uKGF0dHJOYW1lLGF0dHJWYWx1ZSl7YXR0clZhbHVlPWtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUoYXR0clZhbHVlKTt2YXIgcHJlZml4TGVuPWF0dHJOYW1lLmluZGV4T2YoJzonKTt2YXIgbmFtZXNwYWNlPSJsb29rdXBOYW1lc3BhY2VVUkkiaW4gZWxlbWVudCYmcHJlZml4TGVuPjAmJmVsZW1lbnQubG9va3VwTmFtZXNwYWNlVVJJKGF0dHJOYW1lLnN1YnN0cigwLHByZWZpeExlbikpO3ZhciB0b1JlbW92ZT0oYXR0clZhbHVlPT09ZmFsc2UpfHwoYXR0clZhbHVlPT09bnVsbCl8fChhdHRyVmFsdWU9PT11bmRlZmluZWQpO2lmKHRvUmVtb3ZlKXtuYW1lc3BhY2U/ZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGVOUyhuYW1lc3BhY2UsYXR0ck5hbWUpOmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGF0dHJOYW1lKTt9ZWxzZXthdHRyVmFsdWU9YXR0clZhbHVlLnRvU3RyaW5nKCk7fQppZihrby51dGlscy5pZVZlcnNpb248PTgmJmF0dHJOYW1lIGluIGF0dHJIdG1sVG9KYXZhU2NyaXB0TWFwKXthdHRyTmFtZT1hdHRySHRtbFRvSmF2YVNjcmlwdE1hcFthdHRyTmFtZV07aWYodG9SZW1vdmUpCmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGF0dHJOYW1lKTtlbHNlCmVsZW1lbnRbYXR0ck5hbWVdPWF0dHJWYWx1ZTt9ZWxzZSBpZighdG9SZW1vdmUpe25hbWVzcGFjZT9lbGVtZW50LnNldEF0dHJpYnV0ZU5TKG5hbWVzcGFjZSxhdHRyTmFtZSxhdHRyVmFsdWUpOmVsZW1lbnQuc2V0QXR0cmlidXRlKGF0dHJOYW1lLGF0dHJWYWx1ZSk7fQppZihhdHRyTmFtZT09PSJuYW1lIil7a28udXRpbHMuc2V0RWxlbWVudE5hbWUoZWxlbWVudCx0b1JlbW92ZT8iIjphdHRyVmFsdWUpO319KTt9fTsoZnVuY3Rpb24oKXtrby5iaW5kaW5nSGFuZGxlcnNbJ2NoZWNrZWQnXT17J2FmdGVyJzpbJ3ZhbHVlJywnYXR0ciddLCdpbml0JzpmdW5jdGlvbihlbGVtZW50LHZhbHVlQWNjZXNzb3IsYWxsQmluZGluZ3Mpe3ZhciBjaGVja2VkVmFsdWU9a28ucHVyZUNvbXB1dGVkKGZ1bmN0aW9uKCl7aWYoYWxsQmluZGluZ3NbJ2hhcyddKCdjaGVja2VkVmFsdWUnKSl7cmV0dXJuIGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUoYWxsQmluZGluZ3MuZ2V0KCdjaGVja2VkVmFsdWUnKSk7fWVsc2UgaWYodXNlRWxlbWVudFZhbHVlKXtpZihhbGxCaW5kaW5nc1snaGFzJ10oJ3ZhbHVlJykpe3JldHVybiBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKGFsbEJpbmRpbmdzLmdldCgndmFsdWUnKSk7fWVsc2V7cmV0dXJuIGVsZW1lbnQudmFsdWU7fX19KTtmdW5jdGlvbiB1cGRhdGVNb2RlbCgpe3ZhciBpc0NoZWNrZWQ9ZWxlbWVudC5jaGVja2VkLGVsZW1WYWx1ZT1jaGVja2VkVmFsdWUoKTtpZihrby5jb21wdXRlZENvbnRleHQuaXNJbml0aWFsKCkpe3JldHVybjt9CmlmKCFpc0NoZWNrZWQmJihpc1JhZGlvfHxrby5jb21wdXRlZENvbnRleHQuZ2V0RGVwZW5kZW5jaWVzQ291bnQoKSkpe3JldHVybjt9CnZhciBtb2RlbFZhbHVlPWtvLmRlcGVuZGVuY3lEZXRlY3Rpb24uaWdub3JlKHZhbHVlQWNjZXNzb3IpO2lmKHZhbHVlSXNBcnJheSl7dmFyIHdyaXRhYmxlVmFsdWU9cmF3VmFsdWVJc05vbkFycmF5T2JzZXJ2YWJsZT9tb2RlbFZhbHVlLnBlZWsoKTptb2RlbFZhbHVlLHNhdmVPbGRWYWx1ZT1vbGRFbGVtVmFsdWU7b2xkRWxlbVZhbHVlPWVsZW1WYWx1ZTtpZihzYXZlT2xkVmFsdWUhPT1lbGVtVmFsdWUpe2lmKGlzQ2hlY2tlZCl7a28udXRpbHMuYWRkT3JSZW1vdmVJdGVtKHdyaXRhYmxlVmFsdWUsZWxlbVZhbHVlLHRydWUpO2tvLnV0aWxzLmFkZE9yUmVtb3ZlSXRlbSh3cml0YWJsZVZhbHVlLHNhdmVPbGRWYWx1ZSxmYWxzZSk7fX1lbHNle2tvLnV0aWxzLmFkZE9yUmVtb3ZlSXRlbSh3cml0YWJsZVZhbHVlLGVsZW1WYWx1ZSxpc0NoZWNrZWQpO30KaWYocmF3VmFsdWVJc05vbkFycmF5T2JzZXJ2YWJsZSYma28uaXNXcml0ZWFibGVPYnNlcnZhYmxlKG1vZGVsVmFsdWUpKXttb2RlbFZhbHVlKHdyaXRhYmxlVmFsdWUpO319ZWxzZXtpZihpc0NoZWNrYm94KXtpZihlbGVtVmFsdWU9PT11bmRlZmluZWQpe2VsZW1WYWx1ZT1pc0NoZWNrZWQ7fWVsc2UgaWYoIWlzQ2hlY2tlZCl7ZWxlbVZhbHVlPXVuZGVmaW5lZDt9fQprby5leHByZXNzaW9uUmV3cml0aW5nLndyaXRlVmFsdWVUb1Byb3BlcnR5KG1vZGVsVmFsdWUsYWxsQmluZGluZ3MsJ2NoZWNrZWQnLGVsZW1WYWx1ZSx0cnVlKTt9fTtmdW5jdGlvbiB1cGRhdGVWaWV3KCl7dmFyIG1vZGVsVmFsdWU9a28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh2YWx1ZUFjY2Vzc29yKCkpLGVsZW1WYWx1ZT1jaGVja2VkVmFsdWUoKTtpZih2YWx1ZUlzQXJyYXkpe2VsZW1lbnQuY2hlY2tlZD1rby51dGlscy5hcnJheUluZGV4T2YobW9kZWxWYWx1ZSxlbGVtVmFsdWUpPj0wO29sZEVsZW1WYWx1ZT1lbGVtVmFsdWU7fWVsc2UgaWYoaXNDaGVja2JveCYmZWxlbVZhbHVlPT09dW5kZWZpbmVkKXtlbGVtZW50LmNoZWNrZWQ9ISFtb2RlbFZhbHVlO31lbHNle2VsZW1lbnQuY2hlY2tlZD0oY2hlY2tlZFZhbHVlKCk9PT1tb2RlbFZhbHVlKTt9fTt2YXIgaXNDaGVja2JveD1lbGVtZW50LnR5cGU9PSJjaGVja2JveCIsaXNSYWRpbz1lbGVtZW50LnR5cGU9PSJyYWRpbyI7aWYoIWlzQ2hlY2tib3gmJiFpc1JhZGlvKXtyZXR1cm47fQp2YXIgcmF3VmFsdWU9dmFsdWVBY2Nlc3NvcigpLHZhbHVlSXNBcnJheT1pc0NoZWNrYm94JiYoa28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShyYXdWYWx1ZSlpbnN0YW5jZW9mIEFycmF5KSxyYXdWYWx1ZUlzTm9uQXJyYXlPYnNlcnZhYmxlPSEodmFsdWVJc0FycmF5JiZyYXdWYWx1ZS5wdXNoJiZyYXdWYWx1ZS5zcGxpY2UpLHVzZUVsZW1lbnRWYWx1ZT1pc1JhZGlvfHx2YWx1ZUlzQXJyYXksb2xkRWxlbVZhbHVlPXZhbHVlSXNBcnJheT9jaGVja2VkVmFsdWUoKTp1bmRlZmluZWQ7aWYoaXNSYWRpbyYmIWVsZW1lbnQubmFtZSkKa28uYmluZGluZ0hhbmRsZXJzWyd1bmlxdWVOYW1lJ11bJ2luaXQnXShlbGVtZW50LGZ1bmN0aW9uKCl7cmV0dXJuIHRydWV9KTtrby5jb21wdXRlZCh1cGRhdGVNb2RlbCxudWxsLHtkaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQ6ZWxlbWVudH0pO2tvLnV0aWxzLnJlZ2lzdGVyRXZlbnRIYW5kbGVyKGVsZW1lbnQsImNsaWNrIix1cGRhdGVNb2RlbCk7a28uY29tcHV0ZWQodXBkYXRlVmlldyxudWxsLHtkaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQ6ZWxlbWVudH0pO3Jhd1ZhbHVlPXVuZGVmaW5lZDt9fTtrby5leHByZXNzaW9uUmV3cml0aW5nLnR3b1dheUJpbmRpbmdzWydjaGVja2VkJ109dHJ1ZTtrby5iaW5kaW5nSGFuZGxlcnNbJ2NoZWNrZWRWYWx1ZSddPXsndXBkYXRlJzpmdW5jdGlvbihlbGVtZW50LHZhbHVlQWNjZXNzb3Ipe2VsZW1lbnQudmFsdWU9a28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh2YWx1ZUFjY2Vzc29yKCkpO319O30pKCk7dmFyIGNsYXNzZXNXcml0dGVuQnlCaW5kaW5nS2V5PSdfX2tvX19jc3NWYWx1ZSc7a28uYmluZGluZ0hhbmRsZXJzWydjbGFzcyddPXsndXBkYXRlJzpmdW5jdGlvbihlbGVtZW50LHZhbHVlQWNjZXNzb3Ipe3ZhciB2YWx1ZT1rby51dGlscy5zdHJpbmdUcmltKGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodmFsdWVBY2Nlc3NvcigpKSk7a28udXRpbHMudG9nZ2xlRG9tTm9kZUNzc0NsYXNzKGVsZW1lbnQsZWxlbWVudFtjbGFzc2VzV3JpdHRlbkJ5QmluZGluZ0tleV0sZmFsc2UpO2VsZW1lbnRbY2xhc3Nlc1dyaXR0ZW5CeUJpbmRpbmdLZXldPXZhbHVlO2tvLnV0aWxzLnRvZ2dsZURvbU5vZGVDc3NDbGFzcyhlbGVtZW50LHZhbHVlLHRydWUpO319O2tvLmJpbmRpbmdIYW5kbGVyc1snY3NzJ109eyd1cGRhdGUnOmZ1bmN0aW9uKGVsZW1lbnQsdmFsdWVBY2Nlc3Nvcil7dmFyIHZhbHVlPWtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodmFsdWVBY2Nlc3NvcigpKTtpZih2YWx1ZSE9PW51bGwmJnR5cGVvZiB2YWx1ZT09Im9iamVjdCIpe2tvLnV0aWxzLm9iamVjdEZvckVhY2godmFsdWUsZnVuY3Rpb24oY2xhc3NOYW1lLHNob3VsZEhhdmVDbGFzcyl7c2hvdWxkSGF2ZUNsYXNzPWtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUoc2hvdWxkSGF2ZUNsYXNzKTtrby51dGlscy50b2dnbGVEb21Ob2RlQ3NzQ2xhc3MoZWxlbWVudCxjbGFzc05hbWUsc2hvdWxkSGF2ZUNsYXNzKTt9KTt9ZWxzZXtrby5iaW5kaW5nSGFuZGxlcnNbJ2NsYXNzJ11bJ3VwZGF0ZSddKGVsZW1lbnQsdmFsdWVBY2Nlc3Nvcik7fX19O2tvLmJpbmRpbmdIYW5kbGVyc1snZW5hYmxlJ109eyd1cGRhdGUnOmZ1bmN0aW9uKGVsZW1lbnQsdmFsdWVBY2Nlc3Nvcil7dmFyIHZhbHVlPWtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodmFsdWVBY2Nlc3NvcigpKTtpZih2YWx1ZSYmZWxlbWVudC5kaXNhYmxlZCkKZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoImRpc2FibGVkIik7ZWxzZSBpZigoIXZhbHVlKSYmKCFlbGVtZW50LmRpc2FibGVkKSkKZWxlbWVudC5kaXNhYmxlZD10cnVlO319O2tvLmJpbmRpbmdIYW5kbGVyc1snZGlzYWJsZSddPXsndXBkYXRlJzpmdW5jdGlvbihlbGVtZW50LHZhbHVlQWNjZXNzb3Ipe2tvLmJpbmRpbmdIYW5kbGVyc1snZW5hYmxlJ11bJ3VwZGF0ZSddKGVsZW1lbnQsZnVuY3Rpb24oKXtyZXR1cm4ha28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh2YWx1ZUFjY2Vzc29yKCkpfSk7fX07ZnVuY3Rpb24gbWFrZUV2ZW50SGFuZGxlclNob3J0Y3V0KGV2ZW50TmFtZSl7a28uYmluZGluZ0hhbmRsZXJzW2V2ZW50TmFtZV09eydpbml0JzpmdW5jdGlvbihlbGVtZW50LHZhbHVlQWNjZXNzb3IsYWxsQmluZGluZ3Msdmlld01vZGVsLGJpbmRpbmdDb250ZXh0KXt2YXIgbmV3VmFsdWVBY2Nlc3Nvcj1mdW5jdGlvbigpe3ZhciByZXN1bHQ9e307cmVzdWx0W2V2ZW50TmFtZV09dmFsdWVBY2Nlc3NvcigpO3JldHVybiByZXN1bHQ7fTtyZXR1cm4ga28uYmluZGluZ0hhbmRsZXJzWydldmVudCddWydpbml0J10uY2FsbCh0aGlzLGVsZW1lbnQsbmV3VmFsdWVBY2Nlc3NvcixhbGxCaW5kaW5ncyx2aWV3TW9kZWwsYmluZGluZ0NvbnRleHQpO319fQprby5iaW5kaW5nSGFuZGxlcnNbJ2V2ZW50J109eydpbml0JzpmdW5jdGlvbihlbGVtZW50LHZhbHVlQWNjZXNzb3IsYWxsQmluZGluZ3Msdmlld01vZGVsLGJpbmRpbmdDb250ZXh0KXt2YXIgZXZlbnRzVG9IYW5kbGU9dmFsdWVBY2Nlc3NvcigpfHx7fTtrby51dGlscy5vYmplY3RGb3JFYWNoKGV2ZW50c1RvSGFuZGxlLGZ1bmN0aW9uKGV2ZW50TmFtZSl7aWYodHlwZW9mIGV2ZW50TmFtZT09InN0cmluZyIpe2tvLnV0aWxzLnJlZ2lzdGVyRXZlbnRIYW5kbGVyKGVsZW1lbnQsZXZlbnROYW1lLGZ1bmN0aW9uKGV2ZW50KXt2YXIgaGFuZGxlclJldHVyblZhbHVlO3ZhciBoYW5kbGVyRnVuY3Rpb249dmFsdWVBY2Nlc3NvcigpW2V2ZW50TmFtZV07aWYoIWhhbmRsZXJGdW5jdGlvbikKcmV0dXJuO3RyeXt2YXIgYXJnc0ZvckhhbmRsZXI9a28udXRpbHMubWFrZUFycmF5KGFyZ3VtZW50cyk7dmlld01vZGVsPWJpbmRpbmdDb250ZXh0WyckZGF0YSddO2FyZ3NGb3JIYW5kbGVyLnVuc2hpZnQodmlld01vZGVsKTtoYW5kbGVyUmV0dXJuVmFsdWU9aGFuZGxlckZ1bmN0aW9uLmFwcGx5KHZpZXdNb2RlbCxhcmdzRm9ySGFuZGxlcik7fWZpbmFsbHl7aWYoaGFuZGxlclJldHVyblZhbHVlIT09dHJ1ZSl7aWYoZXZlbnQucHJldmVudERlZmF1bHQpCmV2ZW50LnByZXZlbnREZWZhdWx0KCk7ZWxzZQpldmVudC5yZXR1cm5WYWx1ZT1mYWxzZTt9fQp2YXIgYnViYmxlPWFsbEJpbmRpbmdzLmdldChldmVudE5hbWUrJ0J1YmJsZScpIT09ZmFsc2U7aWYoIWJ1YmJsZSl7ZXZlbnQuY2FuY2VsQnViYmxlPXRydWU7aWYoZXZlbnQuc3RvcFByb3BhZ2F0aW9uKQpldmVudC5zdG9wUHJvcGFnYXRpb24oKTt9fSk7fX0pO319O2tvLmJpbmRpbmdIYW5kbGVyc1snZm9yZWFjaCddPXttYWtlVGVtcGxhdGVWYWx1ZUFjY2Vzc29yOmZ1bmN0aW9uKHZhbHVlQWNjZXNzb3Ipe3JldHVybiBmdW5jdGlvbigpe3ZhciBtb2RlbFZhbHVlPXZhbHVlQWNjZXNzb3IoKSx1bndyYXBwZWRWYWx1ZT1rby51dGlscy5wZWVrT2JzZXJ2YWJsZShtb2RlbFZhbHVlKTtpZigoIXVud3JhcHBlZFZhbHVlKXx8dHlwZW9mIHVud3JhcHBlZFZhbHVlLmxlbmd0aD09Im51bWJlciIpCnJldHVybnsnZm9yZWFjaCc6bW9kZWxWYWx1ZSwndGVtcGxhdGVFbmdpbmUnOmtvLm5hdGl2ZVRlbXBsYXRlRW5naW5lLmluc3RhbmNlfTtrby51dGlscy51bndyYXBPYnNlcnZhYmxlKG1vZGVsVmFsdWUpO3JldHVybnsnZm9yZWFjaCc6dW53cmFwcGVkVmFsdWVbJ2RhdGEnXSwnYXMnOnVud3JhcHBlZFZhbHVlWydhcyddLCdub0NoaWxkQ29udGV4dCc6dW53cmFwcGVkVmFsdWVbJ25vQ2hpbGRDb250ZXh0J10sJ2luY2x1ZGVEZXN0cm95ZWQnOnVud3JhcHBlZFZhbHVlWydpbmNsdWRlRGVzdHJveWVkJ10sJ2FmdGVyQWRkJzp1bndyYXBwZWRWYWx1ZVsnYWZ0ZXJBZGQnXSwnYmVmb3JlUmVtb3ZlJzp1bndyYXBwZWRWYWx1ZVsnYmVmb3JlUmVtb3ZlJ10sJ2FmdGVyUmVuZGVyJzp1bndyYXBwZWRWYWx1ZVsnYWZ0ZXJSZW5kZXInXSwnYmVmb3JlTW92ZSc6dW53cmFwcGVkVmFsdWVbJ2JlZm9yZU1vdmUnXSwnYWZ0ZXJNb3ZlJzp1bndyYXBwZWRWYWx1ZVsnYWZ0ZXJNb3ZlJ10sJ3RlbXBsYXRlRW5naW5lJzprby5uYXRpdmVUZW1wbGF0ZUVuZ2luZS5pbnN0YW5jZX07fTt9LCdpbml0JzpmdW5jdGlvbihlbGVtZW50LHZhbHVlQWNjZXNzb3IsYWxsQmluZGluZ3Msdmlld01vZGVsLGJpbmRpbmdDb250ZXh0KXtyZXR1cm4ga28uYmluZGluZ0hhbmRsZXJzWyd0ZW1wbGF0ZSddWydpbml0J10oZWxlbWVudCxrby5iaW5kaW5nSGFuZGxlcnNbJ2ZvcmVhY2gnXS5tYWtlVGVtcGxhdGVWYWx1ZUFjY2Vzc29yKHZhbHVlQWNjZXNzb3IpKTt9LCd1cGRhdGUnOmZ1bmN0aW9uKGVsZW1lbnQsdmFsdWVBY2Nlc3NvcixhbGxCaW5kaW5ncyx2aWV3TW9kZWwsYmluZGluZ0NvbnRleHQpe3JldHVybiBrby5iaW5kaW5nSGFuZGxlcnNbJ3RlbXBsYXRlJ11bJ3VwZGF0ZSddKGVsZW1lbnQsa28uYmluZGluZ0hhbmRsZXJzWydmb3JlYWNoJ10ubWFrZVRlbXBsYXRlVmFsdWVBY2Nlc3Nvcih2YWx1ZUFjY2Vzc29yKSxhbGxCaW5kaW5ncyx2aWV3TW9kZWwsYmluZGluZ0NvbnRleHQpO319O2tvLmV4cHJlc3Npb25SZXdyaXRpbmcuYmluZGluZ1Jld3JpdGVWYWxpZGF0b3JzWydmb3JlYWNoJ109ZmFsc2U7a28udmlydHVhbEVsZW1lbnRzLmFsbG93ZWRCaW5kaW5nc1snZm9yZWFjaCddPXRydWU7dmFyIGhhc2ZvY3VzVXBkYXRpbmdQcm9wZXJ0eT0nX19rb19oYXNmb2N1c1VwZGF0aW5nJzt2YXIgaGFzZm9jdXNMYXN0VmFsdWU9J19fa29faGFzZm9jdXNMYXN0VmFsdWUnO2tvLmJpbmRpbmdIYW5kbGVyc1snaGFzZm9jdXMnXT17J2luaXQnOmZ1bmN0aW9uKGVsZW1lbnQsdmFsdWVBY2Nlc3NvcixhbGxCaW5kaW5ncyl7dmFyIGhhbmRsZUVsZW1lbnRGb2N1c0NoYW5nZT1mdW5jdGlvbihpc0ZvY3VzZWQpe2VsZW1lbnRbaGFzZm9jdXNVcGRhdGluZ1Byb3BlcnR5XT10cnVlO3ZhciBvd25lckRvYz1lbGVtZW50Lm93bmVyRG9jdW1lbnQ7aWYoImFjdGl2ZUVsZW1lbnQiaW4gb3duZXJEb2Mpe3ZhciBhY3RpdmU7dHJ5e2FjdGl2ZT1vd25lckRvYy5hY3RpdmVFbGVtZW50O31jYXRjaChlKXthY3RpdmU9b3duZXJEb2MuYm9keTt9CmlzRm9jdXNlZD0oYWN0aXZlPT09ZWxlbWVudCk7fQp2YXIgbW9kZWxWYWx1ZT12YWx1ZUFjY2Vzc29yKCk7a28uZXhwcmVzc2lvblJld3JpdGluZy53cml0ZVZhbHVlVG9Qcm9wZXJ0eShtb2RlbFZhbHVlLGFsbEJpbmRpbmdzLCdoYXNmb2N1cycsaXNGb2N1c2VkLHRydWUpO2VsZW1lbnRbaGFzZm9jdXNMYXN0VmFsdWVdPWlzRm9jdXNlZDtlbGVtZW50W2hhc2ZvY3VzVXBkYXRpbmdQcm9wZXJ0eV09ZmFsc2U7fTt2YXIgaGFuZGxlRWxlbWVudEZvY3VzSW49aGFuZGxlRWxlbWVudEZvY3VzQ2hhbmdlLmJpbmQobnVsbCx0cnVlKTt2YXIgaGFuZGxlRWxlbWVudEZvY3VzT3V0PWhhbmRsZUVsZW1lbnRGb2N1c0NoYW5nZS5iaW5kKG51bGwsZmFsc2UpO2tvLnV0aWxzLnJlZ2lzdGVyRXZlbnRIYW5kbGVyKGVsZW1lbnQsImZvY3VzIixoYW5kbGVFbGVtZW50Rm9jdXNJbik7a28udXRpbHMucmVnaXN0ZXJFdmVudEhhbmRsZXIoZWxlbWVudCwiZm9jdXNpbiIsaGFuZGxlRWxlbWVudEZvY3VzSW4pO2tvLnV0aWxzLnJlZ2lzdGVyRXZlbnRIYW5kbGVyKGVsZW1lbnQsImJsdXIiLGhhbmRsZUVsZW1lbnRGb2N1c091dCk7a28udXRpbHMucmVnaXN0ZXJFdmVudEhhbmRsZXIoZWxlbWVudCwiZm9jdXNvdXQiLGhhbmRsZUVsZW1lbnRGb2N1c091dCk7ZWxlbWVudFtoYXNmb2N1c0xhc3RWYWx1ZV09ZmFsc2U7fSwndXBkYXRlJzpmdW5jdGlvbihlbGVtZW50LHZhbHVlQWNjZXNzb3Ipe3ZhciB2YWx1ZT0hIWtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodmFsdWVBY2Nlc3NvcigpKTtpZighZWxlbWVudFtoYXNmb2N1c1VwZGF0aW5nUHJvcGVydHldJiZlbGVtZW50W2hhc2ZvY3VzTGFzdFZhbHVlXSE9PXZhbHVlKXt2YWx1ZT9lbGVtZW50LmZvY3VzKCk6ZWxlbWVudC5ibHVyKCk7aWYoIXZhbHVlJiZlbGVtZW50W2hhc2ZvY3VzTGFzdFZhbHVlXSl7ZWxlbWVudC5vd25lckRvY3VtZW50LmJvZHkuZm9jdXMoKTt9CmtvLmRlcGVuZGVuY3lEZXRlY3Rpb24uaWdub3JlKGtvLnV0aWxzLnRyaWdnZXJFdmVudCxudWxsLFtlbGVtZW50LHZhbHVlPyJmb2N1c2luIjoiZm9jdXNvdXQiXSk7fX19O2tvLmV4cHJlc3Npb25SZXdyaXRpbmcudHdvV2F5QmluZGluZ3NbJ2hhc2ZvY3VzJ109dHJ1ZTtrby5iaW5kaW5nSGFuZGxlcnNbJ2hhc0ZvY3VzJ109a28uYmluZGluZ0hhbmRsZXJzWydoYXNmb2N1cyddO2tvLmV4cHJlc3Npb25SZXdyaXRpbmcudHdvV2F5QmluZGluZ3NbJ2hhc0ZvY3VzJ109J2hhc2ZvY3VzJztrby5iaW5kaW5nSGFuZGxlcnNbJ2h0bWwnXT17J2luaXQnOmZ1bmN0aW9uKCl7cmV0dXJueydjb250cm9sc0Rlc2NlbmRhbnRCaW5kaW5ncyc6dHJ1ZX07fSwndXBkYXRlJzpmdW5jdGlvbihlbGVtZW50LHZhbHVlQWNjZXNzb3Ipe2tvLnV0aWxzLnNldEh0bWwoZWxlbWVudCx2YWx1ZUFjY2Vzc29yKCkpO319OyhmdW5jdGlvbigpe2Z1bmN0aW9uIG1ha2VXaXRoSWZCaW5kaW5nKGJpbmRpbmdLZXksaXNXaXRoLGlzTm90KXtrby5iaW5kaW5nSGFuZGxlcnNbYmluZGluZ0tleV09eydpbml0JzpmdW5jdGlvbihlbGVtZW50LHZhbHVlQWNjZXNzb3IsYWxsQmluZGluZ3Msdmlld01vZGVsLGJpbmRpbmdDb250ZXh0KXt2YXIgZGlkRGlzcGxheU9uTGFzdFVwZGF0ZSxzYXZlZE5vZGVzLGNvbnRleHRPcHRpb25zPXt9LGNvbXBsZXRlT25SZW5kZXIsbmVlZEFzeW5jQ29udGV4dCxyZW5kZXJPbkV2ZXJ5Q2hhbmdlO2lmKGlzV2l0aCl7dmFyIGFzPWFsbEJpbmRpbmdzLmdldCgnYXMnKSxub0NoaWxkQ29udGV4dD1hbGxCaW5kaW5ncy5nZXQoJ25vQ2hpbGRDb250ZXh0Jyk7cmVuZGVyT25FdmVyeUNoYW5nZT0hKGFzJiZub0NoaWxkQ29udGV4dCk7Y29udGV4dE9wdGlvbnM9eydhcyc6YXMsJ25vQ2hpbGRDb250ZXh0Jzpub0NoaWxkQ29udGV4dCwnZXhwb3J0RGVwZW5kZW5jaWVzJzpyZW5kZXJPbkV2ZXJ5Q2hhbmdlfTt9CmNvbXBsZXRlT25SZW5kZXI9YWxsQmluZGluZ3MuZ2V0KCJjb21wbGV0ZU9uIik9PSJyZW5kZXIiO25lZWRBc3luY0NvbnRleHQ9Y29tcGxldGVPblJlbmRlcnx8YWxsQmluZGluZ3NbJ2hhcyddKGtvLmJpbmRpbmdFdmVudC5kZXNjZW5kYW50c0NvbXBsZXRlKTtrby5jb21wdXRlZChmdW5jdGlvbigpe3ZhciB2YWx1ZT1rby51dGlscy51bndyYXBPYnNlcnZhYmxlKHZhbHVlQWNjZXNzb3IoKSksc2hvdWxkRGlzcGxheT0haXNOb3QhPT0hdmFsdWUsaXNJbml0aWFsPSFzYXZlZE5vZGVzLGNoaWxkQ29udGV4dDtpZighcmVuZGVyT25FdmVyeUNoYW5nZSYmc2hvdWxkRGlzcGxheT09PWRpZERpc3BsYXlPbkxhc3RVcGRhdGUpe3JldHVybjt9CmlmKG5lZWRBc3luY0NvbnRleHQpe2JpbmRpbmdDb250ZXh0PWtvLmJpbmRpbmdFdmVudC5zdGFydFBvc3NpYmx5QXN5bmNDb250ZW50QmluZGluZyhlbGVtZW50LGJpbmRpbmdDb250ZXh0KTt9CmlmKHNob3VsZERpc3BsYXkpe2lmKCFpc1dpdGh8fHJlbmRlck9uRXZlcnlDaGFuZ2Upe2NvbnRleHRPcHRpb25zWydkYXRhRGVwZW5kZW5jeSddPWtvLmNvbXB1dGVkQ29udGV4dC5jb21wdXRlZCgpO30KaWYoaXNXaXRoKXtjaGlsZENvbnRleHQ9YmluZGluZ0NvbnRleHRbJ2NyZWF0ZUNoaWxkQ29udGV4dCddKHR5cGVvZiB2YWx1ZT09ImZ1bmN0aW9uIj92YWx1ZTp2YWx1ZUFjY2Vzc29yLGNvbnRleHRPcHRpb25zKTt9ZWxzZSBpZihrby5jb21wdXRlZENvbnRleHQuZ2V0RGVwZW5kZW5jaWVzQ291bnQoKSl7Y2hpbGRDb250ZXh0PWJpbmRpbmdDb250ZXh0WydleHRlbmQnXShudWxsLGNvbnRleHRPcHRpb25zKTt9ZWxzZXtjaGlsZENvbnRleHQ9YmluZGluZ0NvbnRleHQ7fX0KaWYoaXNJbml0aWFsJiZrby5jb21wdXRlZENvbnRleHQuZ2V0RGVwZW5kZW5jaWVzQ291bnQoKSl7c2F2ZWROb2Rlcz1rby51dGlscy5jbG9uZU5vZGVzKGtvLnZpcnR1YWxFbGVtZW50cy5jaGlsZE5vZGVzKGVsZW1lbnQpLHRydWUpO30KaWYoc2hvdWxkRGlzcGxheSl7aWYoIWlzSW5pdGlhbCl7a28udmlydHVhbEVsZW1lbnRzLnNldERvbU5vZGVDaGlsZHJlbihlbGVtZW50LGtvLnV0aWxzLmNsb25lTm9kZXMoc2F2ZWROb2RlcykpO30Ka28uYXBwbHlCaW5kaW5nc1RvRGVzY2VuZGFudHMoY2hpbGRDb250ZXh0LGVsZW1lbnQpO31lbHNle2tvLnZpcnR1YWxFbGVtZW50cy5lbXB0eU5vZGUoZWxlbWVudCk7aWYoIWNvbXBsZXRlT25SZW5kZXIpe2tvLmJpbmRpbmdFdmVudC5ub3RpZnkoZWxlbWVudCxrby5iaW5kaW5nRXZlbnQuY2hpbGRyZW5Db21wbGV0ZSk7fX0KZGlkRGlzcGxheU9uTGFzdFVwZGF0ZT1zaG91bGREaXNwbGF5O30sbnVsbCx7ZGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkOmVsZW1lbnR9KTtyZXR1cm57J2NvbnRyb2xzRGVzY2VuZGFudEJpbmRpbmdzJzp0cnVlfTt9fTtrby5leHByZXNzaW9uUmV3cml0aW5nLmJpbmRpbmdSZXdyaXRlVmFsaWRhdG9yc1tiaW5kaW5nS2V5XT1mYWxzZTtrby52aXJ0dWFsRWxlbWVudHMuYWxsb3dlZEJpbmRpbmdzW2JpbmRpbmdLZXldPXRydWU7fQptYWtlV2l0aElmQmluZGluZygnaWYnKTttYWtlV2l0aElmQmluZGluZygnaWZub3QnLGZhbHNlLHRydWUpO21ha2VXaXRoSWZCaW5kaW5nKCd3aXRoJyx0cnVlKTt9KSgpO2tvLmJpbmRpbmdIYW5kbGVyc1snbGV0J109eydpbml0JzpmdW5jdGlvbihlbGVtZW50LHZhbHVlQWNjZXNzb3IsYWxsQmluZGluZ3Msdmlld01vZGVsLGJpbmRpbmdDb250ZXh0KXt2YXIgaW5uZXJDb250ZXh0PWJpbmRpbmdDb250ZXh0WydleHRlbmQnXSh2YWx1ZUFjY2Vzc29yKTtrby5hcHBseUJpbmRpbmdzVG9EZXNjZW5kYW50cyhpbm5lckNvbnRleHQsZWxlbWVudCk7cmV0dXJueydjb250cm9sc0Rlc2NlbmRhbnRCaW5kaW5ncyc6dHJ1ZX07fX07a28udmlydHVhbEVsZW1lbnRzLmFsbG93ZWRCaW5kaW5nc1snbGV0J109dHJ1ZTt2YXIgY2FwdGlvblBsYWNlaG9sZGVyPXt9O2tvLmJpbmRpbmdIYW5kbGVyc1snb3B0aW9ucyddPXsnaW5pdCc6ZnVuY3Rpb24oZWxlbWVudCl7aWYoa28udXRpbHMudGFnTmFtZUxvd2VyKGVsZW1lbnQpIT09InNlbGVjdCIpCnRocm93IG5ldyBFcnJvcigib3B0aW9ucyBiaW5kaW5nIGFwcGxpZXMgb25seSB0byBTRUxFQ1QgZWxlbWVudHMiKTt3aGlsZShlbGVtZW50Lmxlbmd0aD4wKXtlbGVtZW50LnJlbW92ZSgwKTt9CnJldHVybnsnY29udHJvbHNEZXNjZW5kYW50QmluZGluZ3MnOnRydWV9O30sJ3VwZGF0ZSc6ZnVuY3Rpb24oZWxlbWVudCx2YWx1ZUFjY2Vzc29yLGFsbEJpbmRpbmdzKXtmdW5jdGlvbiBzZWxlY3RlZE9wdGlvbnMoKXtyZXR1cm4ga28udXRpbHMuYXJyYXlGaWx0ZXIoZWxlbWVudC5vcHRpb25zLGZ1bmN0aW9uKG5vZGUpe3JldHVybiBub2RlLnNlbGVjdGVkO30pO30KdmFyIHNlbGVjdFdhc1ByZXZpb3VzbHlFbXB0eT1lbGVtZW50Lmxlbmd0aD09MCxtdWx0aXBsZT1lbGVtZW50Lm11bHRpcGxlLHByZXZpb3VzU2Nyb2xsVG9wPSghc2VsZWN0V2FzUHJldmlvdXNseUVtcHR5JiZtdWx0aXBsZSk/ZWxlbWVudC5zY3JvbGxUb3A6bnVsbCx1bndyYXBwZWRBcnJheT1rby51dGlscy51bndyYXBPYnNlcnZhYmxlKHZhbHVlQWNjZXNzb3IoKSksdmFsdWVBbGxvd1Vuc2V0PWFsbEJpbmRpbmdzLmdldCgndmFsdWVBbGxvd1Vuc2V0JykmJmFsbEJpbmRpbmdzWydoYXMnXSgndmFsdWUnKSxpbmNsdWRlRGVzdHJveWVkPWFsbEJpbmRpbmdzLmdldCgnb3B0aW9uc0luY2x1ZGVEZXN0cm95ZWQnKSxhcnJheVRvRG9tTm9kZUNoaWxkcmVuT3B0aW9ucz17fSxjYXB0aW9uVmFsdWUsZmlsdGVyZWRBcnJheSxwcmV2aW91c1NlbGVjdGVkVmFsdWVzPVtdO2lmKCF2YWx1ZUFsbG93VW5zZXQpe2lmKG11bHRpcGxlKXtwcmV2aW91c1NlbGVjdGVkVmFsdWVzPWtvLnV0aWxzLmFycmF5TWFwKHNlbGVjdGVkT3B0aW9ucygpLGtvLnNlbGVjdEV4dGVuc2lvbnMucmVhZFZhbHVlKTt9ZWxzZSBpZihlbGVtZW50LnNlbGVjdGVkSW5kZXg+PTApe3ByZXZpb3VzU2VsZWN0ZWRWYWx1ZXMucHVzaChrby5zZWxlY3RFeHRlbnNpb25zLnJlYWRWYWx1ZShlbGVtZW50Lm9wdGlvbnNbZWxlbWVudC5zZWxlY3RlZEluZGV4XSkpO319CmlmKHVud3JhcHBlZEFycmF5KXtpZih0eXBlb2YgdW53cmFwcGVkQXJyYXkubGVuZ3RoPT0idW5kZWZpbmVkIikKdW53cmFwcGVkQXJyYXk9W3Vud3JhcHBlZEFycmF5XTtmaWx0ZXJlZEFycmF5PWtvLnV0aWxzLmFycmF5RmlsdGVyKHVud3JhcHBlZEFycmF5LGZ1bmN0aW9uKGl0ZW0pe3JldHVybiBpbmNsdWRlRGVzdHJveWVkfHxpdGVtPT09dW5kZWZpbmVkfHxpdGVtPT09bnVsbHx8IWtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUoaXRlbVsnX2Rlc3Ryb3knXSk7fSk7aWYoYWxsQmluZGluZ3NbJ2hhcyddKCdvcHRpb25zQ2FwdGlvbicpKXtjYXB0aW9uVmFsdWU9a28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShhbGxCaW5kaW5ncy5nZXQoJ29wdGlvbnNDYXB0aW9uJykpO2lmKGNhcHRpb25WYWx1ZSE9PW51bGwmJmNhcHRpb25WYWx1ZSE9PXVuZGVmaW5lZCl7ZmlsdGVyZWRBcnJheS51bnNoaWZ0KGNhcHRpb25QbGFjZWhvbGRlcik7fX19ZWxzZXt9CmZ1bmN0aW9uIGFwcGx5VG9PYmplY3Qob2JqZWN0LHByZWRpY2F0ZSxkZWZhdWx0VmFsdWUpe3ZhciBwcmVkaWNhdGVUeXBlPXR5cGVvZiBwcmVkaWNhdGU7aWYocHJlZGljYXRlVHlwZT09ImZ1bmN0aW9uIikKcmV0dXJuIHByZWRpY2F0ZShvYmplY3QpO2Vsc2UgaWYocHJlZGljYXRlVHlwZT09InN0cmluZyIpCnJldHVybiBvYmplY3RbcHJlZGljYXRlXTtlbHNlCnJldHVybiBkZWZhdWx0VmFsdWU7fQp2YXIgaXRlbVVwZGF0ZT1mYWxzZTtmdW5jdGlvbiBvcHRpb25Gb3JBcnJheUl0ZW0oYXJyYXlFbnRyeSxpbmRleCxvbGRPcHRpb25zKXtpZihvbGRPcHRpb25zLmxlbmd0aCl7cHJldmlvdXNTZWxlY3RlZFZhbHVlcz0hdmFsdWVBbGxvd1Vuc2V0JiZvbGRPcHRpb25zWzBdLnNlbGVjdGVkP1trby5zZWxlY3RFeHRlbnNpb25zLnJlYWRWYWx1ZShvbGRPcHRpb25zWzBdKV06W107aXRlbVVwZGF0ZT10cnVlO30KdmFyIG9wdGlvbj1lbGVtZW50Lm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudCgib3B0aW9uIik7aWYoYXJyYXlFbnRyeT09PWNhcHRpb25QbGFjZWhvbGRlcil7a28udXRpbHMuc2V0VGV4dENvbnRlbnQob3B0aW9uLGFsbEJpbmRpbmdzLmdldCgnb3B0aW9uc0NhcHRpb24nKSk7a28uc2VsZWN0RXh0ZW5zaW9ucy53cml0ZVZhbHVlKG9wdGlvbix1bmRlZmluZWQpO31lbHNle3ZhciBvcHRpb25WYWx1ZT1hcHBseVRvT2JqZWN0KGFycmF5RW50cnksYWxsQmluZGluZ3MuZ2V0KCdvcHRpb25zVmFsdWUnKSxhcnJheUVudHJ5KTtrby5zZWxlY3RFeHRlbnNpb25zLndyaXRlVmFsdWUob3B0aW9uLGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUob3B0aW9uVmFsdWUpKTt2YXIgb3B0aW9uVGV4dD1hcHBseVRvT2JqZWN0KGFycmF5RW50cnksYWxsQmluZGluZ3MuZ2V0KCdvcHRpb25zVGV4dCcpLG9wdGlvblZhbHVlKTtrby51dGlscy5zZXRUZXh0Q29udGVudChvcHRpb24sb3B0aW9uVGV4dCk7fQpyZXR1cm5bb3B0aW9uXTt9CmFycmF5VG9Eb21Ob2RlQ2hpbGRyZW5PcHRpb25zWydiZWZvcmVSZW1vdmUnXT1mdW5jdGlvbihvcHRpb24pe2VsZW1lbnQucmVtb3ZlQ2hpbGQob3B0aW9uKTt9O2Z1bmN0aW9uIHNldFNlbGVjdGlvbkNhbGxiYWNrKGFycmF5RW50cnksbmV3T3B0aW9ucyl7aWYoaXRlbVVwZGF0ZSYmdmFsdWVBbGxvd1Vuc2V0KXtrby5iaW5kaW5nRXZlbnQubm90aWZ5KGVsZW1lbnQsa28uYmluZGluZ0V2ZW50LmNoaWxkcmVuQ29tcGxldGUpO31lbHNlIGlmKHByZXZpb3VzU2VsZWN0ZWRWYWx1ZXMubGVuZ3RoKXt2YXIgaXNTZWxlY3RlZD1rby51dGlscy5hcnJheUluZGV4T2YocHJldmlvdXNTZWxlY3RlZFZhbHVlcyxrby5zZWxlY3RFeHRlbnNpb25zLnJlYWRWYWx1ZShuZXdPcHRpb25zWzBdKSk+PTA7a28udXRpbHMuc2V0T3B0aW9uTm9kZVNlbGVjdGlvblN0YXRlKG5ld09wdGlvbnNbMF0saXNTZWxlY3RlZCk7aWYoaXRlbVVwZGF0ZSYmIWlzU2VsZWN0ZWQpe2tvLmRlcGVuZGVuY3lEZXRlY3Rpb24uaWdub3JlKGtvLnV0aWxzLnRyaWdnZXJFdmVudCxudWxsLFtlbGVtZW50LCJjaGFuZ2UiXSk7fX19CnZhciBjYWxsYmFjaz1zZXRTZWxlY3Rpb25DYWxsYmFjaztpZihhbGxCaW5kaW5nc1snaGFzJ10oJ29wdGlvbnNBZnRlclJlbmRlcicpJiZ0eXBlb2YgYWxsQmluZGluZ3MuZ2V0KCdvcHRpb25zQWZ0ZXJSZW5kZXInKT09ImZ1bmN0aW9uIil7Y2FsbGJhY2s9ZnVuY3Rpb24oYXJyYXlFbnRyeSxuZXdPcHRpb25zKXtzZXRTZWxlY3Rpb25DYWxsYmFjayhhcnJheUVudHJ5LG5ld09wdGlvbnMpO2tvLmRlcGVuZGVuY3lEZXRlY3Rpb24uaWdub3JlKGFsbEJpbmRpbmdzLmdldCgnb3B0aW9uc0FmdGVyUmVuZGVyJyksbnVsbCxbbmV3T3B0aW9uc1swXSxhcnJheUVudHJ5IT09Y2FwdGlvblBsYWNlaG9sZGVyP2FycmF5RW50cnk6dW5kZWZpbmVkXSk7fX0Ka28udXRpbHMuc2V0RG9tTm9kZUNoaWxkcmVuRnJvbUFycmF5TWFwcGluZyhlbGVtZW50LGZpbHRlcmVkQXJyYXksb3B0aW9uRm9yQXJyYXlJdGVtLGFycmF5VG9Eb21Ob2RlQ2hpbGRyZW5PcHRpb25zLGNhbGxiYWNrKTtpZighdmFsdWVBbGxvd1Vuc2V0KXt2YXIgc2VsZWN0aW9uQ2hhbmdlZDtpZihtdWx0aXBsZSl7c2VsZWN0aW9uQ2hhbmdlZD1wcmV2aW91c1NlbGVjdGVkVmFsdWVzLmxlbmd0aCYmc2VsZWN0ZWRPcHRpb25zKCkubGVuZ3RoPHByZXZpb3VzU2VsZWN0ZWRWYWx1ZXMubGVuZ3RoO31lbHNle3NlbGVjdGlvbkNoYW5nZWQ9KHByZXZpb3VzU2VsZWN0ZWRWYWx1ZXMubGVuZ3RoJiZlbGVtZW50LnNlbGVjdGVkSW5kZXg+PTApPyhrby5zZWxlY3RFeHRlbnNpb25zLnJlYWRWYWx1ZShlbGVtZW50Lm9wdGlvbnNbZWxlbWVudC5zZWxlY3RlZEluZGV4XSkhPT1wcmV2aW91c1NlbGVjdGVkVmFsdWVzWzBdKToocHJldmlvdXNTZWxlY3RlZFZhbHVlcy5sZW5ndGh8fGVsZW1lbnQuc2VsZWN0ZWRJbmRleD49MCk7fQppZihzZWxlY3Rpb25DaGFuZ2VkKXtrby5kZXBlbmRlbmN5RGV0ZWN0aW9uLmlnbm9yZShrby51dGlscy50cmlnZ2VyRXZlbnQsbnVsbCxbZWxlbWVudCwiY2hhbmdlIl0pO319CmlmKHZhbHVlQWxsb3dVbnNldHx8a28uY29tcHV0ZWRDb250ZXh0LmlzSW5pdGlhbCgpKXtrby5iaW5kaW5nRXZlbnQubm90aWZ5KGVsZW1lbnQsa28uYmluZGluZ0V2ZW50LmNoaWxkcmVuQ29tcGxldGUpO30Ka28udXRpbHMuZW5zdXJlU2VsZWN0RWxlbWVudElzUmVuZGVyZWRDb3JyZWN0bHkoZWxlbWVudCk7aWYocHJldmlvdXNTY3JvbGxUb3AmJk1hdGguYWJzKHByZXZpb3VzU2Nyb2xsVG9wLWVsZW1lbnQuc2Nyb2xsVG9wKT4yMCkKZWxlbWVudC5zY3JvbGxUb3A9cHJldmlvdXNTY3JvbGxUb3A7fX07a28uYmluZGluZ0hhbmRsZXJzWydvcHRpb25zJ10ub3B0aW9uVmFsdWVEb21EYXRhS2V5PWtvLnV0aWxzLmRvbURhdGEubmV4dEtleSgpO2tvLmJpbmRpbmdIYW5kbGVyc1snc2VsZWN0ZWRPcHRpb25zJ109eydpbml0JzpmdW5jdGlvbihlbGVtZW50LHZhbHVlQWNjZXNzb3IsYWxsQmluZGluZ3Mpe2Z1bmN0aW9uIHVwZGF0ZUZyb21WaWV3KCl7dmFyIHZhbHVlPXZhbHVlQWNjZXNzb3IoKSx2YWx1ZVRvV3JpdGU9W107a28udXRpbHMuYXJyYXlGb3JFYWNoKGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIm9wdGlvbiIpLGZ1bmN0aW9uKG5vZGUpe2lmKG5vZGUuc2VsZWN0ZWQpCnZhbHVlVG9Xcml0ZS5wdXNoKGtvLnNlbGVjdEV4dGVuc2lvbnMucmVhZFZhbHVlKG5vZGUpKTt9KTtrby5leHByZXNzaW9uUmV3cml0aW5nLndyaXRlVmFsdWVUb1Byb3BlcnR5KHZhbHVlLGFsbEJpbmRpbmdzLCdzZWxlY3RlZE9wdGlvbnMnLHZhbHVlVG9Xcml0ZSk7fQpmdW5jdGlvbiB1cGRhdGVGcm9tTW9kZWwoKXt2YXIgbmV3VmFsdWU9a28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh2YWx1ZUFjY2Vzc29yKCkpLHByZXZpb3VzU2Nyb2xsVG9wPWVsZW1lbnQuc2Nyb2xsVG9wO2lmKG5ld1ZhbHVlJiZ0eXBlb2YgbmV3VmFsdWUubGVuZ3RoPT0ibnVtYmVyIil7a28udXRpbHMuYXJyYXlGb3JFYWNoKGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIm9wdGlvbiIpLGZ1bmN0aW9uKG5vZGUpe3ZhciBpc1NlbGVjdGVkPWtvLnV0aWxzLmFycmF5SW5kZXhPZihuZXdWYWx1ZSxrby5zZWxlY3RFeHRlbnNpb25zLnJlYWRWYWx1ZShub2RlKSk+PTA7aWYobm9kZS5zZWxlY3RlZCE9aXNTZWxlY3RlZCl7a28udXRpbHMuc2V0T3B0aW9uTm9kZVNlbGVjdGlvblN0YXRlKG5vZGUsaXNTZWxlY3RlZCk7fX0pO30KZWxlbWVudC5zY3JvbGxUb3A9cHJldmlvdXNTY3JvbGxUb3A7fQppZihrby51dGlscy50YWdOYW1lTG93ZXIoZWxlbWVudCkhPSJzZWxlY3QiKXt0aHJvdyBuZXcgRXJyb3IoInNlbGVjdGVkT3B0aW9ucyBiaW5kaW5nIGFwcGxpZXMgb25seSB0byBTRUxFQ1QgZWxlbWVudHMiKTt9CnZhciB1cGRhdGVGcm9tTW9kZWxDb21wdXRlZDtrby5iaW5kaW5nRXZlbnQuc3Vic2NyaWJlKGVsZW1lbnQsa28uYmluZGluZ0V2ZW50LmNoaWxkcmVuQ29tcGxldGUsZnVuY3Rpb24oKXtpZighdXBkYXRlRnJvbU1vZGVsQ29tcHV0ZWQpe2tvLnV0aWxzLnJlZ2lzdGVyRXZlbnRIYW5kbGVyKGVsZW1lbnQsImNoYW5nZSIsdXBkYXRlRnJvbVZpZXcpO3VwZGF0ZUZyb21Nb2RlbENvbXB1dGVkPWtvLmNvbXB1dGVkKHVwZGF0ZUZyb21Nb2RlbCxudWxsLHtkaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQ6ZWxlbWVudH0pO31lbHNle3VwZGF0ZUZyb21WaWV3KCk7fX0sbnVsbCx7J25vdGlmeUltbWVkaWF0ZWx5Jzp0cnVlfSk7fSwndXBkYXRlJzpmdW5jdGlvbigpe319O2tvLmV4cHJlc3Npb25SZXdyaXRpbmcudHdvV2F5QmluZGluZ3NbJ3NlbGVjdGVkT3B0aW9ucyddPXRydWU7a28uYmluZGluZ0hhbmRsZXJzWydzdHlsZSddPXsndXBkYXRlJzpmdW5jdGlvbihlbGVtZW50LHZhbHVlQWNjZXNzb3Ipe3ZhciB2YWx1ZT1rby51dGlscy51bndyYXBPYnNlcnZhYmxlKHZhbHVlQWNjZXNzb3IoKXx8e30pO2tvLnV0aWxzLm9iamVjdEZvckVhY2godmFsdWUsZnVuY3Rpb24oc3R5bGVOYW1lLHN0eWxlVmFsdWUpe3N0eWxlVmFsdWU9a28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShzdHlsZVZhbHVlKTtpZihzdHlsZVZhbHVlPT09bnVsbHx8c3R5bGVWYWx1ZT09PXVuZGVmaW5lZHx8c3R5bGVWYWx1ZT09PWZhbHNlKXtzdHlsZVZhbHVlPSIiO30KaWYoalF1ZXJ5SW5zdGFuY2Upe2pRdWVyeUluc3RhbmNlKGVsZW1lbnQpWydjc3MnXShzdHlsZU5hbWUsc3R5bGVWYWx1ZSk7fWVsc2UgaWYoL14tLS8udGVzdChzdHlsZU5hbWUpKXtlbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KHN0eWxlTmFtZSxzdHlsZVZhbHVlKTt9ZWxzZXtzdHlsZU5hbWU9c3R5bGVOYW1lLnJlcGxhY2UoLy0oXHcpL2csZnVuY3Rpb24oYWxsLGxldHRlcil7cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO30pO3ZhciBwcmV2aW91c1N0eWxlPWVsZW1lbnQuc3R5bGVbc3R5bGVOYW1lXTtlbGVtZW50LnN0eWxlW3N0eWxlTmFtZV09c3R5bGVWYWx1ZTtpZihzdHlsZVZhbHVlIT09cHJldmlvdXNTdHlsZSYmZWxlbWVudC5zdHlsZVtzdHlsZU5hbWVdPT1wcmV2aW91c1N0eWxlJiYhaXNOYU4oc3R5bGVWYWx1ZSkpe2VsZW1lbnQuc3R5bGVbc3R5bGVOYW1lXT1zdHlsZVZhbHVlKyJweCI7fX19KTt9fTtrby5iaW5kaW5nSGFuZGxlcnNbJ3N1Ym1pdCddPXsnaW5pdCc6ZnVuY3Rpb24oZWxlbWVudCx2YWx1ZUFjY2Vzc29yLGFsbEJpbmRpbmdzLHZpZXdNb2RlbCxiaW5kaW5nQ29udGV4dCl7aWYodHlwZW9mIHZhbHVlQWNjZXNzb3IoKSE9ImZ1bmN0aW9uIikKdGhyb3cgbmV3IEVycm9yKCJUaGUgdmFsdWUgZm9yIGEgc3VibWl0IGJpbmRpbmcgbXVzdCBiZSBhIGZ1bmN0aW9uIik7a28udXRpbHMucmVnaXN0ZXJFdmVudEhhbmRsZXIoZWxlbWVudCwic3VibWl0IixmdW5jdGlvbihldmVudCl7dmFyIGhhbmRsZXJSZXR1cm5WYWx1ZTt2YXIgdmFsdWU9dmFsdWVBY2Nlc3NvcigpO3RyeXtoYW5kbGVyUmV0dXJuVmFsdWU9dmFsdWUuY2FsbChiaW5kaW5nQ29udGV4dFsnJGRhdGEnXSxlbGVtZW50KTt9CmZpbmFsbHl7aWYoaGFuZGxlclJldHVyblZhbHVlIT09dHJ1ZSl7aWYoZXZlbnQucHJldmVudERlZmF1bHQpCmV2ZW50LnByZXZlbnREZWZhdWx0KCk7ZWxzZQpldmVudC5yZXR1cm5WYWx1ZT1mYWxzZTt9fX0pO319O2tvLmJpbmRpbmdIYW5kbGVyc1sndGV4dCddPXsnaW5pdCc6ZnVuY3Rpb24oKXtyZXR1cm57J2NvbnRyb2xzRGVzY2VuZGFudEJpbmRpbmdzJzp0cnVlfTt9LCd1cGRhdGUnOmZ1bmN0aW9uKGVsZW1lbnQsdmFsdWVBY2Nlc3Nvcil7a28udXRpbHMuc2V0VGV4dENvbnRlbnQoZWxlbWVudCx2YWx1ZUFjY2Vzc29yKCkpO319O2tvLnZpcnR1YWxFbGVtZW50cy5hbGxvd2VkQmluZGluZ3NbJ3RleHQnXT10cnVlOyhmdW5jdGlvbigpe2lmKHdpbmRvdyYmd2luZG93Lm5hdmlnYXRvcil7dmFyIHBhcnNlVmVyc2lvbj1mdW5jdGlvbihtYXRjaGVzKXtpZihtYXRjaGVzKXtyZXR1cm4gcGFyc2VGbG9hdChtYXRjaGVzWzFdKTt9fTt2YXIgdXNlckFnZW50PXdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LG9wZXJhVmVyc2lvbixjaHJvbWVWZXJzaW9uLHNhZmFyaVZlcnNpb24sZmlyZWZveFZlcnNpb24saWVWZXJzaW9uLGVkZ2VWZXJzaW9uOyhvcGVyYVZlcnNpb249d2luZG93Lm9wZXJhJiZ3aW5kb3cub3BlcmEudmVyc2lvbiYmcGFyc2VJbnQod2luZG93Lm9wZXJhLnZlcnNpb24oKSkpfHwoZWRnZVZlcnNpb249cGFyc2VWZXJzaW9uKHVzZXJBZ2VudC5tYXRjaCgvRWRnZVwvKFteIF0rKSQvKSkpfHwoY2hyb21lVmVyc2lvbj1wYXJzZVZlcnNpb24odXNlckFnZW50Lm1hdGNoKC9DaHJvbWVcLyhbXiBdKykvKSkpfHwoc2FmYXJpVmVyc2lvbj1wYXJzZVZlcnNpb24odXNlckFnZW50Lm1hdGNoKC9WZXJzaW9uXC8oW14gXSspIFNhZmFyaS8pKSl8fChmaXJlZm94VmVyc2lvbj1wYXJzZVZlcnNpb24odXNlckFnZW50Lm1hdGNoKC9GaXJlZm94XC8oW14gXSspLykpKXx8KGllVmVyc2lvbj1rby51dGlscy5pZVZlcnNpb258fHBhcnNlVmVyc2lvbih1c2VyQWdlbnQubWF0Y2goL01TSUUgKFteIF0rKS8pKSl8fChpZVZlcnNpb249cGFyc2VWZXJzaW9uKHVzZXJBZ2VudC5tYXRjaCgvcnY6KFteICldKykvKSkpO30KaWYoaWVWZXJzaW9uPj04JiZpZVZlcnNpb248MTApe3ZhciBzZWxlY3Rpb25DaGFuZ2VSZWdpc3RlcmVkTmFtZT1rby51dGlscy5kb21EYXRhLm5leHRLZXkoKSxzZWxlY3Rpb25DaGFuZ2VIYW5kbGVyTmFtZT1rby51dGlscy5kb21EYXRhLm5leHRLZXkoKTt2YXIgc2VsZWN0aW9uQ2hhbmdlSGFuZGxlcj1mdW5jdGlvbihldmVudCl7dmFyIHRhcmdldD10aGlzLmFjdGl2ZUVsZW1lbnQsaGFuZGxlcj10YXJnZXQmJmtvLnV0aWxzLmRvbURhdGEuZ2V0KHRhcmdldCxzZWxlY3Rpb25DaGFuZ2VIYW5kbGVyTmFtZSk7aWYoaGFuZGxlcil7aGFuZGxlcihldmVudCk7fX07dmFyIHJlZ2lzdGVyRm9yU2VsZWN0aW9uQ2hhbmdlRXZlbnQ9ZnVuY3Rpb24oZWxlbWVudCxoYW5kbGVyKXt2YXIgb3duZXJEb2M9ZWxlbWVudC5vd25lckRvY3VtZW50O2lmKCFrby51dGlscy5kb21EYXRhLmdldChvd25lckRvYyxzZWxlY3Rpb25DaGFuZ2VSZWdpc3RlcmVkTmFtZSkpe2tvLnV0aWxzLmRvbURhdGEuc2V0KG93bmVyRG9jLHNlbGVjdGlvbkNoYW5nZVJlZ2lzdGVyZWROYW1lLHRydWUpO2tvLnV0aWxzLnJlZ2lzdGVyRXZlbnRIYW5kbGVyKG93bmVyRG9jLCdzZWxlY3Rpb25jaGFuZ2UnLHNlbGVjdGlvbkNoYW5nZUhhbmRsZXIpO30Ka28udXRpbHMuZG9tRGF0YS5zZXQoZWxlbWVudCxzZWxlY3Rpb25DaGFuZ2VIYW5kbGVyTmFtZSxoYW5kbGVyKTt9O30Ka28uYmluZGluZ0hhbmRsZXJzWyd0ZXh0SW5wdXQnXT17J2luaXQnOmZ1bmN0aW9uKGVsZW1lbnQsdmFsdWVBY2Nlc3NvcixhbGxCaW5kaW5ncyl7dmFyIHByZXZpb3VzRWxlbWVudFZhbHVlPWVsZW1lbnQudmFsdWUsdGltZW91dEhhbmRsZSxlbGVtZW50VmFsdWVCZWZvcmVFdmVudDt2YXIgdXBkYXRlTW9kZWw9ZnVuY3Rpb24oZXZlbnQpe2NsZWFyVGltZW91dCh0aW1lb3V0SGFuZGxlKTtlbGVtZW50VmFsdWVCZWZvcmVFdmVudD10aW1lb3V0SGFuZGxlPXVuZGVmaW5lZDt2YXIgZWxlbWVudFZhbHVlPWVsZW1lbnQudmFsdWU7aWYocHJldmlvdXNFbGVtZW50VmFsdWUhPT1lbGVtZW50VmFsdWUpe2lmKERFQlVHJiZldmVudCllbGVtZW50Wydfa29fdGV4dElucHV0UHJvY2Vzc2VkRXZlbnQnXT1ldmVudC50eXBlO3ByZXZpb3VzRWxlbWVudFZhbHVlPWVsZW1lbnRWYWx1ZTtrby5leHByZXNzaW9uUmV3cml0aW5nLndyaXRlVmFsdWVUb1Byb3BlcnR5KHZhbHVlQWNjZXNzb3IoKSxhbGxCaW5kaW5ncywndGV4dElucHV0JyxlbGVtZW50VmFsdWUpO319O3ZhciBkZWZlclVwZGF0ZU1vZGVsPWZ1bmN0aW9uKGV2ZW50KXtpZighdGltZW91dEhhbmRsZSl7ZWxlbWVudFZhbHVlQmVmb3JlRXZlbnQ9ZWxlbWVudC52YWx1ZTt2YXIgaGFuZGxlcj1ERUJVRz91cGRhdGVNb2RlbC5iaW5kKGVsZW1lbnQse3R5cGU6ZXZlbnQudHlwZX0pOnVwZGF0ZU1vZGVsO3RpbWVvdXRIYW5kbGU9a28udXRpbHMuc2V0VGltZW91dChoYW5kbGVyLDQpO319O3ZhciBpZVVwZGF0ZU1vZGVsPWtvLnV0aWxzLmllVmVyc2lvbj09OT9kZWZlclVwZGF0ZU1vZGVsOnVwZGF0ZU1vZGVsLG91clVwZGF0ZT1mYWxzZTt2YXIgdXBkYXRlVmlldz1mdW5jdGlvbigpe3ZhciBtb2RlbFZhbHVlPWtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodmFsdWVBY2Nlc3NvcigpKTtpZihtb2RlbFZhbHVlPT09bnVsbHx8bW9kZWxWYWx1ZT09PXVuZGVmaW5lZCl7bW9kZWxWYWx1ZT0nJzt9CmlmKGVsZW1lbnRWYWx1ZUJlZm9yZUV2ZW50IT09dW5kZWZpbmVkJiZtb2RlbFZhbHVlPT09ZWxlbWVudFZhbHVlQmVmb3JlRXZlbnQpe2tvLnV0aWxzLnNldFRpbWVvdXQodXBkYXRlVmlldyw0KTtyZXR1cm47fQppZihlbGVtZW50LnZhbHVlIT09bW9kZWxWYWx1ZSl7b3VyVXBkYXRlPXRydWU7ZWxlbWVudC52YWx1ZT1tb2RlbFZhbHVlO291clVwZGF0ZT1mYWxzZTtwcmV2aW91c0VsZW1lbnRWYWx1ZT1lbGVtZW50LnZhbHVlO319O3ZhciBvbkV2ZW50PWZ1bmN0aW9uKGV2ZW50LGhhbmRsZXIpe2tvLnV0aWxzLnJlZ2lzdGVyRXZlbnRIYW5kbGVyKGVsZW1lbnQsZXZlbnQsaGFuZGxlcik7fTtpZihERUJVRyYma28uYmluZGluZ0hhbmRsZXJzWyd0ZXh0SW5wdXQnXVsnX2ZvcmNlVXBkYXRlT24nXSl7a28udXRpbHMuYXJyYXlGb3JFYWNoKGtvLmJpbmRpbmdIYW5kbGVyc1sndGV4dElucHV0J11bJ19mb3JjZVVwZGF0ZU9uJ10sZnVuY3Rpb24oZXZlbnROYW1lKXtpZihldmVudE5hbWUuc2xpY2UoMCw1KT09J2FmdGVyJyl7b25FdmVudChldmVudE5hbWUuc2xpY2UoNSksZGVmZXJVcGRhdGVNb2RlbCk7fWVsc2V7b25FdmVudChldmVudE5hbWUsdXBkYXRlTW9kZWwpO319KTt9ZWxzZXtpZihpZVZlcnNpb24pe29uRXZlbnQoJ2tleXByZXNzJyx1cGRhdGVNb2RlbCk7fQppZihpZVZlcnNpb248MTEpe29uRXZlbnQoJ3Byb3BlcnR5Y2hhbmdlJyxmdW5jdGlvbihldmVudCl7aWYoIW91clVwZGF0ZSYmZXZlbnQucHJvcGVydHlOYW1lPT09J3ZhbHVlJyl7aWVVcGRhdGVNb2RlbChldmVudCk7fX0pO30KaWYoaWVWZXJzaW9uPT04KXtvbkV2ZW50KCdrZXl1cCcsdXBkYXRlTW9kZWwpO29uRXZlbnQoJ2tleWRvd24nLHVwZGF0ZU1vZGVsKTt9CmlmKHJlZ2lzdGVyRm9yU2VsZWN0aW9uQ2hhbmdlRXZlbnQpe3JlZ2lzdGVyRm9yU2VsZWN0aW9uQ2hhbmdlRXZlbnQoZWxlbWVudCxpZVVwZGF0ZU1vZGVsKTtvbkV2ZW50KCdkcmFnZW5kJyxkZWZlclVwZGF0ZU1vZGVsKTt9CmlmKCFpZVZlcnNpb258fGllVmVyc2lvbj49OSl7b25FdmVudCgnaW5wdXQnLGllVXBkYXRlTW9kZWwpO30KaWYoc2FmYXJpVmVyc2lvbjw1JiZrby51dGlscy50YWdOYW1lTG93ZXIoZWxlbWVudCk9PT0idGV4dGFyZWEiKXtvbkV2ZW50KCdrZXlkb3duJyxkZWZlclVwZGF0ZU1vZGVsKTtvbkV2ZW50KCdwYXN0ZScsZGVmZXJVcGRhdGVNb2RlbCk7b25FdmVudCgnY3V0JyxkZWZlclVwZGF0ZU1vZGVsKTt9ZWxzZSBpZihvcGVyYVZlcnNpb248MTEpe29uRXZlbnQoJ2tleWRvd24nLGRlZmVyVXBkYXRlTW9kZWwpO31lbHNlIGlmKGZpcmVmb3hWZXJzaW9uPDQuMCl7b25FdmVudCgnRE9NQXV0b0NvbXBsZXRlJyx1cGRhdGVNb2RlbCk7b25FdmVudCgnZHJhZ2Ryb3AnLHVwZGF0ZU1vZGVsKTtvbkV2ZW50KCdkcm9wJyx1cGRhdGVNb2RlbCk7fWVsc2UgaWYoZWRnZVZlcnNpb24mJmVsZW1lbnQudHlwZT09PSJudW1iZXIiKXtvbkV2ZW50KCdrZXlkb3duJyxkZWZlclVwZGF0ZU1vZGVsKTt9fQpvbkV2ZW50KCdjaGFuZ2UnLHVwZGF0ZU1vZGVsKTtvbkV2ZW50KCdibHVyJyx1cGRhdGVNb2RlbCk7a28uY29tcHV0ZWQodXBkYXRlVmlldyxudWxsLHtkaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQ6ZWxlbWVudH0pO319O2tvLmV4cHJlc3Npb25SZXdyaXRpbmcudHdvV2F5QmluZGluZ3NbJ3RleHRJbnB1dCddPXRydWU7a28uYmluZGluZ0hhbmRsZXJzWyd0ZXh0aW5wdXQnXT17J3ByZXByb2Nlc3MnOmZ1bmN0aW9uKHZhbHVlLG5hbWUsYWRkQmluZGluZyl7YWRkQmluZGluZygndGV4dElucHV0Jyx2YWx1ZSk7fX07fSkoKTtrby5iaW5kaW5nSGFuZGxlcnNbJ3VuaXF1ZU5hbWUnXT17J2luaXQnOmZ1bmN0aW9uKGVsZW1lbnQsdmFsdWVBY2Nlc3Nvcil7aWYodmFsdWVBY2Nlc3NvcigpKXt2YXIgbmFtZT0ia29fdW5pcXVlXyIrKCsra28uYmluZGluZ0hhbmRsZXJzWyd1bmlxdWVOYW1lJ10uY3VycmVudEluZGV4KTtrby51dGlscy5zZXRFbGVtZW50TmFtZShlbGVtZW50LG5hbWUpO319fTtrby5iaW5kaW5nSGFuZGxlcnNbJ3VuaXF1ZU5hbWUnXS5jdXJyZW50SW5kZXg9MDtrby5iaW5kaW5nSGFuZGxlcnNbJ3VzaW5nJ109eydpbml0JzpmdW5jdGlvbihlbGVtZW50LHZhbHVlQWNjZXNzb3IsYWxsQmluZGluZ3Msdmlld01vZGVsLGJpbmRpbmdDb250ZXh0KXt2YXIgb3B0aW9ucztpZihhbGxCaW5kaW5nc1snaGFzJ10oJ2FzJykpe29wdGlvbnM9eydhcyc6YWxsQmluZGluZ3MuZ2V0KCdhcycpLCdub0NoaWxkQ29udGV4dCc6YWxsQmluZGluZ3MuZ2V0KCdub0NoaWxkQ29udGV4dCcpfTt9CnZhciBpbm5lckNvbnRleHQ9YmluZGluZ0NvbnRleHRbJ2NyZWF0ZUNoaWxkQ29udGV4dCddKHZhbHVlQWNjZXNzb3Isb3B0aW9ucyk7a28uYXBwbHlCaW5kaW5nc1RvRGVzY2VuZGFudHMoaW5uZXJDb250ZXh0LGVsZW1lbnQpO3JldHVybnsnY29udHJvbHNEZXNjZW5kYW50QmluZGluZ3MnOnRydWV9O319O2tvLnZpcnR1YWxFbGVtZW50cy5hbGxvd2VkQmluZGluZ3NbJ3VzaW5nJ109dHJ1ZTtrby5iaW5kaW5nSGFuZGxlcnNbJ3ZhbHVlJ109eydpbml0JzpmdW5jdGlvbihlbGVtZW50LHZhbHVlQWNjZXNzb3IsYWxsQmluZGluZ3Mpe3ZhciB0YWdOYW1lPWtvLnV0aWxzLnRhZ05hbWVMb3dlcihlbGVtZW50KSxpc0lucHV0RWxlbWVudD10YWdOYW1lPT0iaW5wdXQiO2lmKGlzSW5wdXRFbGVtZW50JiYoZWxlbWVudC50eXBlPT0iY2hlY2tib3gifHxlbGVtZW50LnR5cGU9PSJyYWRpbyIpKXtrby5hcHBseUJpbmRpbmdBY2Nlc3NvcnNUb05vZGUoZWxlbWVudCx7J2NoZWNrZWRWYWx1ZSc6dmFsdWVBY2Nlc3Nvcn0pO3JldHVybjt9CnZhciBldmVudHNUb0NhdGNoPVtdO3ZhciByZXF1ZXN0ZWRFdmVudHNUb0NhdGNoPWFsbEJpbmRpbmdzLmdldCgidmFsdWVVcGRhdGUiKTt2YXIgcHJvcGVydHlDaGFuZ2VkRmlyZWQ9ZmFsc2U7dmFyIGVsZW1lbnRWYWx1ZUJlZm9yZUV2ZW50PW51bGw7aWYocmVxdWVzdGVkRXZlbnRzVG9DYXRjaCl7aWYodHlwZW9mIHJlcXVlc3RlZEV2ZW50c1RvQ2F0Y2g9PSJzdHJpbmciKXtldmVudHNUb0NhdGNoPVtyZXF1ZXN0ZWRFdmVudHNUb0NhdGNoXTt9ZWxzZXtldmVudHNUb0NhdGNoPWtvLnV0aWxzLmFycmF5R2V0RGlzdGluY3RWYWx1ZXMocmVxdWVzdGVkRXZlbnRzVG9DYXRjaCk7fQprby51dGlscy5hcnJheVJlbW92ZUl0ZW0oZXZlbnRzVG9DYXRjaCwiY2hhbmdlIik7fQp2YXIgdmFsdWVVcGRhdGVIYW5kbGVyPWZ1bmN0aW9uKCl7ZWxlbWVudFZhbHVlQmVmb3JlRXZlbnQ9bnVsbDtwcm9wZXJ0eUNoYW5nZWRGaXJlZD1mYWxzZTt2YXIgbW9kZWxWYWx1ZT12YWx1ZUFjY2Vzc29yKCk7dmFyIGVsZW1lbnRWYWx1ZT1rby5zZWxlY3RFeHRlbnNpb25zLnJlYWRWYWx1ZShlbGVtZW50KTtrby5leHByZXNzaW9uUmV3cml0aW5nLndyaXRlVmFsdWVUb1Byb3BlcnR5KG1vZGVsVmFsdWUsYWxsQmluZGluZ3MsJ3ZhbHVlJyxlbGVtZW50VmFsdWUpO30KdmFyIGllQXV0b0NvbXBsZXRlSGFja05lZWRlZD1rby51dGlscy5pZVZlcnNpb24mJmlzSW5wdXRFbGVtZW50JiZlbGVtZW50LnR5cGU9PSJ0ZXh0IiYmZWxlbWVudC5hdXRvY29tcGxldGUhPSJvZmYiJiYoIWVsZW1lbnQuZm9ybXx8ZWxlbWVudC5mb3JtLmF1dG9jb21wbGV0ZSE9Im9mZiIpO2lmKGllQXV0b0NvbXBsZXRlSGFja05lZWRlZCYma28udXRpbHMuYXJyYXlJbmRleE9mKGV2ZW50c1RvQ2F0Y2gsInByb3BlcnR5Y2hhbmdlIik9PS0xKXtrby51dGlscy5yZWdpc3RlckV2ZW50SGFuZGxlcihlbGVtZW50LCJwcm9wZXJ0eWNoYW5nZSIsZnVuY3Rpb24oKXtwcm9wZXJ0eUNoYW5nZWRGaXJlZD10cnVlfSk7a28udXRpbHMucmVnaXN0ZXJFdmVudEhhbmRsZXIoZWxlbWVudCwiZm9jdXMiLGZ1bmN0aW9uKCl7cHJvcGVydHlDaGFuZ2VkRmlyZWQ9ZmFsc2V9KTtrby51dGlscy5yZWdpc3RlckV2ZW50SGFuZGxlcihlbGVtZW50LCJibHVyIixmdW5jdGlvbigpe2lmKHByb3BlcnR5Q2hhbmdlZEZpcmVkKXt2YWx1ZVVwZGF0ZUhhbmRsZXIoKTt9fSk7fQprby51dGlscy5hcnJheUZvckVhY2goZXZlbnRzVG9DYXRjaCxmdW5jdGlvbihldmVudE5hbWUpe3ZhciBoYW5kbGVyPXZhbHVlVXBkYXRlSGFuZGxlcjtpZihrby51dGlscy5zdHJpbmdTdGFydHNXaXRoKGV2ZW50TmFtZSwiYWZ0ZXIiKSl7aGFuZGxlcj1mdW5jdGlvbigpe2VsZW1lbnRWYWx1ZUJlZm9yZUV2ZW50PWtvLnNlbGVjdEV4dGVuc2lvbnMucmVhZFZhbHVlKGVsZW1lbnQpO2tvLnV0aWxzLnNldFRpbWVvdXQodmFsdWVVcGRhdGVIYW5kbGVyLDApO307ZXZlbnROYW1lPWV2ZW50TmFtZS5zdWJzdHJpbmcoImFmdGVyIi5sZW5ndGgpO30Ka28udXRpbHMucmVnaXN0ZXJFdmVudEhhbmRsZXIoZWxlbWVudCxldmVudE5hbWUsaGFuZGxlcik7fSk7dmFyIHVwZGF0ZUZyb21Nb2RlbDtpZihpc0lucHV0RWxlbWVudCYmZWxlbWVudC50eXBlPT0iZmlsZSIpe3VwZGF0ZUZyb21Nb2RlbD1mdW5jdGlvbigpe3ZhciBuZXdWYWx1ZT1rby51dGlscy51bndyYXBPYnNlcnZhYmxlKHZhbHVlQWNjZXNzb3IoKSk7aWYobmV3VmFsdWU9PT1udWxsfHxuZXdWYWx1ZT09PXVuZGVmaW5lZHx8bmV3VmFsdWU9PT0iIil7ZWxlbWVudC52YWx1ZT0iIjt9ZWxzZXtrby5kZXBlbmRlbmN5RGV0ZWN0aW9uLmlnbm9yZSh2YWx1ZVVwZGF0ZUhhbmRsZXIpO319fWVsc2V7dXBkYXRlRnJvbU1vZGVsPWZ1bmN0aW9uKCl7dmFyIG5ld1ZhbHVlPWtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodmFsdWVBY2Nlc3NvcigpKTt2YXIgZWxlbWVudFZhbHVlPWtvLnNlbGVjdEV4dGVuc2lvbnMucmVhZFZhbHVlKGVsZW1lbnQpO2lmKGVsZW1lbnRWYWx1ZUJlZm9yZUV2ZW50IT09bnVsbCYmbmV3VmFsdWU9PT1lbGVtZW50VmFsdWVCZWZvcmVFdmVudCl7a28udXRpbHMuc2V0VGltZW91dCh1cGRhdGVGcm9tTW9kZWwsMCk7cmV0dXJuO30KdmFyIHZhbHVlSGFzQ2hhbmdlZD1uZXdWYWx1ZSE9PWVsZW1lbnRWYWx1ZTtpZih2YWx1ZUhhc0NoYW5nZWR8fGVsZW1lbnRWYWx1ZT09PXVuZGVmaW5lZCl7aWYodGFnTmFtZT09PSJzZWxlY3QiKXt2YXIgYWxsb3dVbnNldD1hbGxCaW5kaW5ncy5nZXQoJ3ZhbHVlQWxsb3dVbnNldCcpO2tvLnNlbGVjdEV4dGVuc2lvbnMud3JpdGVWYWx1ZShlbGVtZW50LG5ld1ZhbHVlLGFsbG93VW5zZXQpO2lmKCFhbGxvd1Vuc2V0JiZuZXdWYWx1ZSE9PWtvLnNlbGVjdEV4dGVuc2lvbnMucmVhZFZhbHVlKGVsZW1lbnQpKXtrby5kZXBlbmRlbmN5RGV0ZWN0aW9uLmlnbm9yZSh2YWx1ZVVwZGF0ZUhhbmRsZXIpO319ZWxzZXtrby5zZWxlY3RFeHRlbnNpb25zLndyaXRlVmFsdWUoZWxlbWVudCxuZXdWYWx1ZSk7fX19O30KaWYodGFnTmFtZT09PSJzZWxlY3QiKXt2YXIgdXBkYXRlRnJvbU1vZGVsQ29tcHV0ZWQ7a28uYmluZGluZ0V2ZW50LnN1YnNjcmliZShlbGVtZW50LGtvLmJpbmRpbmdFdmVudC5jaGlsZHJlbkNvbXBsZXRlLGZ1bmN0aW9uKCl7aWYoIXVwZGF0ZUZyb21Nb2RlbENvbXB1dGVkKXtrby51dGlscy5yZWdpc3RlckV2ZW50SGFuZGxlcihlbGVtZW50LCJjaGFuZ2UiLHZhbHVlVXBkYXRlSGFuZGxlcik7dXBkYXRlRnJvbU1vZGVsQ29tcHV0ZWQ9a28uY29tcHV0ZWQodXBkYXRlRnJvbU1vZGVsLG51bGwse2Rpc3Bvc2VXaGVuTm9kZUlzUmVtb3ZlZDplbGVtZW50fSk7fWVsc2UgaWYoYWxsQmluZGluZ3MuZ2V0KCd2YWx1ZUFsbG93VW5zZXQnKSl7dXBkYXRlRnJvbU1vZGVsKCk7fWVsc2V7dmFsdWVVcGRhdGVIYW5kbGVyKCk7fX0sbnVsbCx7J25vdGlmeUltbWVkaWF0ZWx5Jzp0cnVlfSk7fWVsc2V7a28udXRpbHMucmVnaXN0ZXJFdmVudEhhbmRsZXIoZWxlbWVudCwiY2hhbmdlIix2YWx1ZVVwZGF0ZUhhbmRsZXIpO2tvLmNvbXB1dGVkKHVwZGF0ZUZyb21Nb2RlbCxudWxsLHtkaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQ6ZWxlbWVudH0pO319LCd1cGRhdGUnOmZ1bmN0aW9uKCl7fX07a28uZXhwcmVzc2lvblJld3JpdGluZy50d29XYXlCaW5kaW5nc1sndmFsdWUnXT10cnVlO2tvLmJpbmRpbmdIYW5kbGVyc1sndmlzaWJsZSddPXsndXBkYXRlJzpmdW5jdGlvbihlbGVtZW50LHZhbHVlQWNjZXNzb3Ipe3ZhciB2YWx1ZT1rby51dGlscy51bndyYXBPYnNlcnZhYmxlKHZhbHVlQWNjZXNzb3IoKSk7dmFyIGlzQ3VycmVudGx5VmlzaWJsZT0hKGVsZW1lbnQuc3R5bGUuZGlzcGxheT09Im5vbmUiKTtpZih2YWx1ZSYmIWlzQ3VycmVudGx5VmlzaWJsZSkKZWxlbWVudC5zdHlsZS5kaXNwbGF5PSIiO2Vsc2UgaWYoKCF2YWx1ZSkmJmlzQ3VycmVudGx5VmlzaWJsZSkKZWxlbWVudC5zdHlsZS5kaXNwbGF5PSJub25lIjt9fTtrby5iaW5kaW5nSGFuZGxlcnNbJ2hpZGRlbiddPXsndXBkYXRlJzpmdW5jdGlvbihlbGVtZW50LHZhbHVlQWNjZXNzb3Ipe2tvLmJpbmRpbmdIYW5kbGVyc1sndmlzaWJsZSddWyd1cGRhdGUnXShlbGVtZW50LGZ1bmN0aW9uKCl7cmV0dXJuIWtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodmFsdWVBY2Nlc3NvcigpKX0pO319O21ha2VFdmVudEhhbmRsZXJTaG9ydGN1dCgnY2xpY2snKTtrby50ZW1wbGF0ZUVuZ2luZT1mdW5jdGlvbigpe307a28udGVtcGxhdGVFbmdpbmUucHJvdG90eXBlWydyZW5kZXJUZW1wbGF0ZVNvdXJjZSddPWZ1bmN0aW9uKHRlbXBsYXRlU291cmNlLGJpbmRpbmdDb250ZXh0LG9wdGlvbnMsdGVtcGxhdGVEb2N1bWVudCl7dGhyb3cgbmV3IEVycm9yKCJPdmVycmlkZSByZW5kZXJUZW1wbGF0ZVNvdXJjZSIpO307a28udGVtcGxhdGVFbmdpbmUucHJvdG90eXBlWydjcmVhdGVKYXZhU2NyaXB0RXZhbHVhdG9yQmxvY2snXT1mdW5jdGlvbihzY3JpcHQpe3Rocm93IG5ldyBFcnJvcigiT3ZlcnJpZGUgY3JlYXRlSmF2YVNjcmlwdEV2YWx1YXRvckJsb2NrIik7fTtrby50ZW1wbGF0ZUVuZ2luZS5wcm90b3R5cGVbJ21ha2VUZW1wbGF0ZVNvdXJjZSddPWZ1bmN0aW9uKHRlbXBsYXRlLHRlbXBsYXRlRG9jdW1lbnQpe2lmKHR5cGVvZiB0ZW1wbGF0ZT09InN0cmluZyIpe3RlbXBsYXRlRG9jdW1lbnQ9dGVtcGxhdGVEb2N1bWVudHx8ZG9jdW1lbnQ7dmFyIGVsZW09dGVtcGxhdGVEb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0ZW1wbGF0ZSk7aWYoIWVsZW0pCnRocm93IG5ldyBFcnJvcigiQ2Fubm90IGZpbmQgdGVtcGxhdGUgd2l0aCBJRCAiK3RlbXBsYXRlKTtyZXR1cm4gbmV3IGtvLnRlbXBsYXRlU291cmNlcy5kb21FbGVtZW50KGVsZW0pO31lbHNlIGlmKCh0ZW1wbGF0ZS5ub2RlVHlwZT09MSl8fCh0ZW1wbGF0ZS5ub2RlVHlwZT09OCkpe3JldHVybiBuZXcga28udGVtcGxhdGVTb3VyY2VzLmFub255bW91c1RlbXBsYXRlKHRlbXBsYXRlKTt9ZWxzZQp0aHJvdyBuZXcgRXJyb3IoIlVua25vd24gdGVtcGxhdGUgdHlwZTogIit0ZW1wbGF0ZSk7fTtrby50ZW1wbGF0ZUVuZ2luZS5wcm90b3R5cGVbJ3JlbmRlclRlbXBsYXRlJ109ZnVuY3Rpb24odGVtcGxhdGUsYmluZGluZ0NvbnRleHQsb3B0aW9ucyx0ZW1wbGF0ZURvY3VtZW50KXt2YXIgdGVtcGxhdGVTb3VyY2U9dGhpc1snbWFrZVRlbXBsYXRlU291cmNlJ10odGVtcGxhdGUsdGVtcGxhdGVEb2N1bWVudCk7cmV0dXJuIHRoaXNbJ3JlbmRlclRlbXBsYXRlU291cmNlJ10odGVtcGxhdGVTb3VyY2UsYmluZGluZ0NvbnRleHQsb3B0aW9ucyx0ZW1wbGF0ZURvY3VtZW50KTt9O2tvLnRlbXBsYXRlRW5naW5lLnByb3RvdHlwZVsnaXNUZW1wbGF0ZVJld3JpdHRlbiddPWZ1bmN0aW9uKHRlbXBsYXRlLHRlbXBsYXRlRG9jdW1lbnQpe2lmKHRoaXNbJ2FsbG93VGVtcGxhdGVSZXdyaXRpbmcnXT09PWZhbHNlKQpyZXR1cm4gdHJ1ZTtyZXR1cm4gdGhpc1snbWFrZVRlbXBsYXRlU291cmNlJ10odGVtcGxhdGUsdGVtcGxhdGVEb2N1bWVudClbJ2RhdGEnXSgiaXNSZXdyaXR0ZW4iKTt9O2tvLnRlbXBsYXRlRW5naW5lLnByb3RvdHlwZVsncmV3cml0ZVRlbXBsYXRlJ109ZnVuY3Rpb24odGVtcGxhdGUscmV3cml0ZXJDYWxsYmFjayx0ZW1wbGF0ZURvY3VtZW50KXt2YXIgdGVtcGxhdGVTb3VyY2U9dGhpc1snbWFrZVRlbXBsYXRlU291cmNlJ10odGVtcGxhdGUsdGVtcGxhdGVEb2N1bWVudCk7dmFyIHJld3JpdHRlbj1yZXdyaXRlckNhbGxiYWNrKHRlbXBsYXRlU291cmNlWyd0ZXh0J10oKSk7dGVtcGxhdGVTb3VyY2VbJ3RleHQnXShyZXdyaXR0ZW4pO3RlbXBsYXRlU291cmNlWydkYXRhJ10oImlzUmV3cml0dGVuIix0cnVlKTt9O2tvLmV4cG9ydFN5bWJvbCgndGVtcGxhdGVFbmdpbmUnLGtvLnRlbXBsYXRlRW5naW5lKTtrby50ZW1wbGF0ZVJld3JpdGluZz0oZnVuY3Rpb24oKXt2YXIgbWVtb2l6ZURhdGFCaW5kaW5nQXR0cmlidXRlU3ludGF4UmVnZXg9Lyg8KFthLXpdK1xkKikoPzpccysoPyFkYXRhLWJpbmRccyo9XHMqKVthLXowLTlcLV0rKD86PSg/OlwiW15cIl0qXCJ8XCdbXlwnXSpcJ3xbXj5dKikpPykqXHMrKWRhdGEtYmluZFxzKj1ccyooWyInXSkoW1xzXFNdKj8pXDMvZ2k7dmFyIG1lbW9pemVWaXJ0dWFsQ29udGFpbmVyQmluZGluZ1N5bnRheFJlZ2V4PS88IS0tXHMqa29cYlxzKihbXHNcU10qPylccyotLT4vZztmdW5jdGlvbiB2YWxpZGF0ZURhdGFCaW5kVmFsdWVzRm9yUmV3cml0aW5nKGtleVZhbHVlQXJyYXkpe3ZhciBhbGxWYWxpZGF0b3JzPWtvLmV4cHJlc3Npb25SZXdyaXRpbmcuYmluZGluZ1Jld3JpdGVWYWxpZGF0b3JzO2Zvcih2YXIgaT0wO2k8a2V5VmFsdWVBcnJheS5sZW5ndGg7aSsrKXt2YXIga2V5PWtleVZhbHVlQXJyYXlbaV1bJ2tleSddO2lmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhbGxWYWxpZGF0b3JzLGtleSkpe3ZhciB2YWxpZGF0b3I9YWxsVmFsaWRhdG9yc1trZXldO2lmKHR5cGVvZiB2YWxpZGF0b3I9PT0iZnVuY3Rpb24iKXt2YXIgcG9zc2libGVFcnJvck1lc3NhZ2U9dmFsaWRhdG9yKGtleVZhbHVlQXJyYXlbaV1bJ3ZhbHVlJ10pO2lmKHBvc3NpYmxlRXJyb3JNZXNzYWdlKQp0aHJvdyBuZXcgRXJyb3IocG9zc2libGVFcnJvck1lc3NhZ2UpO31lbHNlIGlmKCF2YWxpZGF0b3Ipe3Rocm93IG5ldyBFcnJvcigiVGhpcyB0ZW1wbGF0ZSBlbmdpbmUgZG9lcyBub3Qgc3VwcG9ydCB0aGUgJyIra2V5KyInIGJpbmRpbmcgd2l0aGluIGl0cyB0ZW1wbGF0ZXMiKTt9fX19CmZ1bmN0aW9uIGNvbnN0cnVjdE1lbW9pemVkVGFnUmVwbGFjZW1lbnQoZGF0YUJpbmRBdHRyaWJ1dGVWYWx1ZSx0YWdUb1JldGFpbixub2RlTmFtZSx0ZW1wbGF0ZUVuZ2luZSl7dmFyIGRhdGFCaW5kS2V5VmFsdWVBcnJheT1rby5leHByZXNzaW9uUmV3cml0aW5nLnBhcnNlT2JqZWN0TGl0ZXJhbChkYXRhQmluZEF0dHJpYnV0ZVZhbHVlKTt2YWxpZGF0ZURhdGFCaW5kVmFsdWVzRm9yUmV3cml0aW5nKGRhdGFCaW5kS2V5VmFsdWVBcnJheSk7dmFyIHJld3JpdHRlbkRhdGFCaW5kQXR0cmlidXRlVmFsdWU9a28uZXhwcmVzc2lvblJld3JpdGluZy5wcmVQcm9jZXNzQmluZGluZ3MoZGF0YUJpbmRLZXlWYWx1ZUFycmF5LHsndmFsdWVBY2Nlc3NvcnMnOnRydWV9KTt2YXIgYXBwbHlCaW5kaW5nc1RvTmV4dFNpYmxpbmdTY3JpcHQ9ImtvLl9fdHJfYW1idG5zKGZ1bmN0aW9uKCRjb250ZXh0LCRlbGVtZW50KXtyZXR1cm4oZnVuY3Rpb24oKXtyZXR1cm57ICIrcmV3cml0dGVuRGF0YUJpbmRBdHRyaWJ1dGVWYWx1ZSsiIH0gfSkoKX0sJyIrbm9kZU5hbWUudG9Mb3dlckNhc2UoKSsiJykiO3JldHVybiB0ZW1wbGF0ZUVuZ2luZVsnY3JlYXRlSmF2YVNjcmlwdEV2YWx1YXRvckJsb2NrJ10oYXBwbHlCaW5kaW5nc1RvTmV4dFNpYmxpbmdTY3JpcHQpK3RhZ1RvUmV0YWluO30KcmV0dXJue2Vuc3VyZVRlbXBsYXRlSXNSZXdyaXR0ZW46ZnVuY3Rpb24odGVtcGxhdGUsdGVtcGxhdGVFbmdpbmUsdGVtcGxhdGVEb2N1bWVudCl7aWYoIXRlbXBsYXRlRW5naW5lWydpc1RlbXBsYXRlUmV3cml0dGVuJ10odGVtcGxhdGUsdGVtcGxhdGVEb2N1bWVudCkpCnRlbXBsYXRlRW5naW5lWydyZXdyaXRlVGVtcGxhdGUnXSh0ZW1wbGF0ZSxmdW5jdGlvbihodG1sU3RyaW5nKXtyZXR1cm4ga28udGVtcGxhdGVSZXdyaXRpbmcubWVtb2l6ZUJpbmRpbmdBdHRyaWJ1dGVTeW50YXgoaHRtbFN0cmluZyx0ZW1wbGF0ZUVuZ2luZSk7fSx0ZW1wbGF0ZURvY3VtZW50KTt9LG1lbW9pemVCaW5kaW5nQXR0cmlidXRlU3ludGF4OmZ1bmN0aW9uKGh0bWxTdHJpbmcsdGVtcGxhdGVFbmdpbmUpe3JldHVybiBodG1sU3RyaW5nLnJlcGxhY2UobWVtb2l6ZURhdGFCaW5kaW5nQXR0cmlidXRlU3ludGF4UmVnZXgsZnVuY3Rpb24oKXtyZXR1cm4gY29uc3RydWN0TWVtb2l6ZWRUYWdSZXBsYWNlbWVudChhcmd1bWVudHNbNF0sYXJndW1lbnRzWzFdLGFyZ3VtZW50c1syXSx0ZW1wbGF0ZUVuZ2luZSk7fSkucmVwbGFjZShtZW1vaXplVmlydHVhbENvbnRhaW5lckJpbmRpbmdTeW50YXhSZWdleCxmdW5jdGlvbigpe3JldHVybiBjb25zdHJ1Y3RNZW1vaXplZFRhZ1JlcGxhY2VtZW50KGFyZ3VtZW50c1sxXSwiPCEtLSBrbyAtLT4iLCIjY29tbWVudCIsdGVtcGxhdGVFbmdpbmUpO30pO30sYXBwbHlNZW1vaXplZEJpbmRpbmdzVG9OZXh0U2libGluZzpmdW5jdGlvbihiaW5kaW5ncyxub2RlTmFtZSl7cmV0dXJuIGtvLm1lbW9pemF0aW9uLm1lbW9pemUoZnVuY3Rpb24oZG9tTm9kZSxiaW5kaW5nQ29udGV4dCl7dmFyIG5vZGVUb0JpbmQ9ZG9tTm9kZS5uZXh0U2libGluZztpZihub2RlVG9CaW5kJiZub2RlVG9CaW5kLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk9PT1ub2RlTmFtZSl7a28uYXBwbHlCaW5kaW5nQWNjZXNzb3JzVG9Ob2RlKG5vZGVUb0JpbmQsYmluZGluZ3MsYmluZGluZ0NvbnRleHQpO319KTt9fX0pKCk7a28uZXhwb3J0U3ltYm9sKCdfX3RyX2FtYnRucycsa28udGVtcGxhdGVSZXdyaXRpbmcuYXBwbHlNZW1vaXplZEJpbmRpbmdzVG9OZXh0U2libGluZyk7KGZ1bmN0aW9uKCl7a28udGVtcGxhdGVTb3VyY2VzPXt9O3ZhciB0ZW1wbGF0ZVNjcmlwdD0xLHRlbXBsYXRlVGV4dEFyZWE9Mix0ZW1wbGF0ZVRlbXBsYXRlPTMsdGVtcGxhdGVFbGVtZW50PTQ7a28udGVtcGxhdGVTb3VyY2VzLmRvbUVsZW1lbnQ9ZnVuY3Rpb24oZWxlbWVudCl7dGhpcy5kb21FbGVtZW50PWVsZW1lbnQ7aWYoZWxlbWVudCl7dmFyIHRhZ05hbWVMb3dlcj1rby51dGlscy50YWdOYW1lTG93ZXIoZWxlbWVudCk7dGhpcy50ZW1wbGF0ZVR5cGU9dGFnTmFtZUxvd2VyPT09InNjcmlwdCI/dGVtcGxhdGVTY3JpcHQ6dGFnTmFtZUxvd2VyPT09InRleHRhcmVhIj90ZW1wbGF0ZVRleHRBcmVhOnRhZ05hbWVMb3dlcj09InRlbXBsYXRlIiYmZWxlbWVudC5jb250ZW50JiZlbGVtZW50LmNvbnRlbnQubm9kZVR5cGU9PT0xMT90ZW1wbGF0ZVRlbXBsYXRlOnRlbXBsYXRlRWxlbWVudDt9fQprby50ZW1wbGF0ZVNvdXJjZXMuZG9tRWxlbWVudC5wcm90b3R5cGVbJ3RleHQnXT1mdW5jdGlvbigpe3ZhciBlbGVtQ29udGVudHNQcm9wZXJ0eT10aGlzLnRlbXBsYXRlVHlwZT09PXRlbXBsYXRlU2NyaXB0PyJ0ZXh0Ijp0aGlzLnRlbXBsYXRlVHlwZT09PXRlbXBsYXRlVGV4dEFyZWE/InZhbHVlIjoiaW5uZXJIVE1MIjtpZihhcmd1bWVudHMubGVuZ3RoPT0wKXtyZXR1cm4gdGhpcy5kb21FbGVtZW50W2VsZW1Db250ZW50c1Byb3BlcnR5XTt9ZWxzZXt2YXIgdmFsdWVUb1dyaXRlPWFyZ3VtZW50c1swXTtpZihlbGVtQ29udGVudHNQcm9wZXJ0eT09PSJpbm5lckhUTUwiKQprby51dGlscy5zZXRIdG1sKHRoaXMuZG9tRWxlbWVudCx2YWx1ZVRvV3JpdGUpO2Vsc2UKdGhpcy5kb21FbGVtZW50W2VsZW1Db250ZW50c1Byb3BlcnR5XT12YWx1ZVRvV3JpdGU7fX07dmFyIGRhdGFEb21EYXRhUHJlZml4PWtvLnV0aWxzLmRvbURhdGEubmV4dEtleSgpKyJfIjtrby50ZW1wbGF0ZVNvdXJjZXMuZG9tRWxlbWVudC5wcm90b3R5cGVbJ2RhdGEnXT1mdW5jdGlvbihrZXkpe2lmKGFyZ3VtZW50cy5sZW5ndGg9PT0xKXtyZXR1cm4ga28udXRpbHMuZG9tRGF0YS5nZXQodGhpcy5kb21FbGVtZW50LGRhdGFEb21EYXRhUHJlZml4K2tleSk7fWVsc2V7a28udXRpbHMuZG9tRGF0YS5zZXQodGhpcy5kb21FbGVtZW50LGRhdGFEb21EYXRhUHJlZml4K2tleSxhcmd1bWVudHNbMV0pO319O3ZhciB0ZW1wbGF0ZXNEb21EYXRhS2V5PWtvLnV0aWxzLmRvbURhdGEubmV4dEtleSgpO2Z1bmN0aW9uIGdldFRlbXBsYXRlRG9tRGF0YShlbGVtZW50KXtyZXR1cm4ga28udXRpbHMuZG9tRGF0YS5nZXQoZWxlbWVudCx0ZW1wbGF0ZXNEb21EYXRhS2V5KXx8e307fQpmdW5jdGlvbiBzZXRUZW1wbGF0ZURvbURhdGEoZWxlbWVudCxkYXRhKXtrby51dGlscy5kb21EYXRhLnNldChlbGVtZW50LHRlbXBsYXRlc0RvbURhdGFLZXksZGF0YSk7fQprby50ZW1wbGF0ZVNvdXJjZXMuZG9tRWxlbWVudC5wcm90b3R5cGVbJ25vZGVzJ109ZnVuY3Rpb24oKXt2YXIgZWxlbWVudD10aGlzLmRvbUVsZW1lbnQ7aWYoYXJndW1lbnRzLmxlbmd0aD09MCl7dmFyIHRlbXBsYXRlRGF0YT1nZXRUZW1wbGF0ZURvbURhdGEoZWxlbWVudCksbm9kZXM9dGVtcGxhdGVEYXRhLmNvbnRhaW5lckRhdGF8fCh0aGlzLnRlbXBsYXRlVHlwZT09PXRlbXBsYXRlVGVtcGxhdGU/ZWxlbWVudC5jb250ZW50OnRoaXMudGVtcGxhdGVUeXBlPT09dGVtcGxhdGVFbGVtZW50P2VsZW1lbnQ6dW5kZWZpbmVkKTtpZighbm9kZXN8fHRlbXBsYXRlRGF0YS5hbHdheXNDaGVja1RleHQpe3ZhciB0ZXh0PXRoaXNbJ3RleHQnXSgpO2lmKHRleHQmJnRleHQhPT10ZW1wbGF0ZURhdGEudGV4dERhdGEpe25vZGVzPWtvLnV0aWxzLnBhcnNlSHRtbEZvclRlbXBsYXRlTm9kZXModGV4dCxlbGVtZW50Lm93bmVyRG9jdW1lbnQpO3NldFRlbXBsYXRlRG9tRGF0YShlbGVtZW50LHtjb250YWluZXJEYXRhOm5vZGVzLHRleHREYXRhOnRleHQsYWx3YXlzQ2hlY2tUZXh0OnRydWV9KTt9fQpyZXR1cm4gbm9kZXM7fWVsc2V7dmFyIHZhbHVlVG9Xcml0ZT1hcmd1bWVudHNbMF07aWYodGhpcy50ZW1wbGF0ZVR5cGUhPT11bmRlZmluZWQpe3RoaXNbJ3RleHQnXSgiIik7fQpzZXRUZW1wbGF0ZURvbURhdGEoZWxlbWVudCx7Y29udGFpbmVyRGF0YTp2YWx1ZVRvV3JpdGV9KTt9fTtrby50ZW1wbGF0ZVNvdXJjZXMuYW5vbnltb3VzVGVtcGxhdGU9ZnVuY3Rpb24oZWxlbWVudCl7dGhpcy5kb21FbGVtZW50PWVsZW1lbnQ7fQprby50ZW1wbGF0ZVNvdXJjZXMuYW5vbnltb3VzVGVtcGxhdGUucHJvdG90eXBlPW5ldyBrby50ZW1wbGF0ZVNvdXJjZXMuZG9tRWxlbWVudCgpO2tvLnRlbXBsYXRlU291cmNlcy5hbm9ueW1vdXNUZW1wbGF0ZS5wcm90b3R5cGUuY29uc3RydWN0b3I9a28udGVtcGxhdGVTb3VyY2VzLmFub255bW91c1RlbXBsYXRlO2tvLnRlbXBsYXRlU291cmNlcy5hbm9ueW1vdXNUZW1wbGF0ZS5wcm90b3R5cGVbJ3RleHQnXT1mdW5jdGlvbigpe2lmKGFyZ3VtZW50cy5sZW5ndGg9PTApe3ZhciB0ZW1wbGF0ZURhdGE9Z2V0VGVtcGxhdGVEb21EYXRhKHRoaXMuZG9tRWxlbWVudCk7aWYodGVtcGxhdGVEYXRhLnRleHREYXRhPT09dW5kZWZpbmVkJiZ0ZW1wbGF0ZURhdGEuY29udGFpbmVyRGF0YSkKdGVtcGxhdGVEYXRhLnRleHREYXRhPXRlbXBsYXRlRGF0YS5jb250YWluZXJEYXRhLmlubmVySFRNTDtyZXR1cm4gdGVtcGxhdGVEYXRhLnRleHREYXRhO31lbHNle3ZhciB2YWx1ZVRvV3JpdGU9YXJndW1lbnRzWzBdO3NldFRlbXBsYXRlRG9tRGF0YSh0aGlzLmRvbUVsZW1lbnQse3RleHREYXRhOnZhbHVlVG9Xcml0ZX0pO319O2tvLmV4cG9ydFN5bWJvbCgndGVtcGxhdGVTb3VyY2VzJyxrby50ZW1wbGF0ZVNvdXJjZXMpO2tvLmV4cG9ydFN5bWJvbCgndGVtcGxhdGVTb3VyY2VzLmRvbUVsZW1lbnQnLGtvLnRlbXBsYXRlU291cmNlcy5kb21FbGVtZW50KTtrby5leHBvcnRTeW1ib2woJ3RlbXBsYXRlU291cmNlcy5hbm9ueW1vdXNUZW1wbGF0ZScsa28udGVtcGxhdGVTb3VyY2VzLmFub255bW91c1RlbXBsYXRlKTt9KSgpOyhmdW5jdGlvbigpe3ZhciBfdGVtcGxhdGVFbmdpbmU7a28uc2V0VGVtcGxhdGVFbmdpbmU9ZnVuY3Rpb24odGVtcGxhdGVFbmdpbmUpe2lmKCh0ZW1wbGF0ZUVuZ2luZSE9dW5kZWZpbmVkKSYmISh0ZW1wbGF0ZUVuZ2luZSBpbnN0YW5jZW9mIGtvLnRlbXBsYXRlRW5naW5lKSkKdGhyb3cgbmV3IEVycm9yKCJ0ZW1wbGF0ZUVuZ2luZSBtdXN0IGluaGVyaXQgZnJvbSBrby50ZW1wbGF0ZUVuZ2luZSIpO190ZW1wbGF0ZUVuZ2luZT10ZW1wbGF0ZUVuZ2luZTt9CmZ1bmN0aW9uIGludm9rZUZvckVhY2hOb2RlSW5Db250aW51b3VzUmFuZ2UoZmlyc3ROb2RlLGxhc3ROb2RlLGFjdGlvbil7dmFyIG5vZGUsbmV4dEluUXVldWU9Zmlyc3ROb2RlLGZpcnN0T3V0T2ZSYW5nZU5vZGU9a28udmlydHVhbEVsZW1lbnRzLm5leHRTaWJsaW5nKGxhc3ROb2RlKTt3aGlsZShuZXh0SW5RdWV1ZSYmKChub2RlPW5leHRJblF1ZXVlKSE9PWZpcnN0T3V0T2ZSYW5nZU5vZGUpKXtuZXh0SW5RdWV1ZT1rby52aXJ0dWFsRWxlbWVudHMubmV4dFNpYmxpbmcobm9kZSk7YWN0aW9uKG5vZGUsbmV4dEluUXVldWUpO319CmZ1bmN0aW9uIGFjdGl2YXRlQmluZGluZ3NPbkNvbnRpbnVvdXNOb2RlQXJyYXkoY29udGludW91c05vZGVBcnJheSxiaW5kaW5nQ29udGV4dCl7aWYoY29udGludW91c05vZGVBcnJheS5sZW5ndGgpe3ZhciBmaXJzdE5vZGU9Y29udGludW91c05vZGVBcnJheVswXSxsYXN0Tm9kZT1jb250aW51b3VzTm9kZUFycmF5W2NvbnRpbnVvdXNOb2RlQXJyYXkubGVuZ3RoLTFdLHBhcmVudE5vZGU9Zmlyc3ROb2RlLnBhcmVudE5vZGUscHJvdmlkZXI9a28uYmluZGluZ1Byb3ZpZGVyWydpbnN0YW5jZSddLHByZXByb2Nlc3NOb2RlPXByb3ZpZGVyWydwcmVwcm9jZXNzTm9kZSddO2lmKHByZXByb2Nlc3NOb2RlKXtpbnZva2VGb3JFYWNoTm9kZUluQ29udGludW91c1JhbmdlKGZpcnN0Tm9kZSxsYXN0Tm9kZSxmdW5jdGlvbihub2RlLG5leHROb2RlSW5SYW5nZSl7dmFyIG5vZGVQcmV2aW91c1NpYmxpbmc9bm9kZS5wcmV2aW91c1NpYmxpbmc7dmFyIG5ld05vZGVzPXByZXByb2Nlc3NOb2RlLmNhbGwocHJvdmlkZXIsbm9kZSk7aWYobmV3Tm9kZXMpe2lmKG5vZGU9PT1maXJzdE5vZGUpCmZpcnN0Tm9kZT1uZXdOb2Rlc1swXXx8bmV4dE5vZGVJblJhbmdlO2lmKG5vZGU9PT1sYXN0Tm9kZSkKbGFzdE5vZGU9bmV3Tm9kZXNbbmV3Tm9kZXMubGVuZ3RoLTFdfHxub2RlUHJldmlvdXNTaWJsaW5nO319KTtjb250aW51b3VzTm9kZUFycmF5Lmxlbmd0aD0wO2lmKCFmaXJzdE5vZGUpe3JldHVybjt9CmlmKGZpcnN0Tm9kZT09PWxhc3ROb2RlKXtjb250aW51b3VzTm9kZUFycmF5LnB1c2goZmlyc3ROb2RlKTt9ZWxzZXtjb250aW51b3VzTm9kZUFycmF5LnB1c2goZmlyc3ROb2RlLGxhc3ROb2RlKTtrby51dGlscy5maXhVcENvbnRpbnVvdXNOb2RlQXJyYXkoY29udGludW91c05vZGVBcnJheSxwYXJlbnROb2RlKTt9fQppbnZva2VGb3JFYWNoTm9kZUluQ29udGludW91c1JhbmdlKGZpcnN0Tm9kZSxsYXN0Tm9kZSxmdW5jdGlvbihub2RlKXtpZihub2RlLm5vZGVUeXBlPT09MXx8bm9kZS5ub2RlVHlwZT09PTgpCmtvLmFwcGx5QmluZGluZ3MoYmluZGluZ0NvbnRleHQsbm9kZSk7fSk7aW52b2tlRm9yRWFjaE5vZGVJbkNvbnRpbnVvdXNSYW5nZShmaXJzdE5vZGUsbGFzdE5vZGUsZnVuY3Rpb24obm9kZSl7aWYobm9kZS5ub2RlVHlwZT09PTF8fG5vZGUubm9kZVR5cGU9PT04KQprby5tZW1vaXphdGlvbi51bm1lbW9pemVEb21Ob2RlQW5kRGVzY2VuZGFudHMobm9kZSxbYmluZGluZ0NvbnRleHRdKTt9KTtrby51dGlscy5maXhVcENvbnRpbnVvdXNOb2RlQXJyYXkoY29udGludW91c05vZGVBcnJheSxwYXJlbnROb2RlKTt9fQpmdW5jdGlvbiBnZXRGaXJzdE5vZGVGcm9tUG9zc2libGVBcnJheShub2RlT3JOb2RlQXJyYXkpe3JldHVybiBub2RlT3JOb2RlQXJyYXkubm9kZVR5cGU/bm9kZU9yTm9kZUFycmF5Om5vZGVPck5vZGVBcnJheS5sZW5ndGg+MD9ub2RlT3JOb2RlQXJyYXlbMF06bnVsbDt9CmZ1bmN0aW9uIGV4ZWN1dGVUZW1wbGF0ZSh0YXJnZXROb2RlT3JOb2RlQXJyYXkscmVuZGVyTW9kZSx0ZW1wbGF0ZSxiaW5kaW5nQ29udGV4dCxvcHRpb25zKXtvcHRpb25zPW9wdGlvbnN8fHt9O3ZhciBmaXJzdFRhcmdldE5vZGU9dGFyZ2V0Tm9kZU9yTm9kZUFycmF5JiZnZXRGaXJzdE5vZGVGcm9tUG9zc2libGVBcnJheSh0YXJnZXROb2RlT3JOb2RlQXJyYXkpO3ZhciB0ZW1wbGF0ZURvY3VtZW50PShmaXJzdFRhcmdldE5vZGV8fHRlbXBsYXRlfHx7fSkub3duZXJEb2N1bWVudDt2YXIgdGVtcGxhdGVFbmdpbmVUb1VzZT0ob3B0aW9uc1sndGVtcGxhdGVFbmdpbmUnXXx8X3RlbXBsYXRlRW5naW5lKTtrby50ZW1wbGF0ZVJld3JpdGluZy5lbnN1cmVUZW1wbGF0ZUlzUmV3cml0dGVuKHRlbXBsYXRlLHRlbXBsYXRlRW5naW5lVG9Vc2UsdGVtcGxhdGVEb2N1bWVudCk7dmFyIHJlbmRlcmVkTm9kZXNBcnJheT10ZW1wbGF0ZUVuZ2luZVRvVXNlWydyZW5kZXJUZW1wbGF0ZSddKHRlbXBsYXRlLGJpbmRpbmdDb250ZXh0LG9wdGlvbnMsdGVtcGxhdGVEb2N1bWVudCk7aWYoKHR5cGVvZiByZW5kZXJlZE5vZGVzQXJyYXkubGVuZ3RoIT0ibnVtYmVyIil8fChyZW5kZXJlZE5vZGVzQXJyYXkubGVuZ3RoPjAmJnR5cGVvZiByZW5kZXJlZE5vZGVzQXJyYXlbMF0ubm9kZVR5cGUhPSJudW1iZXIiKSkKdGhyb3cgbmV3IEVycm9yKCJUZW1wbGF0ZSBlbmdpbmUgbXVzdCByZXR1cm4gYW4gYXJyYXkgb2YgRE9NIG5vZGVzIik7dmFyIGhhdmVBZGRlZE5vZGVzVG9QYXJlbnQ9ZmFsc2U7c3dpdGNoKHJlbmRlck1vZGUpe2Nhc2UicmVwbGFjZUNoaWxkcmVuIjprby52aXJ0dWFsRWxlbWVudHMuc2V0RG9tTm9kZUNoaWxkcmVuKHRhcmdldE5vZGVPck5vZGVBcnJheSxyZW5kZXJlZE5vZGVzQXJyYXkpO2hhdmVBZGRlZE5vZGVzVG9QYXJlbnQ9dHJ1ZTticmVhaztjYXNlInJlcGxhY2VOb2RlIjprby51dGlscy5yZXBsYWNlRG9tTm9kZXModGFyZ2V0Tm9kZU9yTm9kZUFycmF5LHJlbmRlcmVkTm9kZXNBcnJheSk7aGF2ZUFkZGVkTm9kZXNUb1BhcmVudD10cnVlO2JyZWFrO2Nhc2UiaWdub3JlVGFyZ2V0Tm9kZSI6YnJlYWs7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoIlVua25vd24gcmVuZGVyTW9kZTogIityZW5kZXJNb2RlKTt9CmlmKGhhdmVBZGRlZE5vZGVzVG9QYXJlbnQpe2FjdGl2YXRlQmluZGluZ3NPbkNvbnRpbnVvdXNOb2RlQXJyYXkocmVuZGVyZWROb2Rlc0FycmF5LGJpbmRpbmdDb250ZXh0KTtpZihvcHRpb25zWydhZnRlclJlbmRlciddKXtrby5kZXBlbmRlbmN5RGV0ZWN0aW9uLmlnbm9yZShvcHRpb25zWydhZnRlclJlbmRlciddLG51bGwsW3JlbmRlcmVkTm9kZXNBcnJheSxiaW5kaW5nQ29udGV4dFtvcHRpb25zWydhcyddfHwnJGRhdGEnXV0pO30KaWYocmVuZGVyTW9kZT09InJlcGxhY2VDaGlsZHJlbiIpe2tvLmJpbmRpbmdFdmVudC5ub3RpZnkodGFyZ2V0Tm9kZU9yTm9kZUFycmF5LGtvLmJpbmRpbmdFdmVudC5jaGlsZHJlbkNvbXBsZXRlKTt9fQpyZXR1cm4gcmVuZGVyZWROb2Rlc0FycmF5O30KZnVuY3Rpb24gcmVzb2x2ZVRlbXBsYXRlTmFtZSh0ZW1wbGF0ZSxkYXRhLGNvbnRleHQpe2lmKGtvLmlzT2JzZXJ2YWJsZSh0ZW1wbGF0ZSkpe3JldHVybiB0ZW1wbGF0ZSgpO31lbHNlIGlmKHR5cGVvZiB0ZW1wbGF0ZT09PSdmdW5jdGlvbicpe3JldHVybiB0ZW1wbGF0ZShkYXRhLGNvbnRleHQpO31lbHNle3JldHVybiB0ZW1wbGF0ZTt9fQprby5yZW5kZXJUZW1wbGF0ZT1mdW5jdGlvbih0ZW1wbGF0ZSxkYXRhT3JCaW5kaW5nQ29udGV4dCxvcHRpb25zLHRhcmdldE5vZGVPck5vZGVBcnJheSxyZW5kZXJNb2RlKXtvcHRpb25zPW9wdGlvbnN8fHt9O2lmKChvcHRpb25zWyd0ZW1wbGF0ZUVuZ2luZSddfHxfdGVtcGxhdGVFbmdpbmUpPT11bmRlZmluZWQpCnRocm93IG5ldyBFcnJvcigiU2V0IGEgdGVtcGxhdGUgZW5naW5lIGJlZm9yZSBjYWxsaW5nIHJlbmRlclRlbXBsYXRlIik7cmVuZGVyTW9kZT1yZW5kZXJNb2RlfHwicmVwbGFjZUNoaWxkcmVuIjtpZih0YXJnZXROb2RlT3JOb2RlQXJyYXkpe3ZhciBmaXJzdFRhcmdldE5vZGU9Z2V0Rmlyc3ROb2RlRnJvbVBvc3NpYmxlQXJyYXkodGFyZ2V0Tm9kZU9yTm9kZUFycmF5KTt2YXIgd2hlblRvRGlzcG9zZT1mdW5jdGlvbigpe3JldHVybighZmlyc3RUYXJnZXROb2RlKXx8IWtvLnV0aWxzLmRvbU5vZGVJc0F0dGFjaGVkVG9Eb2N1bWVudChmaXJzdFRhcmdldE5vZGUpO307dmFyIGFjdGl2ZWx5RGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkPShmaXJzdFRhcmdldE5vZGUmJnJlbmRlck1vZGU9PSJyZXBsYWNlTm9kZSIpP2ZpcnN0VGFyZ2V0Tm9kZS5wYXJlbnROb2RlOmZpcnN0VGFyZ2V0Tm9kZTtyZXR1cm4ga28uZGVwZW5kZW50T2JzZXJ2YWJsZShmdW5jdGlvbigpe3ZhciBiaW5kaW5nQ29udGV4dD0oZGF0YU9yQmluZGluZ0NvbnRleHQmJihkYXRhT3JCaW5kaW5nQ29udGV4dCBpbnN0YW5jZW9mIGtvLmJpbmRpbmdDb250ZXh0KSk/ZGF0YU9yQmluZGluZ0NvbnRleHQ6bmV3IGtvLmJpbmRpbmdDb250ZXh0KGRhdGFPckJpbmRpbmdDb250ZXh0LG51bGwsbnVsbCxudWxsLHsiZXhwb3J0RGVwZW5kZW5jaWVzIjp0cnVlfSk7dmFyIHRlbXBsYXRlTmFtZT1yZXNvbHZlVGVtcGxhdGVOYW1lKHRlbXBsYXRlLGJpbmRpbmdDb250ZXh0WyckZGF0YSddLGJpbmRpbmdDb250ZXh0KSxyZW5kZXJlZE5vZGVzQXJyYXk9ZXhlY3V0ZVRlbXBsYXRlKHRhcmdldE5vZGVPck5vZGVBcnJheSxyZW5kZXJNb2RlLHRlbXBsYXRlTmFtZSxiaW5kaW5nQ29udGV4dCxvcHRpb25zKTtpZihyZW5kZXJNb2RlPT0icmVwbGFjZU5vZGUiKXt0YXJnZXROb2RlT3JOb2RlQXJyYXk9cmVuZGVyZWROb2Rlc0FycmF5O2ZpcnN0VGFyZ2V0Tm9kZT1nZXRGaXJzdE5vZGVGcm9tUG9zc2libGVBcnJheSh0YXJnZXROb2RlT3JOb2RlQXJyYXkpO319LG51bGwse2Rpc3Bvc2VXaGVuOndoZW5Ub0Rpc3Bvc2UsZGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkOmFjdGl2ZWx5RGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkfSk7fWVsc2V7cmV0dXJuIGtvLm1lbW9pemF0aW9uLm1lbW9pemUoZnVuY3Rpb24oZG9tTm9kZSl7a28ucmVuZGVyVGVtcGxhdGUodGVtcGxhdGUsZGF0YU9yQmluZGluZ0NvbnRleHQsb3B0aW9ucyxkb21Ob2RlLCJyZXBsYWNlTm9kZSIpO30pO319O2tvLnJlbmRlclRlbXBsYXRlRm9yRWFjaD1mdW5jdGlvbih0ZW1wbGF0ZSxhcnJheU9yT2JzZXJ2YWJsZUFycmF5LG9wdGlvbnMsdGFyZ2V0Tm9kZSxwYXJlbnRCaW5kaW5nQ29udGV4dCl7dmFyIGFycmF5SXRlbUNvbnRleHQsYXNOYW1lPW9wdGlvbnNbJ2FzJ107dmFyIGV4ZWN1dGVUZW1wbGF0ZUZvckFycmF5SXRlbT1mdW5jdGlvbihhcnJheVZhbHVlLGluZGV4KXthcnJheUl0ZW1Db250ZXh0PXBhcmVudEJpbmRpbmdDb250ZXh0WydjcmVhdGVDaGlsZENvbnRleHQnXShhcnJheVZhbHVlLHsnYXMnOmFzTmFtZSwnbm9DaGlsZENvbnRleHQnOm9wdGlvbnNbJ25vQ2hpbGRDb250ZXh0J10sJ2V4dGVuZCc6ZnVuY3Rpb24oY29udGV4dCl7Y29udGV4dFsnJGluZGV4J109aW5kZXg7aWYoYXNOYW1lKXtjb250ZXh0W2FzTmFtZSsiSW5kZXgiXT1pbmRleDt9fX0pO3ZhciB0ZW1wbGF0ZU5hbWU9cmVzb2x2ZVRlbXBsYXRlTmFtZSh0ZW1wbGF0ZSxhcnJheVZhbHVlLGFycmF5SXRlbUNvbnRleHQpO3JldHVybiBleGVjdXRlVGVtcGxhdGUodGFyZ2V0Tm9kZSwiaWdub3JlVGFyZ2V0Tm9kZSIsdGVtcGxhdGVOYW1lLGFycmF5SXRlbUNvbnRleHQsb3B0aW9ucyk7fTt2YXIgYWN0aXZhdGVCaW5kaW5nc0NhbGxiYWNrPWZ1bmN0aW9uKGFycmF5VmFsdWUsYWRkZWROb2Rlc0FycmF5LGluZGV4KXthY3RpdmF0ZUJpbmRpbmdzT25Db250aW51b3VzTm9kZUFycmF5KGFkZGVkTm9kZXNBcnJheSxhcnJheUl0ZW1Db250ZXh0KTtpZihvcHRpb25zWydhZnRlclJlbmRlciddKQpvcHRpb25zWydhZnRlclJlbmRlciddKGFkZGVkTm9kZXNBcnJheSxhcnJheVZhbHVlKTthcnJheUl0ZW1Db250ZXh0PW51bGw7fTt2YXIgc2V0RG9tTm9kZUNoaWxkcmVuRnJvbUFycmF5TWFwcGluZz1mdW5jdGlvbihuZXdBcnJheSxjaGFuZ2VMaXN0KXtrby5kZXBlbmRlbmN5RGV0ZWN0aW9uLmlnbm9yZShrby51dGlscy5zZXREb21Ob2RlQ2hpbGRyZW5Gcm9tQXJyYXlNYXBwaW5nLG51bGwsW3RhcmdldE5vZGUsbmV3QXJyYXksZXhlY3V0ZVRlbXBsYXRlRm9yQXJyYXlJdGVtLG9wdGlvbnMsYWN0aXZhdGVCaW5kaW5nc0NhbGxiYWNrLGNoYW5nZUxpc3RdKTtrby5iaW5kaW5nRXZlbnQubm90aWZ5KHRhcmdldE5vZGUsa28uYmluZGluZ0V2ZW50LmNoaWxkcmVuQ29tcGxldGUpO307dmFyIHNob3VsZEhpZGVEZXN0cm95ZWQ9KG9wdGlvbnNbJ2luY2x1ZGVEZXN0cm95ZWQnXT09PWZhbHNlKXx8KGtvLm9wdGlvbnNbJ2ZvcmVhY2hIaWRlc0Rlc3Ryb3llZCddJiYhb3B0aW9uc1snaW5jbHVkZURlc3Ryb3llZCddKTtpZighc2hvdWxkSGlkZURlc3Ryb3llZCYmIW9wdGlvbnNbJ2JlZm9yZVJlbW92ZSddJiZrby5pc09ic2VydmFibGVBcnJheShhcnJheU9yT2JzZXJ2YWJsZUFycmF5KSl7c2V0RG9tTm9kZUNoaWxkcmVuRnJvbUFycmF5TWFwcGluZyhhcnJheU9yT2JzZXJ2YWJsZUFycmF5LnBlZWsoKSk7dmFyIHN1YnNjcmlwdGlvbj1hcnJheU9yT2JzZXJ2YWJsZUFycmF5LnN1YnNjcmliZShmdW5jdGlvbihjaGFuZ2VMaXN0KXtzZXREb21Ob2RlQ2hpbGRyZW5Gcm9tQXJyYXlNYXBwaW5nKGFycmF5T3JPYnNlcnZhYmxlQXJyYXkoKSxjaGFuZ2VMaXN0KTt9LG51bGwsImFycmF5Q2hhbmdlIik7c3Vic2NyaXB0aW9uLmRpc3Bvc2VXaGVuTm9kZUlzUmVtb3ZlZCh0YXJnZXROb2RlKTtyZXR1cm4gc3Vic2NyaXB0aW9uO31lbHNle3JldHVybiBrby5kZXBlbmRlbnRPYnNlcnZhYmxlKGZ1bmN0aW9uKCl7dmFyIHVud3JhcHBlZEFycmF5PWtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUoYXJyYXlPck9ic2VydmFibGVBcnJheSl8fFtdO2lmKHR5cGVvZiB1bndyYXBwZWRBcnJheS5sZW5ndGg9PSJ1bmRlZmluZWQiKQp1bndyYXBwZWRBcnJheT1bdW53cmFwcGVkQXJyYXldO2lmKHNob3VsZEhpZGVEZXN0cm95ZWQpe3Vud3JhcHBlZEFycmF5PWtvLnV0aWxzLmFycmF5RmlsdGVyKHVud3JhcHBlZEFycmF5LGZ1bmN0aW9uKGl0ZW0pe3JldHVybiBpdGVtPT09dW5kZWZpbmVkfHxpdGVtPT09bnVsbHx8IWtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUoaXRlbVsnX2Rlc3Ryb3knXSk7fSk7fQpzZXREb21Ob2RlQ2hpbGRyZW5Gcm9tQXJyYXlNYXBwaW5nKHVud3JhcHBlZEFycmF5KTt9LG51bGwse2Rpc3Bvc2VXaGVuTm9kZUlzUmVtb3ZlZDp0YXJnZXROb2RlfSk7fX07dmFyIHRlbXBsYXRlQ29tcHV0ZWREb21EYXRhS2V5PWtvLnV0aWxzLmRvbURhdGEubmV4dEtleSgpO2Z1bmN0aW9uIGRpc3Bvc2VPbGRDb21wdXRlZEFuZFN0b3JlTmV3T25lKGVsZW1lbnQsbmV3Q29tcHV0ZWQpe3ZhciBvbGRDb21wdXRlZD1rby51dGlscy5kb21EYXRhLmdldChlbGVtZW50LHRlbXBsYXRlQ29tcHV0ZWREb21EYXRhS2V5KTtpZihvbGRDb21wdXRlZCYmKHR5cGVvZihvbGRDb21wdXRlZC5kaXNwb3NlKT09J2Z1bmN0aW9uJykpCm9sZENvbXB1dGVkLmRpc3Bvc2UoKTtrby51dGlscy5kb21EYXRhLnNldChlbGVtZW50LHRlbXBsYXRlQ29tcHV0ZWREb21EYXRhS2V5LChuZXdDb21wdXRlZCYmKCFuZXdDb21wdXRlZC5pc0FjdGl2ZXx8bmV3Q29tcHV0ZWQuaXNBY3RpdmUoKSkpP25ld0NvbXB1dGVkOnVuZGVmaW5lZCk7fQp2YXIgY2xlYW5Db250YWluZXJEb21EYXRhS2V5PWtvLnV0aWxzLmRvbURhdGEubmV4dEtleSgpO2tvLmJpbmRpbmdIYW5kbGVyc1sndGVtcGxhdGUnXT17J2luaXQnOmZ1bmN0aW9uKGVsZW1lbnQsdmFsdWVBY2Nlc3Nvcil7dmFyIGJpbmRpbmdWYWx1ZT1rby51dGlscy51bndyYXBPYnNlcnZhYmxlKHZhbHVlQWNjZXNzb3IoKSk7aWYodHlwZW9mIGJpbmRpbmdWYWx1ZT09InN0cmluZyJ8fCduYW1lJ2luIGJpbmRpbmdWYWx1ZSl7a28udmlydHVhbEVsZW1lbnRzLmVtcHR5Tm9kZShlbGVtZW50KTt9ZWxzZSBpZignbm9kZXMnaW4gYmluZGluZ1ZhbHVlKXt2YXIgbm9kZXM9YmluZGluZ1ZhbHVlWydub2RlcyddfHxbXTtpZihrby5pc09ic2VydmFibGUobm9kZXMpKXt0aHJvdyBuZXcgRXJyb3IoJ1RoZSAibm9kZXMiIG9wdGlvbiBtdXN0IGJlIGEgcGxhaW4sIG5vbi1vYnNlcnZhYmxlIGFycmF5LicpO30KdmFyIGNvbnRhaW5lcj1ub2Rlc1swXSYmbm9kZXNbMF0ucGFyZW50Tm9kZTtpZighY29udGFpbmVyfHwha28udXRpbHMuZG9tRGF0YS5nZXQoY29udGFpbmVyLGNsZWFuQ29udGFpbmVyRG9tRGF0YUtleSkpe2NvbnRhaW5lcj1rby51dGlscy5tb3ZlQ2xlYW5lZE5vZGVzVG9Db250YWluZXJFbGVtZW50KG5vZGVzKTtrby51dGlscy5kb21EYXRhLnNldChjb250YWluZXIsY2xlYW5Db250YWluZXJEb21EYXRhS2V5LHRydWUpO30KbmV3IGtvLnRlbXBsYXRlU291cmNlcy5hbm9ueW1vdXNUZW1wbGF0ZShlbGVtZW50KVsnbm9kZXMnXShjb250YWluZXIpO31lbHNle3ZhciB0ZW1wbGF0ZU5vZGVzPWtvLnZpcnR1YWxFbGVtZW50cy5jaGlsZE5vZGVzKGVsZW1lbnQpO2lmKHRlbXBsYXRlTm9kZXMubGVuZ3RoPjApe3ZhciBjb250YWluZXI9a28udXRpbHMubW92ZUNsZWFuZWROb2Rlc1RvQ29udGFpbmVyRWxlbWVudCh0ZW1wbGF0ZU5vZGVzKTtuZXcga28udGVtcGxhdGVTb3VyY2VzLmFub255bW91c1RlbXBsYXRlKGVsZW1lbnQpWydub2RlcyddKGNvbnRhaW5lcik7fWVsc2V7dGhyb3cgbmV3IEVycm9yKCJBbm9ueW1vdXMgdGVtcGxhdGUgZGVmaW5lZCwgYnV0IG5vIHRlbXBsYXRlIGNvbnRlbnQgd2FzIHByb3ZpZGVkIik7fX0KcmV0dXJueydjb250cm9sc0Rlc2NlbmRhbnRCaW5kaW5ncyc6dHJ1ZX07fSwndXBkYXRlJzpmdW5jdGlvbihlbGVtZW50LHZhbHVlQWNjZXNzb3IsYWxsQmluZGluZ3Msdmlld01vZGVsLGJpbmRpbmdDb250ZXh0KXt2YXIgdmFsdWU9dmFsdWVBY2Nlc3NvcigpLG9wdGlvbnM9a28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh2YWx1ZSksc2hvdWxkRGlzcGxheT10cnVlLHRlbXBsYXRlQ29tcHV0ZWQ9bnVsbCx0ZW1wbGF0ZTtpZih0eXBlb2Ygb3B0aW9ucz09InN0cmluZyIpe3RlbXBsYXRlPXZhbHVlO29wdGlvbnM9e307fWVsc2V7dGVtcGxhdGU9J25hbWUnaW4gb3B0aW9ucz9vcHRpb25zWyduYW1lJ106ZWxlbWVudDtpZignaWYnaW4gb3B0aW9ucykKc2hvdWxkRGlzcGxheT1rby51dGlscy51bndyYXBPYnNlcnZhYmxlKG9wdGlvbnNbJ2lmJ10pO2lmKHNob3VsZERpc3BsYXkmJidpZm5vdCdpbiBvcHRpb25zKQpzaG91bGREaXNwbGF5PSFrby51dGlscy51bndyYXBPYnNlcnZhYmxlKG9wdGlvbnNbJ2lmbm90J10pO2lmKHNob3VsZERpc3BsYXkmJiF0ZW1wbGF0ZSl7c2hvdWxkRGlzcGxheT1mYWxzZTt9fQppZignZm9yZWFjaCdpbiBvcHRpb25zKXt2YXIgZGF0YUFycmF5PShzaG91bGREaXNwbGF5JiZvcHRpb25zWydmb3JlYWNoJ10pfHxbXTt0ZW1wbGF0ZUNvbXB1dGVkPWtvLnJlbmRlclRlbXBsYXRlRm9yRWFjaCh0ZW1wbGF0ZSxkYXRhQXJyYXksb3B0aW9ucyxlbGVtZW50LGJpbmRpbmdDb250ZXh0KTt9ZWxzZSBpZighc2hvdWxkRGlzcGxheSl7a28udmlydHVhbEVsZW1lbnRzLmVtcHR5Tm9kZShlbGVtZW50KTt9ZWxzZXt2YXIgaW5uZXJCaW5kaW5nQ29udGV4dD1iaW5kaW5nQ29udGV4dDtpZignZGF0YSdpbiBvcHRpb25zKXtpbm5lckJpbmRpbmdDb250ZXh0PWJpbmRpbmdDb250ZXh0WydjcmVhdGVDaGlsZENvbnRleHQnXShvcHRpb25zWydkYXRhJ10seydhcyc6b3B0aW9uc1snYXMnXSwnbm9DaGlsZENvbnRleHQnOm9wdGlvbnNbJ25vQ2hpbGRDb250ZXh0J10sJ2V4cG9ydERlcGVuZGVuY2llcyc6dHJ1ZX0pO30KdGVtcGxhdGVDb21wdXRlZD1rby5yZW5kZXJUZW1wbGF0ZSh0ZW1wbGF0ZSxpbm5lckJpbmRpbmdDb250ZXh0LG9wdGlvbnMsZWxlbWVudCk7fQpkaXNwb3NlT2xkQ29tcHV0ZWRBbmRTdG9yZU5ld09uZShlbGVtZW50LHRlbXBsYXRlQ29tcHV0ZWQpO319O2tvLmV4cHJlc3Npb25SZXdyaXRpbmcuYmluZGluZ1Jld3JpdGVWYWxpZGF0b3JzWyd0ZW1wbGF0ZSddPWZ1bmN0aW9uKGJpbmRpbmdWYWx1ZSl7dmFyIHBhcnNlZEJpbmRpbmdWYWx1ZT1rby5leHByZXNzaW9uUmV3cml0aW5nLnBhcnNlT2JqZWN0TGl0ZXJhbChiaW5kaW5nVmFsdWUpO2lmKChwYXJzZWRCaW5kaW5nVmFsdWUubGVuZ3RoPT0xKSYmcGFyc2VkQmluZGluZ1ZhbHVlWzBdWyd1bmtub3duJ10pCnJldHVybiBudWxsO2lmKGtvLmV4cHJlc3Npb25SZXdyaXRpbmcua2V5VmFsdWVBcnJheUNvbnRhaW5zS2V5KHBhcnNlZEJpbmRpbmdWYWx1ZSwibmFtZSIpKQpyZXR1cm4gbnVsbDtyZXR1cm4iVGhpcyB0ZW1wbGF0ZSBlbmdpbmUgZG9lcyBub3Qgc3VwcG9ydCBhbm9ueW1vdXMgdGVtcGxhdGVzIG5lc3RlZCB3aXRoaW4gaXRzIHRlbXBsYXRlcyI7fTtrby52aXJ0dWFsRWxlbWVudHMuYWxsb3dlZEJpbmRpbmdzWyd0ZW1wbGF0ZSddPXRydWU7fSkoKTtrby5leHBvcnRTeW1ib2woJ3NldFRlbXBsYXRlRW5naW5lJyxrby5zZXRUZW1wbGF0ZUVuZ2luZSk7a28uZXhwb3J0U3ltYm9sKCdyZW5kZXJUZW1wbGF0ZScsa28ucmVuZGVyVGVtcGxhdGUpO2tvLnV0aWxzLmZpbmRNb3Zlc0luQXJyYXlDb21wYXJpc29uPWZ1bmN0aW9uKGxlZnQscmlnaHQsbGltaXRGYWlsZWRDb21wYXJlcyl7aWYobGVmdC5sZW5ndGgmJnJpZ2h0Lmxlbmd0aCl7dmFyIGZhaWxlZENvbXBhcmVzLGwscixsZWZ0SXRlbSxyaWdodEl0ZW07Zm9yKGZhaWxlZENvbXBhcmVzPWw9MDsoIWxpbWl0RmFpbGVkQ29tcGFyZXN8fGZhaWxlZENvbXBhcmVzPGxpbWl0RmFpbGVkQ29tcGFyZXMpJiYobGVmdEl0ZW09bGVmdFtsXSk7KytsKXtmb3Iocj0wO3JpZ2h0SXRlbT1yaWdodFtyXTsrK3Ipe2lmKGxlZnRJdGVtWyd2YWx1ZSddPT09cmlnaHRJdGVtWyd2YWx1ZSddKXtsZWZ0SXRlbVsnbW92ZWQnXT1yaWdodEl0ZW1bJ2luZGV4J107cmlnaHRJdGVtWydtb3ZlZCddPWxlZnRJdGVtWydpbmRleCddO3JpZ2h0LnNwbGljZShyLDEpO2ZhaWxlZENvbXBhcmVzPXI9MDticmVhazt9fQpmYWlsZWRDb21wYXJlcys9cjt9fX07a28udXRpbHMuY29tcGFyZUFycmF5cz0oZnVuY3Rpb24oKXt2YXIgc3RhdHVzTm90SW5PbGQ9J2FkZGVkJyxzdGF0dXNOb3RJbk5ldz0nZGVsZXRlZCc7ZnVuY3Rpb24gY29tcGFyZUFycmF5cyhvbGRBcnJheSxuZXdBcnJheSxvcHRpb25zKXtvcHRpb25zPSh0eXBlb2Ygb3B0aW9ucz09PSdib29sZWFuJyk/eydkb250TGltaXRNb3Zlcyc6b3B0aW9uc306KG9wdGlvbnN8fHt9KTtvbGRBcnJheT1vbGRBcnJheXx8W107bmV3QXJyYXk9bmV3QXJyYXl8fFtdO2lmKG9sZEFycmF5Lmxlbmd0aDxuZXdBcnJheS5sZW5ndGgpCnJldHVybiBjb21wYXJlU21hbGxBcnJheVRvQmlnQXJyYXkob2xkQXJyYXksbmV3QXJyYXksc3RhdHVzTm90SW5PbGQsc3RhdHVzTm90SW5OZXcsb3B0aW9ucyk7ZWxzZQpyZXR1cm4gY29tcGFyZVNtYWxsQXJyYXlUb0JpZ0FycmF5KG5ld0FycmF5LG9sZEFycmF5LHN0YXR1c05vdEluTmV3LHN0YXR1c05vdEluT2xkLG9wdGlvbnMpO30KZnVuY3Rpb24gY29tcGFyZVNtYWxsQXJyYXlUb0JpZ0FycmF5KHNtbEFycmF5LGJpZ0FycmF5LHN0YXR1c05vdEluU21sLHN0YXR1c05vdEluQmlnLG9wdGlvbnMpe3ZhciBteU1pbj1NYXRoLm1pbixteU1heD1NYXRoLm1heCxlZGl0RGlzdGFuY2VNYXRyaXg9W10sc21sSW5kZXgsc21sSW5kZXhNYXg9c21sQXJyYXkubGVuZ3RoLGJpZ0luZGV4LGJpZ0luZGV4TWF4PWJpZ0FycmF5Lmxlbmd0aCxjb21wYXJlUmFuZ2U9KGJpZ0luZGV4TWF4LXNtbEluZGV4TWF4KXx8MSxtYXhEaXN0YW5jZT1zbWxJbmRleE1heCtiaWdJbmRleE1heCsxLHRoaXNSb3csbGFzdFJvdyxiaWdJbmRleE1heEZvclJvdyxiaWdJbmRleE1pbkZvclJvdztmb3Ioc21sSW5kZXg9MDtzbWxJbmRleDw9c21sSW5kZXhNYXg7c21sSW5kZXgrKyl7bGFzdFJvdz10aGlzUm93O2VkaXREaXN0YW5jZU1hdHJpeC5wdXNoKHRoaXNSb3c9W10pO2JpZ0luZGV4TWF4Rm9yUm93PW15TWluKGJpZ0luZGV4TWF4LHNtbEluZGV4K2NvbXBhcmVSYW5nZSk7YmlnSW5kZXhNaW5Gb3JSb3c9bXlNYXgoMCxzbWxJbmRleC0xKTtmb3IoYmlnSW5kZXg9YmlnSW5kZXhNaW5Gb3JSb3c7YmlnSW5kZXg8PWJpZ0luZGV4TWF4Rm9yUm93O2JpZ0luZGV4Kyspe2lmKCFiaWdJbmRleCkKdGhpc1Jvd1tiaWdJbmRleF09c21sSW5kZXgrMTtlbHNlIGlmKCFzbWxJbmRleCkKdGhpc1Jvd1tiaWdJbmRleF09YmlnSW5kZXgrMTtlbHNlIGlmKHNtbEFycmF5W3NtbEluZGV4LTFdPT09YmlnQXJyYXlbYmlnSW5kZXgtMV0pCnRoaXNSb3dbYmlnSW5kZXhdPWxhc3RSb3dbYmlnSW5kZXgtMV07ZWxzZXt2YXIgbm9ydGhEaXN0YW5jZT1sYXN0Um93W2JpZ0luZGV4XXx8bWF4RGlzdGFuY2U7dmFyIHdlc3REaXN0YW5jZT10aGlzUm93W2JpZ0luZGV4LTFdfHxtYXhEaXN0YW5jZTt0aGlzUm93W2JpZ0luZGV4XT1teU1pbihub3J0aERpc3RhbmNlLHdlc3REaXN0YW5jZSkrMTt9fX0KdmFyIGVkaXRTY3JpcHQ9W10sbWVNaW51c09uZSxub3RJblNtbD1bXSxub3RJbkJpZz1bXTtmb3Ioc21sSW5kZXg9c21sSW5kZXhNYXgsYmlnSW5kZXg9YmlnSW5kZXhNYXg7c21sSW5kZXh8fGJpZ0luZGV4Oyl7bWVNaW51c09uZT1lZGl0RGlzdGFuY2VNYXRyaXhbc21sSW5kZXhdW2JpZ0luZGV4XS0xO2lmKGJpZ0luZGV4JiZtZU1pbnVzT25lPT09ZWRpdERpc3RhbmNlTWF0cml4W3NtbEluZGV4XVtiaWdJbmRleC0xXSl7bm90SW5TbWwucHVzaChlZGl0U2NyaXB0W2VkaXRTY3JpcHQubGVuZ3RoXT17J3N0YXR1cyc6c3RhdHVzTm90SW5TbWwsJ3ZhbHVlJzpiaWdBcnJheVstLWJpZ0luZGV4XSwnaW5kZXgnOmJpZ0luZGV4fSk7fWVsc2UgaWYoc21sSW5kZXgmJm1lTWludXNPbmU9PT1lZGl0RGlzdGFuY2VNYXRyaXhbc21sSW5kZXgtMV1bYmlnSW5kZXhdKXtub3RJbkJpZy5wdXNoKGVkaXRTY3JpcHRbZWRpdFNjcmlwdC5sZW5ndGhdPXsnc3RhdHVzJzpzdGF0dXNOb3RJbkJpZywndmFsdWUnOnNtbEFycmF5Wy0tc21sSW5kZXhdLCdpbmRleCc6c21sSW5kZXh9KTt9ZWxzZXstLWJpZ0luZGV4Oy0tc21sSW5kZXg7aWYoIW9wdGlvbnNbJ3NwYXJzZSddKXtlZGl0U2NyaXB0LnB1c2goeydzdGF0dXMnOiJyZXRhaW5lZCIsJ3ZhbHVlJzpiaWdBcnJheVtiaWdJbmRleF19KTt9fX0Ka28udXRpbHMuZmluZE1vdmVzSW5BcnJheUNvbXBhcmlzb24obm90SW5CaWcsbm90SW5TbWwsIW9wdGlvbnNbJ2RvbnRMaW1pdE1vdmVzJ10mJnNtbEluZGV4TWF4KjEwKTtyZXR1cm4gZWRpdFNjcmlwdC5yZXZlcnNlKCk7fQpyZXR1cm4gY29tcGFyZUFycmF5czt9KSgpO2tvLmV4cG9ydFN5bWJvbCgndXRpbHMuY29tcGFyZUFycmF5cycsa28udXRpbHMuY29tcGFyZUFycmF5cyk7KGZ1bmN0aW9uKCl7ZnVuY3Rpb24gbWFwTm9kZUFuZFJlZnJlc2hXaGVuQ2hhbmdlZChjb250YWluZXJOb2RlLG1hcHBpbmcsdmFsdWVUb01hcCxjYWxsYmFja0FmdGVyQWRkaW5nTm9kZXMsaW5kZXgpe3ZhciBtYXBwZWROb2Rlcz1bXTt2YXIgZGVwZW5kZW50T2JzZXJ2YWJsZT1rby5kZXBlbmRlbnRPYnNlcnZhYmxlKGZ1bmN0aW9uKCl7dmFyIG5ld01hcHBlZE5vZGVzPW1hcHBpbmcodmFsdWVUb01hcCxpbmRleCxrby51dGlscy5maXhVcENvbnRpbnVvdXNOb2RlQXJyYXkobWFwcGVkTm9kZXMsY29udGFpbmVyTm9kZSkpfHxbXTtpZihtYXBwZWROb2Rlcy5sZW5ndGg+MCl7a28udXRpbHMucmVwbGFjZURvbU5vZGVzKG1hcHBlZE5vZGVzLG5ld01hcHBlZE5vZGVzKTtpZihjYWxsYmFja0FmdGVyQWRkaW5nTm9kZXMpCmtvLmRlcGVuZGVuY3lEZXRlY3Rpb24uaWdub3JlKGNhbGxiYWNrQWZ0ZXJBZGRpbmdOb2RlcyxudWxsLFt2YWx1ZVRvTWFwLG5ld01hcHBlZE5vZGVzLGluZGV4XSk7fQptYXBwZWROb2Rlcy5sZW5ndGg9MDtrby51dGlscy5hcnJheVB1c2hBbGwobWFwcGVkTm9kZXMsbmV3TWFwcGVkTm9kZXMpO30sbnVsbCx7ZGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkOmNvbnRhaW5lck5vZGUsZGlzcG9zZVdoZW46ZnVuY3Rpb24oKXtyZXR1cm4ha28udXRpbHMuYW55RG9tTm9kZUlzQXR0YWNoZWRUb0RvY3VtZW50KG1hcHBlZE5vZGVzKTt9fSk7cmV0dXJue21hcHBlZE5vZGVzOm1hcHBlZE5vZGVzLGRlcGVuZGVudE9ic2VydmFibGU6KGRlcGVuZGVudE9ic2VydmFibGUuaXNBY3RpdmUoKT9kZXBlbmRlbnRPYnNlcnZhYmxlOnVuZGVmaW5lZCl9O30KdmFyIGxhc3RNYXBwaW5nUmVzdWx0RG9tRGF0YUtleT1rby51dGlscy5kb21EYXRhLm5leHRLZXkoKSxkZWxldGVkSXRlbUR1bW15VmFsdWU9a28udXRpbHMuZG9tRGF0YS5uZXh0S2V5KCk7a28udXRpbHMuc2V0RG9tTm9kZUNoaWxkcmVuRnJvbUFycmF5TWFwcGluZz1mdW5jdGlvbihkb21Ob2RlLGFycmF5LG1hcHBpbmcsb3B0aW9ucyxjYWxsYmFja0FmdGVyQWRkaW5nTm9kZXMsZWRpdFNjcmlwdCl7YXJyYXk9YXJyYXl8fFtdO2lmKHR5cGVvZiBhcnJheS5sZW5ndGg9PSJ1bmRlZmluZWQiKQphcnJheT1bYXJyYXldO29wdGlvbnM9b3B0aW9uc3x8e307dmFyIGxhc3RNYXBwaW5nUmVzdWx0PWtvLnV0aWxzLmRvbURhdGEuZ2V0KGRvbU5vZGUsbGFzdE1hcHBpbmdSZXN1bHREb21EYXRhS2V5KTt2YXIgaXNGaXJzdEV4ZWN1dGlvbj0hbGFzdE1hcHBpbmdSZXN1bHQ7dmFyIG5ld01hcHBpbmdSZXN1bHQ9W107dmFyIGxhc3RNYXBwaW5nUmVzdWx0SW5kZXg9MDt2YXIgY3VycmVudEFycmF5SW5kZXg9MDt2YXIgbm9kZXNUb0RlbGV0ZT1bXTt2YXIgaXRlbXNUb01vdmVGaXJzdEluZGV4ZXM9W107dmFyIGl0ZW1zRm9yQmVmb3JlUmVtb3ZlQ2FsbGJhY2tzPVtdO3ZhciBpdGVtc0Zvck1vdmVDYWxsYmFja3M9W107dmFyIGl0ZW1zRm9yQWZ0ZXJBZGRDYWxsYmFja3M9W107dmFyIG1hcERhdGE7dmFyIGNvdW50V2FpdGluZ0ZvclJlbW92ZT0wO2Z1bmN0aW9uIGl0ZW1BZGRlZCh2YWx1ZSl7bWFwRGF0YT17YXJyYXlFbnRyeTp2YWx1ZSxpbmRleE9ic2VydmFibGU6a28ub2JzZXJ2YWJsZShjdXJyZW50QXJyYXlJbmRleCsrKX07bmV3TWFwcGluZ1Jlc3VsdC5wdXNoKG1hcERhdGEpO2lmKCFpc0ZpcnN0RXhlY3V0aW9uKXtpdGVtc0ZvckFmdGVyQWRkQ2FsbGJhY2tzLnB1c2gobWFwRGF0YSk7fX0KZnVuY3Rpb24gaXRlbU1vdmVkT3JSZXRhaW5lZChvbGRQb3NpdGlvbil7bWFwRGF0YT1sYXN0TWFwcGluZ1Jlc3VsdFtvbGRQb3NpdGlvbl07aWYoY3VycmVudEFycmF5SW5kZXghPT1tYXBEYXRhLmluZGV4T2JzZXJ2YWJsZS5wZWVrKCkpCml0ZW1zRm9yTW92ZUNhbGxiYWNrcy5wdXNoKG1hcERhdGEpO21hcERhdGEuaW5kZXhPYnNlcnZhYmxlKGN1cnJlbnRBcnJheUluZGV4KyspO2tvLnV0aWxzLmZpeFVwQ29udGludW91c05vZGVBcnJheShtYXBEYXRhLm1hcHBlZE5vZGVzLGRvbU5vZGUpO25ld01hcHBpbmdSZXN1bHQucHVzaChtYXBEYXRhKTt9CmZ1bmN0aW9uIGNhbGxDYWxsYmFjayhjYWxsYmFjayxpdGVtcyl7aWYoY2FsbGJhY2spe2Zvcih2YXIgaT0wLG49aXRlbXMubGVuZ3RoO2k8bjtpKyspe2tvLnV0aWxzLmFycmF5Rm9yRWFjaChpdGVtc1tpXS5tYXBwZWROb2RlcyxmdW5jdGlvbihub2RlKXtjYWxsYmFjayhub2RlLGksaXRlbXNbaV0uYXJyYXlFbnRyeSk7fSk7fX19CmlmKGlzRmlyc3RFeGVjdXRpb24pe2tvLnV0aWxzLmFycmF5Rm9yRWFjaChhcnJheSxpdGVtQWRkZWQpO31lbHNle2lmKCFlZGl0U2NyaXB0fHwobGFzdE1hcHBpbmdSZXN1bHQmJmxhc3RNYXBwaW5nUmVzdWx0WydfY291bnRXYWl0aW5nRm9yUmVtb3ZlJ10pKXt2YXIgbGFzdEFycmF5PWtvLnV0aWxzLmFycmF5TWFwKGxhc3RNYXBwaW5nUmVzdWx0LGZ1bmN0aW9uKHgpe3JldHVybiB4LmFycmF5RW50cnk7fSksY29tcGFyZU9wdGlvbnM9eydkb250TGltaXRNb3Zlcyc6b3B0aW9uc1snZG9udExpbWl0TW92ZXMnXSwnc3BhcnNlJzp0cnVlfTtlZGl0U2NyaXB0PWtvLnV0aWxzLmNvbXBhcmVBcnJheXMobGFzdEFycmF5LGFycmF5LGNvbXBhcmVPcHRpb25zKTt9CmZvcih2YXIgaT0wLGVkaXRTY3JpcHRJdGVtLG1vdmVkSW5kZXgsaXRlbUluZGV4O2VkaXRTY3JpcHRJdGVtPWVkaXRTY3JpcHRbaV07aSsrKXttb3ZlZEluZGV4PWVkaXRTY3JpcHRJdGVtWydtb3ZlZCddO2l0ZW1JbmRleD1lZGl0U2NyaXB0SXRlbVsnaW5kZXgnXTtzd2l0Y2goZWRpdFNjcmlwdEl0ZW1bJ3N0YXR1cyddKXtjYXNlImRlbGV0ZWQiOndoaWxlKGxhc3RNYXBwaW5nUmVzdWx0SW5kZXg8aXRlbUluZGV4KXtpdGVtTW92ZWRPclJldGFpbmVkKGxhc3RNYXBwaW5nUmVzdWx0SW5kZXgrKyk7fQppZihtb3ZlZEluZGV4PT09dW5kZWZpbmVkKXttYXBEYXRhPWxhc3RNYXBwaW5nUmVzdWx0W2xhc3RNYXBwaW5nUmVzdWx0SW5kZXhdO2lmKG1hcERhdGEuZGVwZW5kZW50T2JzZXJ2YWJsZSl7bWFwRGF0YS5kZXBlbmRlbnRPYnNlcnZhYmxlLmRpc3Bvc2UoKTttYXBEYXRhLmRlcGVuZGVudE9ic2VydmFibGU9dW5kZWZpbmVkO30KaWYoa28udXRpbHMuZml4VXBDb250aW51b3VzTm9kZUFycmF5KG1hcERhdGEubWFwcGVkTm9kZXMsZG9tTm9kZSkubGVuZ3RoKXtpZihvcHRpb25zWydiZWZvcmVSZW1vdmUnXSl7bmV3TWFwcGluZ1Jlc3VsdC5wdXNoKG1hcERhdGEpO2NvdW50V2FpdGluZ0ZvclJlbW92ZSsrO2lmKG1hcERhdGEuYXJyYXlFbnRyeT09PWRlbGV0ZWRJdGVtRHVtbXlWYWx1ZSl7bWFwRGF0YT1udWxsO31lbHNle2l0ZW1zRm9yQmVmb3JlUmVtb3ZlQ2FsbGJhY2tzLnB1c2gobWFwRGF0YSk7fX0KaWYobWFwRGF0YSl7bm9kZXNUb0RlbGV0ZS5wdXNoLmFwcGx5KG5vZGVzVG9EZWxldGUsbWFwRGF0YS5tYXBwZWROb2Rlcyk7fX19Cmxhc3RNYXBwaW5nUmVzdWx0SW5kZXgrKzticmVhaztjYXNlImFkZGVkIjp3aGlsZShjdXJyZW50QXJyYXlJbmRleDxpdGVtSW5kZXgpe2l0ZW1Nb3ZlZE9yUmV0YWluZWQobGFzdE1hcHBpbmdSZXN1bHRJbmRleCsrKTt9CmlmKG1vdmVkSW5kZXghPT11bmRlZmluZWQpe2l0ZW1zVG9Nb3ZlRmlyc3RJbmRleGVzLnB1c2gobmV3TWFwcGluZ1Jlc3VsdC5sZW5ndGgpO2l0ZW1Nb3ZlZE9yUmV0YWluZWQobW92ZWRJbmRleCk7fWVsc2V7aXRlbUFkZGVkKGVkaXRTY3JpcHRJdGVtWyd2YWx1ZSddKTt9CmJyZWFrO319CndoaWxlKGN1cnJlbnRBcnJheUluZGV4PGFycmF5Lmxlbmd0aCl7aXRlbU1vdmVkT3JSZXRhaW5lZChsYXN0TWFwcGluZ1Jlc3VsdEluZGV4KyspO30KbmV3TWFwcGluZ1Jlc3VsdFsnX2NvdW50V2FpdGluZ0ZvclJlbW92ZSddPWNvdW50V2FpdGluZ0ZvclJlbW92ZTt9CmtvLnV0aWxzLmRvbURhdGEuc2V0KGRvbU5vZGUsbGFzdE1hcHBpbmdSZXN1bHREb21EYXRhS2V5LG5ld01hcHBpbmdSZXN1bHQpO2NhbGxDYWxsYmFjayhvcHRpb25zWydiZWZvcmVNb3ZlJ10saXRlbXNGb3JNb3ZlQ2FsbGJhY2tzKTtrby51dGlscy5hcnJheUZvckVhY2gobm9kZXNUb0RlbGV0ZSxvcHRpb25zWydiZWZvcmVSZW1vdmUnXT9rby5jbGVhbk5vZGU6a28ucmVtb3ZlTm9kZSk7dmFyIGksaixsYXN0Tm9kZSxub2RlVG9JbnNlcnQsbWFwcGVkTm9kZXMsYWN0aXZlRWxlbWVudDt0cnl7YWN0aXZlRWxlbWVudD1kb21Ob2RlLm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudDt9Y2F0Y2goZSl7fQppZihpdGVtc1RvTW92ZUZpcnN0SW5kZXhlcy5sZW5ndGgpe3doaWxlKChpPWl0ZW1zVG9Nb3ZlRmlyc3RJbmRleGVzLnNoaWZ0KCkpIT11bmRlZmluZWQpe21hcERhdGE9bmV3TWFwcGluZ1Jlc3VsdFtpXTtmb3IobGFzdE5vZGU9dW5kZWZpbmVkO2k7KXtpZigobWFwcGVkTm9kZXM9bmV3TWFwcGluZ1Jlc3VsdFstLWldLm1hcHBlZE5vZGVzKSYmbWFwcGVkTm9kZXMubGVuZ3RoKXtsYXN0Tm9kZT1tYXBwZWROb2Rlc1ttYXBwZWROb2Rlcy5sZW5ndGgtMV07YnJlYWs7fX0KZm9yKGo9MDtub2RlVG9JbnNlcnQ9bWFwRGF0YS5tYXBwZWROb2Rlc1tqXTtsYXN0Tm9kZT1ub2RlVG9JbnNlcnQsaisrKXtrby52aXJ0dWFsRWxlbWVudHMuaW5zZXJ0QWZ0ZXIoZG9tTm9kZSxub2RlVG9JbnNlcnQsbGFzdE5vZGUpO319fQpmb3IoaT0wO21hcERhdGE9bmV3TWFwcGluZ1Jlc3VsdFtpXTtpKyspe2lmKCFtYXBEYXRhLm1hcHBlZE5vZGVzKQprby51dGlscy5leHRlbmQobWFwRGF0YSxtYXBOb2RlQW5kUmVmcmVzaFdoZW5DaGFuZ2VkKGRvbU5vZGUsbWFwcGluZyxtYXBEYXRhLmFycmF5RW50cnksY2FsbGJhY2tBZnRlckFkZGluZ05vZGVzLG1hcERhdGEuaW5kZXhPYnNlcnZhYmxlKSk7Zm9yKGo9MDtub2RlVG9JbnNlcnQ9bWFwRGF0YS5tYXBwZWROb2Rlc1tqXTtsYXN0Tm9kZT1ub2RlVG9JbnNlcnQsaisrKXtrby52aXJ0dWFsRWxlbWVudHMuaW5zZXJ0QWZ0ZXIoZG9tTm9kZSxub2RlVG9JbnNlcnQsbGFzdE5vZGUpO30KaWYoIW1hcERhdGEuaW5pdGlhbGl6ZWQmJmNhbGxiYWNrQWZ0ZXJBZGRpbmdOb2Rlcyl7Y2FsbGJhY2tBZnRlckFkZGluZ05vZGVzKG1hcERhdGEuYXJyYXlFbnRyeSxtYXBEYXRhLm1hcHBlZE5vZGVzLG1hcERhdGEuaW5kZXhPYnNlcnZhYmxlKTttYXBEYXRhLmluaXRpYWxpemVkPXRydWU7bGFzdE5vZGU9bWFwRGF0YS5tYXBwZWROb2Rlc1ttYXBEYXRhLm1hcHBlZE5vZGVzLmxlbmd0aC0xXTt9fQppZihhY3RpdmVFbGVtZW50JiZkb21Ob2RlLm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCE9YWN0aXZlRWxlbWVudCl7YWN0aXZlRWxlbWVudC5mb2N1cygpO30KY2FsbENhbGxiYWNrKG9wdGlvbnNbJ2JlZm9yZVJlbW92ZSddLGl0ZW1zRm9yQmVmb3JlUmVtb3ZlQ2FsbGJhY2tzKTtmb3IoaT0wO2k8aXRlbXNGb3JCZWZvcmVSZW1vdmVDYWxsYmFja3MubGVuZ3RoOysraSl7aXRlbXNGb3JCZWZvcmVSZW1vdmVDYWxsYmFja3NbaV0uYXJyYXlFbnRyeT1kZWxldGVkSXRlbUR1bW15VmFsdWU7fQpjYWxsQ2FsbGJhY2sob3B0aW9uc1snYWZ0ZXJNb3ZlJ10saXRlbXNGb3JNb3ZlQ2FsbGJhY2tzKTtjYWxsQ2FsbGJhY2sob3B0aW9uc1snYWZ0ZXJBZGQnXSxpdGVtc0ZvckFmdGVyQWRkQ2FsbGJhY2tzKTt9fSkoKTtrby5leHBvcnRTeW1ib2woJ3V0aWxzLnNldERvbU5vZGVDaGlsZHJlbkZyb21BcnJheU1hcHBpbmcnLGtvLnV0aWxzLnNldERvbU5vZGVDaGlsZHJlbkZyb21BcnJheU1hcHBpbmcpO2tvLm5hdGl2ZVRlbXBsYXRlRW5naW5lPWZ1bmN0aW9uKCl7dGhpc1snYWxsb3dUZW1wbGF0ZVJld3JpdGluZyddPWZhbHNlO30Ka28ubmF0aXZlVGVtcGxhdGVFbmdpbmUucHJvdG90eXBlPW5ldyBrby50ZW1wbGF0ZUVuZ2luZSgpO2tvLm5hdGl2ZVRlbXBsYXRlRW5naW5lLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1rby5uYXRpdmVUZW1wbGF0ZUVuZ2luZTtrby5uYXRpdmVUZW1wbGF0ZUVuZ2luZS5wcm90b3R5cGVbJ3JlbmRlclRlbXBsYXRlU291cmNlJ109ZnVuY3Rpb24odGVtcGxhdGVTb3VyY2UsYmluZGluZ0NvbnRleHQsb3B0aW9ucyx0ZW1wbGF0ZURvY3VtZW50KXt2YXIgdXNlTm9kZXNJZkF2YWlsYWJsZT0hKGtvLnV0aWxzLmllVmVyc2lvbjw5KSx0ZW1wbGF0ZU5vZGVzRnVuYz11c2VOb2Rlc0lmQXZhaWxhYmxlP3RlbXBsYXRlU291cmNlWydub2RlcyddOm51bGwsdGVtcGxhdGVOb2Rlcz10ZW1wbGF0ZU5vZGVzRnVuYz90ZW1wbGF0ZVNvdXJjZVsnbm9kZXMnXSgpOm51bGw7aWYodGVtcGxhdGVOb2Rlcyl7cmV0dXJuIGtvLnV0aWxzLm1ha2VBcnJheSh0ZW1wbGF0ZU5vZGVzLmNsb25lTm9kZSh0cnVlKS5jaGlsZE5vZGVzKTt9ZWxzZXt2YXIgdGVtcGxhdGVUZXh0PXRlbXBsYXRlU291cmNlWyd0ZXh0J10oKTtyZXR1cm4ga28udXRpbHMucGFyc2VIdG1sRnJhZ21lbnQodGVtcGxhdGVUZXh0LHRlbXBsYXRlRG9jdW1lbnQpO319O2tvLm5hdGl2ZVRlbXBsYXRlRW5naW5lLmluc3RhbmNlPW5ldyBrby5uYXRpdmVUZW1wbGF0ZUVuZ2luZSgpO2tvLnNldFRlbXBsYXRlRW5naW5lKGtvLm5hdGl2ZVRlbXBsYXRlRW5naW5lLmluc3RhbmNlKTtrby5leHBvcnRTeW1ib2woJ25hdGl2ZVRlbXBsYXRlRW5naW5lJyxrby5uYXRpdmVUZW1wbGF0ZUVuZ2luZSk7KGZ1bmN0aW9uKCl7a28uanF1ZXJ5VG1wbFRlbXBsYXRlRW5naW5lPWZ1bmN0aW9uKCl7dmFyIGpRdWVyeVRtcGxWZXJzaW9uPXRoaXMualF1ZXJ5VG1wbFZlcnNpb249KGZ1bmN0aW9uKCl7aWYoIWpRdWVyeUluc3RhbmNlfHwhKGpRdWVyeUluc3RhbmNlWyd0bXBsJ10pKQpyZXR1cm4gMDt0cnl7aWYoalF1ZXJ5SW5zdGFuY2VbJ3RtcGwnXVsndGFnJ11bJ3RtcGwnXVsnb3BlbiddLnRvU3RyaW5nKCkuaW5kZXhPZignX18nKT49MCl7cmV0dXJuIDI7fX1jYXRjaChleCl7fQpyZXR1cm4gMTt9KSgpO2Z1bmN0aW9uIGVuc3VyZUhhc1JlZmVyZW5jZWRKUXVlcnlUZW1wbGF0ZXMoKXtpZihqUXVlcnlUbXBsVmVyc2lvbjwyKQp0aHJvdyBuZXcgRXJyb3IoIllvdXIgdmVyc2lvbiBvZiBqUXVlcnkudG1wbCBpcyB0b28gb2xkLiBQbGVhc2UgdXBncmFkZSB0byBqUXVlcnkudG1wbCAxLjAuMHByZSBvciBsYXRlci4iKTt9CmZ1bmN0aW9uIGV4ZWN1dGVUZW1wbGF0ZShjb21waWxlZFRlbXBsYXRlLGRhdGEsalF1ZXJ5VGVtcGxhdGVPcHRpb25zKXtyZXR1cm4galF1ZXJ5SW5zdGFuY2VbJ3RtcGwnXShjb21waWxlZFRlbXBsYXRlLGRhdGEsalF1ZXJ5VGVtcGxhdGVPcHRpb25zKTt9CnRoaXNbJ3JlbmRlclRlbXBsYXRlU291cmNlJ109ZnVuY3Rpb24odGVtcGxhdGVTb3VyY2UsYmluZGluZ0NvbnRleHQsb3B0aW9ucyx0ZW1wbGF0ZURvY3VtZW50KXt0ZW1wbGF0ZURvY3VtZW50PXRlbXBsYXRlRG9jdW1lbnR8fGRvY3VtZW50O29wdGlvbnM9b3B0aW9uc3x8e307ZW5zdXJlSGFzUmVmZXJlbmNlZEpRdWVyeVRlbXBsYXRlcygpO3ZhciBwcmVjb21waWxlZD10ZW1wbGF0ZVNvdXJjZVsnZGF0YSddKCdwcmVjb21waWxlZCcpO2lmKCFwcmVjb21waWxlZCl7dmFyIHRlbXBsYXRlVGV4dD10ZW1wbGF0ZVNvdXJjZVsndGV4dCddKCl8fCIiO3RlbXBsYXRlVGV4dD0ie3trb193aXRoICRpdGVtLmtvQmluZGluZ0NvbnRleHR9fSIrdGVtcGxhdGVUZXh0KyJ7ey9rb193aXRofX0iO3ByZWNvbXBpbGVkPWpRdWVyeUluc3RhbmNlWyd0ZW1wbGF0ZSddKG51bGwsdGVtcGxhdGVUZXh0KTt0ZW1wbGF0ZVNvdXJjZVsnZGF0YSddKCdwcmVjb21waWxlZCcscHJlY29tcGlsZWQpO30KdmFyIGRhdGE9W2JpbmRpbmdDb250ZXh0WyckZGF0YSddXTt2YXIgalF1ZXJ5VGVtcGxhdGVPcHRpb25zPWpRdWVyeUluc3RhbmNlWydleHRlbmQnXSh7J2tvQmluZGluZ0NvbnRleHQnOmJpbmRpbmdDb250ZXh0fSxvcHRpb25zWyd0ZW1wbGF0ZU9wdGlvbnMnXSk7dmFyIHJlc3VsdE5vZGVzPWV4ZWN1dGVUZW1wbGF0ZShwcmVjb21waWxlZCxkYXRhLGpRdWVyeVRlbXBsYXRlT3B0aW9ucyk7cmVzdWx0Tm9kZXNbJ2FwcGVuZFRvJ10odGVtcGxhdGVEb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKSk7alF1ZXJ5SW5zdGFuY2VbJ2ZyYWdtZW50cyddPXt9O3JldHVybiByZXN1bHROb2Rlczt9O3RoaXNbJ2NyZWF0ZUphdmFTY3JpcHRFdmFsdWF0b3JCbG9jayddPWZ1bmN0aW9uKHNjcmlwdCl7cmV0dXJuInt7a29fY29kZSAoKGZ1bmN0aW9uKCkgeyByZXR1cm4gIitzY3JpcHQrIiB9KSgpKSB9fSI7fTt0aGlzWydhZGRUZW1wbGF0ZSddPWZ1bmN0aW9uKHRlbXBsYXRlTmFtZSx0ZW1wbGF0ZU1hcmt1cCl7ZG9jdW1lbnQud3JpdGUoIjxzY3JpcHQgdHlwZT0ndGV4dC9odG1sJyBpZD0nIit0ZW1wbGF0ZU5hbWUrIic+Iit0ZW1wbGF0ZU1hcmt1cCsiPCIrIi9zY3JpcHQ+Iik7fTtpZihqUXVlcnlUbXBsVmVyc2lvbj4wKXtqUXVlcnlJbnN0YW5jZVsndG1wbCddWyd0YWcnXVsna29fY29kZSddPXtvcGVuOiJfXy5wdXNoKCQxIHx8ICcnKTsifTtqUXVlcnlJbnN0YW5jZVsndG1wbCddWyd0YWcnXVsna29fd2l0aCddPXtvcGVuOiJ3aXRoKCQxKSB7IixjbG9zZToifSAifTt9fTtrby5qcXVlcnlUbXBsVGVtcGxhdGVFbmdpbmUucHJvdG90eXBlPW5ldyBrby50ZW1wbGF0ZUVuZ2luZSgpO2tvLmpxdWVyeVRtcGxUZW1wbGF0ZUVuZ2luZS5wcm90b3R5cGUuY29uc3RydWN0b3I9a28uanF1ZXJ5VG1wbFRlbXBsYXRlRW5naW5lO3ZhciBqcXVlcnlUbXBsVGVtcGxhdGVFbmdpbmVJbnN0YW5jZT1uZXcga28uanF1ZXJ5VG1wbFRlbXBsYXRlRW5naW5lKCk7aWYoanF1ZXJ5VG1wbFRlbXBsYXRlRW5naW5lSW5zdGFuY2UualF1ZXJ5VG1wbFZlcnNpb24+MCkKa28uc2V0VGVtcGxhdGVFbmdpbmUoanF1ZXJ5VG1wbFRlbXBsYXRlRW5naW5lSW5zdGFuY2UpO2tvLmV4cG9ydFN5bWJvbCgnanF1ZXJ5VG1wbFRlbXBsYXRlRW5naW5lJyxrby5qcXVlcnlUbXBsVGVtcGxhdGVFbmdpbmUpO30pKCk7fSkpO30oKSk7fSkoKTs=</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPBody>
      <TcpPackets>
        <PacketInfo time="94063625" offset="0" length="16384" />
        <PacketInfo time="94063640" offset="16384" length="16384" />
        <PacketInfo time="94063640" offset="32768" length="5683" />
      </TcpPackets>
    </HTTPResponse>
  </HTTPTask>
</HTTPSnapshot>